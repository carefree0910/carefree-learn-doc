(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{103:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return o})),t.d(a,"metadata",(function(){return b})),t.d(a,"rightToc",(function(){return s})),t.d(a,"default",(function(){return m}));var n=t(3),r=t(7),i=(t(0),t(109)),c=t(116),l=t(117),o={slug:"v0.2.0-release",title:"Deep Learning \u2764\ufe0f PyTorch",author:"carefree0910",author_title:"Individual Developer",author_url:"https://github.com/carefree0910",author_image_url:"/static/img/avatar.jfif",image:"https://socialify.git.ci/carefree0910/carefree-learn/image?description=1&descriptionEditable=Deep%20Learning%20%E2%9D%A4%EF%B8%8F%20PyTorch&forks=1&issues=1&logo=https%3A%2F%2Fraw.githubusercontent.com%2Fcarefree0910%2Fcarefree-learn-doc%2Fmaster%2Fstatic%2Fimg%2Flogo.min.svg&pattern=Floating%20Cogs&stargazers=1",tags:["carefree-learn"]},b={permalink:"/carefree-learn-doc/blog/v0.2.0-release",source:"@site/blog/2021-10-29-v0.2.0.md",description:"We're happy to announce that carefree-learn released v0.2.0, which made it capable of solving not only tabular tasks, but also other general deep learning tasks!",date:"2021-10-29T00:00:00.000Z",tags:[{label:"carefree-learn",permalink:"/carefree-learn-doc/blog/tags/carefree-learn"}],title:"Deep Learning \u2764\ufe0f PyTorch",readingTime:4.89,truncated:!0},s=[{value:"Introduction",id:"introduction",children:[{value:"Machine Learning \ud83d\udcc8",id:"machine-learning-",children:[]},{value:"Computer Vision \ud83d\uddbc\ufe0f",id:"computer-vision-\ufe0f",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Migration Guide",id:"migration-guide",children:[{value:"Data Module",id:"data-module",children:[]},{value:"Model",id:"model",children:[]}]}],p={rightToc:s};function m(e){var a=e.components,o=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,o,{components:a,mdxType:"MDXLayout"}),Object(i.b)("p",null,"We're happy to announce that ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," released ",Object(i.b)("inlineCode",{parentName:"p"},"v0.2.0"),", which made it capable of solving not only tabular tasks, but also other general deep learning tasks!"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/carefree0910/carefree-learn"}),"GitHub")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs"}),"Document"))),Object(i.b)("h2",{id:"introduction"},"Introduction"),Object(i.b)("p",null,"Deep Learning with ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://pytorch.org/"}),"PyTorch")," made easy \ud83d\ude80!"),Object(i.b)("p",null,"Like many similar projects, ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," can be treated as a high-level library to help with training neural networks in PyTorch. However, ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," does more than that."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"carefree-learn")," is ",Object(i.b)("strong",{parentName:"li"},"highly customizable")," for developers. We have already wrapped (almost) every single functionality / process into a single module (a Python class), and they can be replaced or enhanced either directly from source codes or from local codes with the help of some pre-defined functions provided by ",Object(i.b)("inlineCode",{parentName:"li"},"carefree-learn")," (see ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/design-principles#register-mechanism"}),"Register Mechanism"),")."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"carefree-learn")," supports easy-to-use saving and loading. By default, everything will be wrapped into a ",Object(i.b)("inlineCode",{parentName:"li"},".zip")," file, and ",Object(i.b)("inlineCode",{parentName:"li"},"onnx")," format is natively supported!"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"carefree-learn")," supports Distributed Training.")),Object(i.b)("p",null,"Apart from these, ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," also has quite a few specific advantages in each area:"),Object(i.b)("h3",{id:"machine-learning-"},"Machine Learning \ud83d\udcc8"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"carefree-learn")," provides an end-to-end pipeline for tabular tasks, including ",Object(i.b)("strong",{parentName:"li"},"AUTOMATICALLY")," deal with (this part is mainly handled by ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/carefree0910/carefree-data"}),Object(i.b)("inlineCode",{parentName:"a"},"carefree-data")),", though):",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Detection of redundant feature columns which can be excluded (all SAME, all DIFFERENT, etc)."),Object(i.b)("li",{parentName:"ul"},"Detection of feature columns types (whether a feature column is string column / numerical column / categorical column)."),Object(i.b)("li",{parentName:"ul"},"Imputation of missing values."),Object(i.b)("li",{parentName:"ul"},"Encoding of string columns and categorical columns (Embedding or One Hot Encoding)."),Object(i.b)("li",{parentName:"ul"},"Pre-processing of numerical columns (Normalize, Min Max, etc.)."),Object(i.b)("li",{parentName:"ul"},"And much more..."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"carefree-learn")," can help you deal with almost ",Object(i.b)("strong",{parentName:"li"},"ANY")," kind of tabular datasets, no matter how ",Object(i.b)("em",{parentName:"li"},"dirty")," and ",Object(i.b)("em",{parentName:"li"},"messy")," it is. It can be either trained directly with some numpy arrays, or trained indirectly with some files locate on your machine. This makes ",Object(i.b)("inlineCode",{parentName:"li"},"carefree-learn")," stand out from similar projects.")),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"From the discriptions above, you might notice that ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," is more of a minimal ",Object(i.b)("strong",{parentName:"p"},"Automatic Machine Learning")," (AutoML) solution than a pure Machine Learning package."))),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"When we say ",Object(i.b)("strong",{parentName:"p"},"ANY"),", it means that ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," can even train on one single sample."),Object(i.b)("details",null,Object(i.b)("summary",null,Object(i.b)("b",null,"For example")),Object(i.b)("p",null,Object(i.b)("pre",{parentName:"div"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\ntoy = cflearn.ml.make_toy_model()\ndata = toy.data.cf_data.converted\nprint(f"x={data.x}, y={data.y}")  # x=[[0.]], y=[[1.]]\n')))),Object(i.b)("br",null),Object(i.b)("p",{parentName:"div"},"This is especially useful when we need to do unittests or to verify whether our custom modules (e.g. custom pre-processes) are correctly integrated into ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn"),"."),Object(i.b)("details",null,Object(i.b)("summary",null,Object(i.b)("b",null,"For example")),Object(i.b)("p",null,Object(i.b)("pre",{parentName:"div"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python",metastring:"{19,22}","{19,22}":!0}),'import cflearn\nimport numpy as np\n\n# here we implement a custom processor\n@cflearn.register_processor("plus_one")\nclass PlusOne(cflearn.Processor):\n    @property\n    def input_dim(self) -> int:\n        return 1\n\n    @property\n    def output_dim(self) -> int:\n        return 1\n\n    def fit(self, columns: np.ndarray) -> cflearn.Processor:\n        return self\n\n    def _process(self, columns: np.ndarray) -> np.ndarray:\n        return columns + 1\n\n    def _recover(self, processed_columns: np.ndarray) -> np.ndarray:\n        return processed_columns - 1\n\n# we need to specify that we use the custom process method to process our labels\ntoy = cflearn.ml.make_toy_model(cf_data_config={"label_process_method": "plus_one"})\ndata = toy.data.cf_data\ny = data.converted.y\nprocessed_y = data.processed.y\nprint(f"y={y}, new_y={processed_y}")  # y=[[1.]], new_y=[[2.]]\n')))))),Object(i.b)("p",null,"There is one more thing we'd like to mention: ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," is ",Object(i.b)("em",{parentName:"p"},Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"https://pandas.pydata.org/"}),"Pandas"),"-free"),". The reasons why we excluded ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://pandas.pydata.org/"}),"Pandas")," are listed in ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-data"}),Object(i.b)("inlineCode",{parentName:"a"},"carefree-data")),"."),Object(i.b)("h3",{id:"computer-vision-\ufe0f"},"Computer Vision \ud83d\uddbc\ufe0f"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," also provides an end-to-end pipeline for computer vision tasks, and:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Supports native ",Object(i.b)("inlineCode",{parentName:"p"},"torchvision")," datasets."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'data = cflearn.cv.MNISTData(transform="to_tensor")\n')),Object(i.b)("blockquote",{parentName:"li"},Object(i.b)("p",{parentName:"blockquote"},"Currently only ",Object(i.b)("inlineCode",{parentName:"p"},"mnist")," is supported, but will add more in the future (if needed) !"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Focuses on the ",Object(i.b)("inlineCode",{parentName:"p"},"ImageFolderDataset")," for customization, which:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Automatically splits the dataset into train & valid."),Object(i.b)("li",{parentName:"ul"},"Supports generating labels in parallel, which is very useful when calculating labels is time consuming.")),Object(i.b)("p",{parentName:"li"},"See ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/user-guides/computer-vision"}),Object(i.b)("strong",{parentName:"a"},"IFD")," introduction")," for more details.")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," supports various kinds of ",Object(i.b)("inlineCode",{parentName:"p"},"Callback"),"s, which can be used for saving intermediate visualizations / results."),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"For instance, ",Object(i.b)("inlineCode",{parentName:"li"},"carefree-learn")," implements an ",Object(i.b)("inlineCode",{parentName:"li"},"ArtifactCallback"),", which can dump artifacts to disk elaborately during training.")))),Object(i.b)("h2",{id:"examples"},"Examples"),Object(i.b)(c.a,{defaultValue:"ml",values:[{label:"Machine Learning \ud83d\udcc8",value:"ml"},{label:"Computer Vision \ud83d\uddbc\ufe0f",value:"cv"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"ml",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import cflearn\nimport numpy as np\n\nx = np.random.random([1000, 10])\ny = np.random.random([1000, 1])\nm = cflearn.api.fit_ml(x, y, carefree=True)\n"))),Object(i.b)(l.a,{value:"cv",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\ndata = cflearn.cv.MNISTData(batch_size=16, transform="to_tensor")\nm = cflearn.api.resnet18_gray(10).fit(data)\n')))),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Please refer to ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/getting-started/quick-start"}),"Quick Start")," and ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/developer-guides/general-customization"}),"Developer Guides")," for detailed information."))),Object(i.b)("h2",{id:"migration-guide"},"Migration Guide"),Object(i.b)("p",null,"From ",Object(i.b)("inlineCode",{parentName:"p"},"0.1.x")," to ",Object(i.b)("inlineCode",{parentName:"p"},"v0.2.x"),", the design principle of ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," changed in two aspects:"),Object(i.b)("p",null,Object(i.b)("a",{target:"_blank",href:t(186).default}," ",Object(i.b)("img",{alt:"Framework",src:t(187).default})," "),"\n",Object(i.b)("em",{parentName:"p"},"Framework change of carefree-learn (click to zoom in)")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"DataLayer")," in ",Object(i.b)("inlineCode",{parentName:"li"},"v0.1.x")," has changed to the more general ",Object(i.b)("inlineCode",{parentName:"li"},"DataModule")," in ",Object(i.b)("inlineCode",{parentName:"li"},"v0.2.x"),"."),Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"Model")," in ",Object(i.b)("inlineCode",{parentName:"li"},"v0.1.x"),", which is constructed by ",Object(i.b)("inlineCode",{parentName:"li"},"pipe"),"s, has changed to general ",Object(i.b)("inlineCode",{parentName:"li"},"Model"),".")),Object(i.b)("p",null,"These changes are made because we want to make ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," compatible with general deep learning tasks (e.g. computer vision tasks)."),Object(i.b)("h3",{id:"data-module"},"Data Module"),Object(i.b)("p",null,"Internally, the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/design-principles#pipeline"}),Object(i.b)("inlineCode",{parentName:"a"},"Pipeline"))," will train & predict on ",Object(i.b)("inlineCode",{parentName:"p"},"DataModule")," in ",Object(i.b)("inlineCode",{parentName:"p"},"v0.2.x"),", but ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," also provided useful APIs to make user experiences as identical to ",Object(i.b)("inlineCode",{parentName:"p"},"v0.1.x")," as possible:"),Object(i.b)("h4",{id:"train"},"Train"),Object(i.b)(c.a,{defaultValue:"1",values:[{label:"v0.1.x",value:"1"},{label:"v0.2.x",value:"2"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"1",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import cflearn\nimport numpy as np\n\nx = np.random.random([1000, 10])\ny = np.random.random([1000, 1])\nm = cflearn.make().fit(x, y)\n"))),Object(i.b)(l.a,{value:"2",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import cflearn\nimport numpy as np\n\nx = np.random.random([1000, 10])\ny = np.random.random([1000, 1])\nm = cflearn.api.fit_ml(x, y, carefree=True)\n")))),Object(i.b)("h4",{id:"predict"},"Predict"),Object(i.b)(c.a,{defaultValue:"1",values:[{label:"v0.1.x",value:"1"},{label:"v0.2.x",value:"2"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"1",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"predictions = m.predict(x)\n"))),Object(i.b)(l.a,{value:"2",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"predictions = m.predict(cflearn.MLInferenceData(x))\n")))),Object(i.b)("h4",{id:"evaluate"},"Evaluate"),Object(i.b)(c.a,{defaultValue:"1",values:[{label:"v0.1.x",value:"1"},{label:"v0.2.x",value:"2"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"1",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'cflearn.evaluate(x, y, metrics=["mae", "mse"], pipelines=m)\n'))),Object(i.b)(l.a,{value:"2",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'cflearn.ml.evaluate(cflearn.MLInferenceData(x, y), metrics=["mae", "mse"], pipelines=m)\n')))),Object(i.b)("h3",{id:"model"},"Model"),Object(i.b)("p",null,"It's not very straight forward to migrate models from ",Object(i.b)("inlineCode",{parentName:"p"},"v0.1.x")," to ",Object(i.b)("inlineCode",{parentName:"p"},"v0.2.x"),", so if you require such migration, feel free to submit an issue and we will analyze the problems case by case!"),Object(i.b)("h2",{id:""}))}m.isMDXComponent=!0},109:function(e,a,t){"use strict";t.d(a,"a",(function(){return p})),t.d(a,"b",(function(){return u}));var n=t(0),r=t.n(n);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function c(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?c(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var b=r.a.createContext({}),s=function(e){var a=r.a.useContext(b),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=s(e.components);return r.a.createElement(b.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},d=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,b=o(e,["components","mdxType","originalType","parentName"]),p=s(t),d=n,u=p["".concat(c,".").concat(d)]||p[d]||m[d]||i;return t?r.a.createElement(u,l(l({ref:a},b),{},{components:t})):r.a.createElement(u,l({ref:a},b))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,c=new Array(i);c[0]=d;var l={};for(var o in a)hasOwnProperty.call(a,o)&&(l[o]=a[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,c[1]=l;for(var b=2;b<i;b++)c[b]=t[b];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},110:function(e,a,t){"use strict";function n(e){var a,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(a=0;a<e.length;a++)e[a]&&(t=n(e[a]))&&(r&&(r+=" "),r+=t);else for(a in e)e[a]&&(r&&(r+=" "),r+=a);return r}a.a=function(){for(var e,a,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(a=n(e))&&(r&&(r+=" "),r+=a);return r}},112:function(e,a,t){"use strict";var n=t(0),r=t(113);a.a=function(){var e=Object(n.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},113:function(e,a,t){"use strict";var n=t(0),r=Object(n.createContext)(void 0);a.a=r},116:function(e,a,t){"use strict";var n=t(0),r=t.n(n),i=t(112),c=t(110),l=t(52),o=t.n(l),b=37,s=39;a.a=function(e){var a=e.lazy,t=e.block,l=e.children,p=e.defaultValue,m=e.values,d=e.groupId,u=e.className,f=Object(i.a)(),O=f.tabGroupChoices,j=f.setTabGroupChoices,h=Object(n.useState)(p),g=h[0],v=h[1];if(null!=d){var N=O[d];null!=N&&N!==g&&m.some((function(e){return e.value===N}))&&v(N)}var y=function(e){v(e),null!=d&&j(d,e)},w=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":t},u)},m.map((function(e){var a=e.value,t=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===a,className:Object(c.a)("tabs__item",o.a.tabItem,{"tabs__item--active":g===a}),key:a,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,a,t){switch(t.keyCode){case s:!function(e,a){var t=e.indexOf(a)+1;e[t]?e[t].focus():e[0].focus()}(e,a);break;case b:!function(e,a){var t=e.indexOf(a)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,a)}}(w,e.target,e)},onFocus:function(){return y(a)},onClick:function(){y(a)}},t)}))),a?Object(n.cloneElement)(l.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},l.map((function(e,a){return Object(n.cloneElement)(e,{key:a,hidden:e.props.value!==g})}))))}},117:function(e,a,t){"use strict";var n=t(3),r=t(0),i=t.n(r);a.a=function(e){var a=e.children,t=e.hidden,r=e.className;return i.a.createElement("div",Object(n.a)({role:"tabpanel"},{hidden:t,className:r}),a)}},186:function(e,a,t){"use strict";t.r(a),a.default=t.p+"assets/files/framework_change-ee0a5bd9daef8343f6b90bff46d6169a.png"},187:function(e,a,t){"use strict";t.r(a),a.default=t.p+"assets/images/framework_change-ee0a5bd9daef8343f6b90bff46d6169a.png"}}]);