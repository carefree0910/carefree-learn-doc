(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{105:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),b=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=b(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(n),u=a,m=p["".concat(c,".").concat(u)]||p[u]||d[u]||r;return n?i.a.createElement(m,o(o({ref:t},s),{},{components:n})):i.a.createElement(m,o({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,c=new Array(r);c[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var s=2;s<r;s++)c[s]=n[s];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},92:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(3),i=n(7),r=(n(0),n(105)),c={id:"examples",title:"Examples"},o={unversionedId:"user-guides/examples",id:"user-guides/examples",isDocsHomePage:!1,title:"Examples",description:"In this page we'll introduce how to utilize carefree-learn in some real life tasks.",source:"@site/docs/user-guides/examples.md",slug:"/user-guides/examples",permalink:"/carefree-learn-doc/docs/user-guides/examples",version:"current",lastUpdatedAt:1605876656,sidebar:"docs",previous:{title:"Distributed",permalink:"/carefree-learn-doc/docs/user-guides/distributed"},next:{title:"Build Your Own Models",permalink:"/carefree-learn-doc/docs/developer-guides/build-your-own-models"}},l=[{value:"Titanic",id:"titanic",children:[{value:"Configurations",id:"configurations",children:[]},{value:"Build Your Model",id:"build-your-model",children:[]},{value:"Evaluate Your Model",id:"evaluate-your-model",children:[]},{value:"Making Predictions",id:"making-predictions",children:[]},{value:"Submit Your Results",id:"submit-your-results",children:[]},{value:"Improve Your Results",id:"improve-your-results",children:[]},{value:"Conclusions",id:"conclusions",children:[]}]}],s={rightToc:l};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"In this page we'll introduce how to utilize ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," in some real life tasks."),Object(r.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This page is a work in progress."))),Object(r.b)("h2",{id:"titanic"},"Titanic"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"Python source code"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"Jupyter Notebook"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"https://github.com/carefree0910/carefree-learn/blob/dev/examples/titanic/titanic.py"}),"titanic.py")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"https://github.com/carefree0910/carefree-learn/blob/dev/examples/titanic/titanic.ipynb"}),"titanic.ipynb"))))),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Titanic")," is a famous playground competition hosted by Kaggle (",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.kaggle.com/c/titanic"}),"here"),"), so I'll simply copy-paste its brief description here:"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"This is the legendary Titanic ML competition \u2013 the best, first challenge for you to dive into ML competitions and familiarize yourself with how the Kaggle platform works."),Object(r.b)("p",{parentName:"blockquote"},"The competition is simple: use machine learning to create a model that predicts which passengers survived the Titanic shipwreck.")),Object(r.b)("p",null,"Here are the frist few rows of the ",Object(r.b)("inlineCode",{parentName:"p"},"train.csv")," of ",Object(r.b)("inlineCode",{parentName:"p"},"Titanic"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csv"}),'PassengerId,Survived,Pclass,Name,Sex,Age,SibSp,Parch,Ticket,Fare,Cabin,Embarked\n1,0,3,"Braund, Mr. Owen Harris",male,22,1,0,A/5 21171,7.25,,S\n2,1,1,"Cumings, Mrs. John Bradley (Florence Briggs Thayer)",female,38,1,0,PC 17599,71.2833,C85,C\n3,1,3,"Heikkinen, Miss. Laina",female,26,0,0,STON/O2. 3101282,7.925,,S\n')),Object(r.b)("p",null,"And the first few rows of the ",Object(r.b)("inlineCode",{parentName:"p"},"test.csv"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csv"}),'PassengerId,Pclass,Name,Sex,Age,SibSp,Parch,Ticket,Fare,Cabin,Embarked\n892,3,"Kelly, Mr. James",male,34.5,0,0,330911,7.8292,,Q\n893,3,"Wilkes, Mrs. James (Ellen Needs)",female,47,1,0,363272,7,,S\n894,2,"Myles, Mr. Thomas Francis",male,62,0,0,240276,9.6875,,Q\n')),Object(r.b)("p",null,"What we need to do is to predict the ",Object(r.b)("inlineCode",{parentName:"p"},"Survived")," column in ",Object(r.b)("inlineCode",{parentName:"p"},"test.csv"),"."),Object(r.b)("h3",{id:"configurations"},"Configurations"),Object(r.b)("p",null,"Since the target column is not the last column (which is the default setting of ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn"),"), we need to manually configure it:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'data_config = {"label_name": "Survived"}\n')),Object(r.b)("p",null,"And you're all set! Notice that only the ",Object(r.b)("inlineCode",{parentName:"p"},"label_name")," needs to be provided, and ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," will find out the corresponding target column for you\ud83d\ude09"),Object(r.b)("h3",{id:"build-your-model"},"Build Your Model"),Object(r.b)("p",null,"For instance, we'll use the famous ",Object(r.b)("inlineCode",{parentName:"p"},"Wide & Deep")," model:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\nm = cflearn.make("wnd", data_config=data_config)\n')),Object(r.b)("p",null,"Unlike other libraries, ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," supports ",Object(r.b)("em",{parentName:"p"},"file-in"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'m.fit("train.csv")\n')),Object(r.b)("h3",{id:"evaluate-your-model"},"Evaluate Your Model"),Object(r.b)("p",null,"After building the model, we can directly evaluate our model with a file (",Object(r.b)("em",{parentName:"p"},"file-out"),"):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'# `contains_labels` is set to True because we\'re evaluating on training set\ncflearn.evaluate("train.csv", pipelines=m, contains_labels=True)\n')),Object(r.b)("p",null,"Then you will see something like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"~~  [ info ] Results\n================================================================================================================================\n|        metrics         |                       acc                        |                       auc                        |\n--------------------------------------------------------------------------------------------------------------------------------\n|                        |      mean      |      std       |     score      |      mean      |      std       |     score      |\n--------------------------------------------------------------------------------------------------------------------------------\n|          wnd           |    0.860831    |    0.000000    |    0.860831    |    0.915396    |    0.000000    |    0.915396    |\n================================================================================================================================\n")),Object(r.b)("p",null,"Our model achieved an accuracy of ",Object(r.b)("inlineCode",{parentName:"p"},"0.860831"),", not bad!"),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Note that this performance may vary and is not exactly the ",Object(r.b)("em",{parentName:"p"},"training")," performance, because ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," will automatically split out the cross validation dataset for you. Please refer to ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../getting-started/configurations#cv_split"}),"cv_split")," for more details."))),Object(r.b)("h3",{id:"making-predictions"},"Making Predictions"),Object(r.b)("p",null,"Again, we can directly make predictions with a file (",Object(r.b)("em",{parentName:"p"},"file-out"),"):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'# `contains_labels` is set to False because `test.csv` does not contain labels\n# It is OK to simply call `m.predict("test.csv")` because `contains_labels` is False by default\npredictions = m.predict("test.csv", contains_labels=False)\n')),Object(r.b)("h3",{id:"submit-your-results"},"Submit Your Results"),Object(r.b)("p",null,"If you reached here, we have actually already completed this ",Object(r.b)("inlineCode",{parentName:"p"},"Titanic")," task! All we need to do is to convert the ",Object(r.b)("inlineCode",{parentName:"p"},"predictions")," into a submission file:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'def write_submissions(name, predictions_) -> None:\n    with open("test.csv", "r") as f:\n        f.readline()\n        id_list = [line.strip().split(",")[0] for line in f]\n    with open(name, "w") as f:\n        f.write("PassengerId,Survived\\n")\n        for test_id, prediction in zip(id_list, predictions_.ravel()):\n            f.write(f"{test_id},{prediction}\\n")\n\nwrite_submissions("submissions.csv", predictions)\n')),Object(r.b)("p",null,"After running these codes, a ",Object(r.b)("inlineCode",{parentName:"p"},"submissions.csv")," will be generated and you can submit it to Kaggle directly! In my personal experience, it could achieve from 0.71 to 0.76."),Object(r.b)("h3",{id:"improve-your-results"},"Improve Your Results"),Object(r.b)("p",null,"Although the whole process is ",Object(r.b)("em",{parentName:"p"},"carefree")," enough, the final score is not yet satisfied. One way to improve the result is to try different models:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'m = cflearn.make("tree_linear", data_config=data_config).fit("train.csv")\npredictions = m.predict("test.csv", contains_labels=False)\nwrite_submissions("submissions_tree_linear.csv", predictions)\n')),Object(r.b)("p",null,"After submitting ",Object(r.b)("inlineCode",{parentName:"p"},"submissions_tree_linear.csv"),", we could achieve ~0.775 (and even up to 0.79) now, cool!"),Object(r.b)("h3",{id:"conclusions"},"Conclusions"),Object(r.b)("p",null,"Since ",Object(r.b)("inlineCode",{parentName:"p"},"Titanic")," is just a small toy datasets, using Neural Network to solve it might actually 'over-killed' (or, overfit) it, and that's why we decided to conclude here instead of introducing more fancy techniques (e.g. ensemble, AutoML, etc.). We hope that this small example can help you quickly walk through some basic concepts in ",Object(r.b)("inlineCode",{parentName:"p"},"carefre-learn"),", as well as help you leverage ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," in your own tasks!"))}b.isMDXComponent=!0}}]);