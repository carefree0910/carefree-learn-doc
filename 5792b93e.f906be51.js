(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{105:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),b=a,m=u["".concat(i,".").concat(b)]||u[b]||d[b]||o;return n?r.a.createElement(m,c(c({ref:t},s),{},{components:n})):r.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),o=(n(0),n(105)),i={id:"auto-ml",title:"AutoML"},c={unversionedId:"user-guides/auto-ml",id:"user-guides/auto-ml",isDocsHomePage:!1,title:"AutoML",description:"carefree-learn provides cflearn.Auto API for out-of-the-box usages.",source:"@site/docs/user-guides/auto-ml.md",slug:"/user-guides/auto-ml",permalink:"/carefree-learn-doc/docs/user-guides/auto-ml",version:"current",lastUpdatedAt:1606063479,sidebar:"docs",previous:{title:"Configurations",permalink:"/carefree-learn-doc/docs/getting-started/configurations"},next:{title:"Distributed",permalink:"/carefree-learn-doc/docs/user-guides/distributed"}},l=[{value:"Explained",id:"explained",children:[]},{value:"Production",id:"production",children:[]}],s={rightToc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"carefree-learn")," provides ",Object(o.b)("inlineCode",{parentName:"p"},"cflearn.Auto")," API for out-of-the-box usages."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\nfrom cfdata.tabular import *\n\n# prepare iris dataset\niris = TabularDataset.iris()\niris = TabularData.from_dataset(iris)\n# split 10% of the data as validation data\nsplit = iris.split(0.1)\ntrain, valid = split.remained, split.split\nx_tr, y_tr = train.processed.xy\nx_cv, y_cv = valid.processed.xy\ndata = x_tr, y_tr, x_cv, y_cv\n\n\nif __name__ == \'__main__\':\n    # standard usage\n    fcnn = cflearn.make().fit(*data)\n\n    # \'overfit\' validation set\n    # * `clf` indicates this is a classification task\n    # * for regression tasks, use `reg` instead\n    auto = cflearn.Auto("clf").fit(*data, num_jobs=2)\n\n    # evaluate manually\n    predictions = auto.predict(x_cv)\n    print("accuracy:", (y_cv == predictions).mean())\n\n    # evaluate with `cflearn`\n    cflearn.evaluate(\n        x_cv,\n        y_cv,\n        pipelines=fcnn,\n        other_patterns={"auto": auto.pattern},\n    )\n')),Object(o.b)("p",null,"Then you will see something like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"================================================================================================================================\n|        metrics         |                       acc                        |                       auc                        |\n--------------------------------------------------------------------------------------------------------------------------------\n|                        |      mean      |      std       |     score      |      mean      |      std       |     score      |\n--------------------------------------------------------------------------------------------------------------------------------\n|          auto          | -- 1.000000 -- | -- 0.000000 -- | -- 1.000000 -- | -- 1.000000 -- | -- 0.000000 -- | -- 1.000000 -- |\n--------------------------------------------------------------------------------------------------------------------------------\n|          fcnn          |    0.933333    | -- 0.000000 -- |    0.933333    |    0.993333    | -- 0.000000 -- |    0.993333    |\n================================================================================================================================\n")),Object(o.b)("h2",{id:"explained"},"Explained"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"cflearn.Auto.fit")," will run through the following steps:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"define the model space automatically (or manually)"),Object(o.b)("li",{parentName:"ol"},"fetch pre-defined hyper-parameters search space of each model from ",Object(o.b)("inlineCode",{parentName:"li"},"OptunaPresetParams"),"."),Object(o.b)("li",{parentName:"ol"},"leverage ",Object(o.b)("inlineCode",{parentName:"li"},"optuna")," with ",Object(o.b)("inlineCode",{parentName:"li"},"cflearn.optuna_tune")," to perform hyper-parameters optimization."),Object(o.b)("li",{parentName:"ol"},"use searched hyper-parameters to train each model multiple times (separately)."),Object(o.b)("li",{parentName:"ol"},"ensemble all trained models (with ",Object(o.b)("inlineCode",{parentName:"li"},"cflearn.Ensemble.stacking"),")."),Object(o.b)("li",{parentName:"ol"},"record all these results to corresponding attributes.")),Object(o.b)("p",null,"So after ",Object(o.b)("inlineCode",{parentName:"p"},"cflearn.Auto.fit"),", we can perform visualizations provided by ",Object(o.b)("inlineCode",{parentName:"p"},"optuna")," easily:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'export_folder = "iris_vis"\nauto.plot_param_importances("fcnn", export_folder=export_folder)\nauto.plot_intermediate_values("fcnn", export_folder=export_folder)\n')),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"It is also worth mentioning that we can pass file datasets into ",Object(o.b)("inlineCode",{parentName:"p"},"cflearn.Auto")," as well. See ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/3fb03dbfc3e2b494f2ab03b9d8f07683fe30e7ef/tests/usages/test_basic.py#L221"}),"test_auto_file")," for more details."))),Object(o.b)("h2",{id:"production"},"Production"),Object(o.b)("p",null,"What's facinating is that we can pack the models trained by ",Object(o.b)("inlineCode",{parentName:"p"},"cflearn.Auto")," into a zip file for production:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'auto.pack("pack")\n')),Object(o.b)("p",null,"Please refer to ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"production#automl-in-production"}),"AutoML in Production")," for more details."))}p.isMDXComponent=!0}}]);