(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{109:function(e,a,t){"use strict";t.d(a,"a",(function(){return s})),t.d(a,"b",(function(){return u}));var n=t(0),r=t.n(n);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var b=r.a.createContext({}),p=function(e){var a=r.a.useContext(b),t=a;return e&&(t="function"==typeof e?e(a):c(c({},a),e)),t},s=function(e){var a=p(e.components);return r.a.createElement(b.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},d=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,b=o(e,["components","mdxType","originalType","parentName"]),s=p(t),d=n,u=s["".concat(l,".").concat(d)]||s[d]||m[d]||i;return t?r.a.createElement(u,c(c({ref:a},b),{},{components:t})):r.a.createElement(u,c({ref:a},b))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,l=new Array(i);l[0]=d;var c={};for(var o in a)hasOwnProperty.call(a,o)&&(c[o]=a[o]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var b=2;b<i;b++)l[b]=t[b];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},85:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return l})),t.d(a,"metadata",(function(){return c})),t.d(a,"rightToc",(function(){return o})),t.d(a,"default",(function(){return p}));var n=t(3),r=t(7),i=(t(0),t(109)),l={id:"auto-ml",title:"AutoML"},c={unversionedId:"user-guides/auto-ml",id:"user-guides/auto-ml",isDocsHomePage:!1,title:"AutoML",description:"carefree-learn provides cflearn.Auto API for out-of-the-box usages.",source:"@site/docs/user-guides/auto-ml.md",slug:"/user-guides/auto-ml",permalink:"/carefree-learn-doc/docs/user-guides/auto-ml",version:"current",lastUpdatedAt:1608655451,sidebar:"docs",previous:{title:"APIs",permalink:"/carefree-learn-doc/docs/user-guides/apis"},next:{title:"Distributed",permalink:"/carefree-learn-doc/docs/user-guides/distributed"}},o=[{value:"Explained",id:"explained",children:[]},{value:"Configurations",id:"configurations",children:[{value:"Define Model Space",id:"define-model-space",children:[]},{value:"Define Search Spaces",id:"define-search-spaces",children:[]},{value:"Define Extra Configurations",id:"define-extra-configurations",children:[]}]},{value:"Production",id:"production",children:[]},{value:"<code>OptunaParam</code>",id:"optunaparam-1",children:[{value:"Examples",id:"examples",children:[]}]},{value:"<code>OptunaPresetParams</code>",id:"optunapresetparams",children:[{value:"<code>get</code>",id:"get",children:[]}]},{value:"<code>cflearn.Auto</code>",id:"cflearnauto",children:[{value:"<code>fit</code>",id:"fit",children:[]},{value:"<code>best_params</code>",id:"best_params",children:[]},{value:"<code>pack</code>",id:"pack",children:[]},{value:"<code>unpack</code>",id:"unpack",children:[]}]}],b={rightToc:o};function p(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},b,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," provides ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto")," API for out-of-the-box usages."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\nfrom cfdata.tabular import *\n\n# prepare iris dataset\niris = TabularDataset.iris()\niris = TabularData.from_dataset(iris)\n# split 10% of the data as validation data\nsplit = iris.split(0.1)\ntrain, valid = split.remained, split.split\nx_tr, y_tr = train.processed.xy\nx_cv, y_cv = valid.processed.xy\ndata = x_tr, y_tr, x_cv, y_cv\n\n\nif __name__ == \'__main__\':\n    # standard usage\n    fcnn = cflearn.make().fit(*data)\n\n    # \'overfit\' validation set\n    # * `clf` indicates this is a classification task\n    # * for regression tasks, use `reg` instead\n    auto = cflearn.Auto("clf").fit(*data, num_jobs=2)\n\n    # evaluate manually\n    predictions = auto.predict(x_cv)\n    print("accuracy:", (y_cv == predictions).mean())\n\n    # evaluate with `cflearn`\n    cflearn.evaluate(\n        x_cv,\n        y_cv,\n        pipelines=fcnn,\n        other_patterns={"auto": auto.pattern},\n    )\n')),Object(i.b)("p",null,"Which yields"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"================================================================================================================================\n|        metrics         |                       acc                        |                       auc                        |\n--------------------------------------------------------------------------------------------------------------------------------\n|                        |      mean      |      std       |     score      |      mean      |      std       |     score      |\n--------------------------------------------------------------------------------------------------------------------------------\n|          auto          | -- 1.000000 -- | -- 0.000000 -- | -- 1.000000 -- | -- 1.000000 -- | -- 0.000000 -- | -- 1.000000 -- |\n--------------------------------------------------------------------------------------------------------------------------------\n|          fcnn          |    0.933333    | -- 0.000000 -- |    0.933333    |    0.993333    | -- 0.000000 -- |    0.993333    |\n================================================================================================================================\n")),Object(i.b)("h2",{id:"explained"},"Explained"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto.fit")," will run through the following steps:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"define the model space automatically (or manually; see ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#define-model-space"}),"Define Model Space")," for more details)."),Object(i.b)("li",{parentName:"ol"},"fetch hyperparameters search spaces automatically (or manually; see ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#define-search-spaces"}),"Define Search Spaces")," for more details) for each model with the help of ",Object(i.b)("inlineCode",{parentName:"li"},"OptunaPresetParams")," (and inject manual configurations, if provided; see ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#define-extra-configurations"}),"Define Extra Configurations")," for more details)."),Object(i.b)("li",{parentName:"ol"},"leverage ",Object(i.b)("inlineCode",{parentName:"li"},"optuna")," with ",Object(i.b)("inlineCode",{parentName:"li"},"cflearn.optuna_tune")," to perform hyperparameters optimization."),Object(i.b)("li",{parentName:"ol"},"use searched hyperparameters to train each model multiple times (separately)."),Object(i.b)("li",{parentName:"ol"},"ensemble all trained models (with ",Object(i.b)("inlineCode",{parentName:"li"},"cflearn.Ensemble.stacking"),")."),Object(i.b)("li",{parentName:"ol"},"record all these results to corresponding attributes.")),Object(i.b)("p",null,"So after ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto.fit"),", we can perform visualizations provided by ",Object(i.b)("inlineCode",{parentName:"p"},"optuna")," easily:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'export_folder = "iris_vis"\nauto.plot_param_importances("fcnn", export_folder=export_folder)\nauto.plot_intermediate_values("fcnn", export_folder=export_folder)\n')),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"It is also worth mentioning that we can pass file datasets into ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto")," as well. See ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/3fb03dbfc3e2b494f2ab03b9d8f07683fe30e7ef/tests/usages/test_basic.py#L221"}),"test_auto_file")," for more details."))),Object(i.b)("h2",{id:"configurations"},"Configurations"),Object(i.b)("p",null,"Although ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto")," could achieve acceptable performances, we can manually adjust its behaviour for even better ones as well."),Object(i.b)("h3",{id:"define-model-space"},"Define Model Space"),Object(i.b)("p",null,"Model space could be defined by specifying the ",Object(i.b)("inlineCode",{parentName:"p"},"models")," in ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'auto = cflearn.Auto(..., models="fcnn")\n')),Object(i.b)("p",null,"or"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'auto = cflearn.Auto(..., models=["linear", "fcnn"])\n')),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"By default, ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto")," will use a large model space and hope for the best:"),Object(i.b)("pre",{parentName:"div"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'if models == "auto":\n    models = ["linear", "fcnn", "tree_dnn"]\n    parsed_task_type = parse_task_type(task_type)\n    # time series tasks\n    if parsed_task_type.is_ts:\n        models += ["rnn", "transformer"]\n    # classification tasks\n    elif parsed_task_type.is_clf:\n        models += ["nnb", "ndt"]\n    # regression tasks\n    else:\n        models.append("ddr")\n')),Object(i.b)("p",{parentName:"div"},"We recommend to use ",Object(i.b)("inlineCode",{parentName:"p"},'models="fcnn"')," before actually dive into this bunch of models \ud83e\udd23"))),Object(i.b)("h3",{id:"define-search-spaces"},"Define Search Spaces"),Object(i.b)("p",null,"Search spaces could be defined by specifying the ",Object(i.b)("inlineCode",{parentName:"p"},"params")," in ",Object(i.b)("inlineCode",{parentName:"p"},"fit"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"auto.fit(..., params={...})\n")),Object(i.b)("p",null,"However customizing ",Object(i.b)("inlineCode",{parentName:"p"},"params")," requires some more steps, and we'll illustrate how to do so in the following sub-sections."),Object(i.b)("h4",{id:"optunaparam"},Object(i.b)("inlineCode",{parentName:"h4"},"OptunaParam")),Object(i.b)("p",null,"As shown in the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../getting-started/configurations#make"}),Object(i.b)("inlineCode",{parentName:"a"},"make"))," API, we can specify configurations through ",Object(i.b)("inlineCode",{parentName:"p"},"kwargs"),". Customizing ",Object(i.b)("inlineCode",{parentName:"p"},"params")," is actually no more than customizing this ",Object(i.b)("inlineCode",{parentName:"p"},"kwargs"),", except it should turn the target hyperparameter from a specific value to an ",Object(i.b)("inlineCode",{parentName:"p"},"OptunaParam"),"."),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("ul",{parentName:"div"},Object(i.b)("li",{parentName:"ul"},"If you are more interested in codes than a step by step tutorial, you can jump to the ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#in-a-nut-shell"}),"In a Nut Shell")," section directly."),Object(i.b)("li",{parentName:"ul"},"If you are more interested in the API documentations, you can jump to the ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#apis"}),"APIs")," section directly.")))),Object(i.b)("p",null,"For example, if we want to use ",Object(i.b)("inlineCode",{parentName:"p"},"sgd")," instead of the default ",Object(i.b)("inlineCode",{parentName:"p"},"adamw"),", we can simply"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\nfrom cfdata.tabular import TabularDataset\n\n# We\'ll use the famous iris dataset\nx, y = TabularDataset.iris().xy\nm = cflearn.make(optimizer="sgd").fit(x, y)\nprint(m.trainer.optimizers["all"])  # SGD(...)\n')),Object(i.b)("p",null,"but we are not sure which one is better, and here's where AutoML could help. Since we should choose from either ",Object(i.b)("inlineCode",{parentName:"p"},"sgd")," or ",Object(i.b)("inlineCode",{parentName:"p"},"adamw"),", the search space is pretty simple:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'optimizer_param = cflearn.OptunaParam(\n    "opt",             # this should be the unique identifier of this search space\n    ["sgd", "adamw"],  # here are the parameters of this search space\n    "categorical",     # this is the type of this search space\n)\nparams = {\n    # since different model may require different search space\n    # we should specify which model does this search space belong to\n    # * the "optimizer" argument here should correspond to the one in `make`\n    "linear": {"optimizer": optimizer_param},\n}\n')),Object(i.b)("p",null,"After which we can perform AutoML on this search space:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# notice that we\'ve constraint the model space to `linear`\n# because we\'ve only defined the search space for `linear`\nauto = cflearn.Auto("clf", models="linear").fit(x, y, params=params)\n')),Object(i.b)("p",null,"Which yields"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"[I 2020-12-22 19:45:13,597] A new study created in memory with name: linear_optuna\n[I 2020-12-22 19:45:14,461] Trial 0 finished with value: 0.401367224752903 and parameters: {'opt': 'adamw'}. Best is trial 0 with value: 0.401367224752903.\n[I 2020-12-22 19:45:15,222] Trial 1 finished with value: 0.37729840725660324 and parameters: {'opt': 'sgd'}. Best is trial 0 with value: 0.401367224752903.\n[I 2020-12-22 19:45:16,028] Trial 2 finished with value: 0.6434845961630344 and parameters: {'opt': 'adamw'}. Best is trial 2 with value: 0.6434845961630344.\n[I 2020-12-22 19:45:16,818] Trial 3 finished with value: 0.14388968795537949 and parameters: {'opt': 'adamw'}. Best is trial 2 with value: 0.6434845961630344.\n......\n")),Object(i.b)("p",null,"As shown above, ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://optuna.org/"}),Object(i.b)("inlineCode",{parentName:"a"},"optuna"))," will try to search the best hyperparameters with the defined search space for us. Since our search space only contains two possible choices (",Object(i.b)("inlineCode",{parentName:"p"},"{'opt': 'sgd'}")," and ",Object(i.b)("inlineCode",{parentName:"p"},"{'opt': 'adamw'}"),"), ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://optuna.org/"}),Object(i.b)("inlineCode",{parentName:"a"},"optuna"))," will jump between these two choices over and over again."),Object(i.b)("p",null,"After the searching we can obtain the searched optimizer via ",Object(i.b)("inlineCode",{parentName:"p"},"best_params"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'print(auto.best_params["linear"]["optimizer"])  # adamw\n')),Object(i.b)("p",null,"Great! Now we know that ",Object(i.b)("inlineCode",{parentName:"p"},"adamw")," may be better than ",Object(i.b)("inlineCode",{parentName:"p"},"sgd"),". But soon we'll encounter another issue: what learning rate (",Object(i.b)("inlineCode",{parentName:"p"},"lr"),") should we use? Since the default ",Object(i.b)("inlineCode",{parentName:"p"},"lr")," is ",Object(i.b)("inlineCode",{parentName:"p"},"1e-3"),", it's hard to tell whether ",Object(i.b)("inlineCode",{parentName:"p"},"adamw")," will always better than ",Object(i.b)("inlineCode",{parentName:"p"},"sgd"),", or it is better only if ",Object(i.b)("inlineCode",{parentName:"p"},"lr=1e-3"),". And again, here's where AutoML could help. Since ",Object(i.b)("inlineCode",{parentName:"p"},"lr")," should be searched in a logarithm way, we should define the search space as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# the parameters of this search space should define the \'floor\' and the \'ceiling\'\n# in this example, we are specifying 1e-5 <= lr <= 0.1\n# and we are using {"log": True} to indicate that we are searching in a logarithm way\nlr_param = cflearn.OptunaParam("lr", [1e-5, 0.1], "float", {"log": True})\nparams = {\n    "linear": {\n        "optimizer": optimizer_param,\n        "optimizer_config": {"lr": lr_param},\n    }\n}\n')),Object(i.b)("p",null,"After which we can perform AutoML on this search space:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'auto = cflearn.Auto("clf", models="linear").fit(x, y, params=params)\n')),Object(i.b)("p",null,"Which yields"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"[I 2020-12-22 19:57:22,893] A new study created in memory with name: linear_optuna\n[I 2020-12-22 19:57:23,766] Trial 0 finished with value: 0.12851058691740036 and parameters: {'opt': 'adamw', 'lr': 0.002884297316991861}. Best is trial 0 with value: 0.12851058691740036.\n[I 2020-12-22 19:57:24,615] Trial 1 finished with value: 0.26402048021554947 and parameters: {'opt': 'adamw', 'lr': 3.506510110282046e-05}. Best is trial 1 with value: 0.26402048021554947.\n[I 2020-12-22 19:57:25,493] Trial 2 finished with value: 0.6952096559107304 and parameters: {'opt': 'adamw', 'lr': 0.01178820649139017}. Best is trial 2 with value: 0.6952096559107304.\n[I 2020-12-22 19:57:26,356] Trial 3 finished with value: 0.9276982471346855 and parameters: {'opt': 'adamw', 'lr': 0.08356996061205905}. Best is trial 3 with value: 0.9276982471346855.\n......\n")),Object(i.b)("p",null,"As shown above, this time we are searching for the best ",Object(i.b)("inlineCode",{parentName:"p"},"lr")," as well. We can futher obtain the searched optimizer and ",Object(i.b)("inlineCode",{parentName:"p"},"lr")," via ",Object(i.b)("inlineCode",{parentName:"p"},"best_params"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'print(auto.best_params["linear"]["optimizer"])               # adamw\nprint(auto.best_params["linear"]["optimizer_config"]["lr"])  # 0.09311529866070806\n')),Object(i.b)("p",null,"Great! Now we know the best hyperparameter combination for ",Object(i.b)("inlineCode",{parentName:"p"},"linear")," model on ",Object(i.b)("inlineCode",{parentName:"p"},"iris")," dataset: ",Object(i.b)("inlineCode",{parentName:"p"},"adamw")," with ",Object(i.b)("inlineCode",{parentName:"p"},"lr=0.0931"),"."),Object(i.b)("h4",{id:"in-a-nut-shell"},"In a Nut Shell"),Object(i.b)("p",null,"To recap, if we want to search for a certain hyperparameter, instead of specifying a concrete value, we need to define its search space via ",Object(i.b)("inlineCode",{parentName:"p"},"OptunaParam"),". For example:"),Object(i.b)("h5",{id:"the-optimizer-search-space"},"the ",Object(i.b)("inlineCode",{parentName:"h5"},"optimizer")," search space"),Object(i.b)("p",null,"We need to turn"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'params = {"optimizer": "sgd"}\ncflearn.make(config=params).fit(x, y)\n')),Object(i.b)("p",null,"into"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# you can change "opt" into any other (unique) identifier\noptimizer_param = cflearn.OptunaParam("opt", ["sgd", "adamw"], "categorical")\n# xxx should be your model\nparams = {"xxx": {"optimizer": optimizer_param}}\ncflearn.Auto(..., models="xxx").fit(x, y, params=params)\n')),Object(i.b)("h5",{id:"the-lr-search-space"},"the ",Object(i.b)("inlineCode",{parentName:"h5"},"lr")," search space"),Object(i.b)("p",null,"We need to turn"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'params = {"optimizer_config": {"lr": 1e-3}}\ncflearn.make(config=params).fit(x, y)\n')),Object(i.b)("p",null,"into"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# you can change "lr" into any other (unique) identifier\nlr_param = cflearn.OptunaParam("lr", [1e-5, 0.1], "float", {"log": True})\n# xxx should be your model\nparams = {"xxx": {"optimizer_config": {"lr": lr_param}}}\ncflearn.Auto(..., models="xxx").fit(x, y, params=params)\n')),Object(i.b)("h4",{id:"the-default-search-spaces"},"The Default Search Spaces"),Object(i.b)("p",null,"The default search spaces of ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," have already provided examples on how to define search spaces for some critical hyperparameters (e.g. optimizer, learning rate, etc.). To be concrete, ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," will use ",Object(i.b)("inlineCode",{parentName:"p"},"OptunaPresetParams")," to manage a set of default search spaces:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"class Auto:\n    def __init__(self, ...):\n        ...\n        self.preset_params = OptunaPresetParams(...)\n    \n    def fit(self, ...):\n        if params is not None:\n            model_params = params[model]\n        else:\n            model_params = self.preset_params.get(model)\n")),Object(i.b)("p",null,"And the definition of ",Object(i.b)("inlineCode",{parentName:"p"},"OptunaPresetParams")," is:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"class OptunaPresetParams:\n    def __init__(\n        self,\n        *,\n        tune_lr: bool = True,\n        tune_optimizer: bool = True,\n        tune_scheduler: bool = True,\n        ...,\n        **kwargs: Any,\n    ) -> None:\n        self.base_params: optuna_params_type = {}\n        if tune_lr:\n            # update base_params with learning rate search space\n            ...\n        if tune_optimizer:\n            # update base_params with optimizer search space\n            ...\n        ...\n\n    def get(self, model: str) -> optuna_params_type:\n        # Will execute self._{model}_preset() (e.g. self._fcnn_preset()) here\n        ...\n    \n    def _linear_preset(self):\n        # Will return the default search spaces for `linear` model\n        # * since `linear` model is very simple, we can return the base_params directly\n        return shallow_copy_dict(self.base_params)\n\n    def _fcnn_preset(self):\n        # Will return the default search spaces for `fcnn` model\n        ...\n")),Object(i.b)("p",null,"You can inspect the source code ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/752f4190aab49e6fa44e3926c01aeec5dc9a129a/cflearn/api/hpo.py#L774-L814"}),"here")," to see how ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," defines its default search spaces, as well as ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/752f4190aab49e6fa44e3926c01aeec5dc9a129a/cflearn/api/hpo.py#L836-L859"}),"here")," to see how ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," defines search spaces for ",Object(i.b)("inlineCode",{parentName:"p"},"fcnn"),". These two snippets should be able to cover most of the common use cases."),Object(i.b)("h3",{id:"define-extra-configurations"},"Define Extra Configurations"),Object(i.b)("p",null,"If we want to change some default behaviours of ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto"),", we can specify the ",Object(i.b)("inlineCode",{parentName:"p"},"extra_configs")," in ",Object(i.b)("inlineCode",{parentName:"p"},"fit"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"auto.fit(..., extra_config={...})\n")),Object(i.b)("p",null,"And the usage of ",Object(i.b)("inlineCode",{parentName:"p"},"extra_config")," should be equivalent to the usage of ",Object(i.b)("inlineCode",{parentName:"p"},"config")," in ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../getting-started/configurations#make"}),Object(i.b)("inlineCode",{parentName:"a"},"make"))," API."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},Object(i.b)("inlineCode",{parentName:"p"},"extra_config")," is not able to overwrite the hyperparameters generated by the search spaces, so in fact the options we can play with it are limited \ud83e\udd23"))),Object(i.b)("h2",{id:"production"},"Production"),Object(i.b)("p",null,"What's facinating is that we can pack the models trained by ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto")," into a zip file for production:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'auto.pack("pack")\n')),Object(i.b)("p",null,"Please refer to ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"production#automl-in-production"}),"AutoML in Production")," for more details."),Object(i.b)("h1",{id:"apis"},"APIs"),Object(i.b)("p",null,"In this section, we'll introduce some APIs related to ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto")," in details."),Object(i.b)("h2",{id:"optunaparam-1"},Object(i.b)("inlineCode",{parentName:"h2"},"OptunaParam")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Source code: ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/752f4190aab49e6fa44e3926c01aeec5dc9a129a/cflearn/api/hpo.py#L344"}),"hpo.py -> class OptunaParam"),".")),Object(i.b)("p",null,"General interface for defining search spaces of hyperparameters."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"class OptunaParam(NamedTuple):\n    name: str\n    values: Any\n    dtype: str  # [int | float | categorical]\n    config: Optional[Dict[str, Any]] = None\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"name")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify the ",Object(i.b)("strong",{parentName:"li"},"unique")," identifier of the current search space."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"values")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Indicate the parameters of this search space."),Object(i.b)("li",{parentName:"ul"},"If ",Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"dtype"))," is ",Object(i.b)("inlineCode",{parentName:"li"},'"int"')," or ",Object(i.b)("inlineCode",{parentName:"li"},'"float"'),", then ",Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"values"))," should represent the lower bound and upper bound of this search space."),Object(i.b)("li",{parentName:"ul"},"If ",Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"dtype"))," is ",Object(i.b)("inlineCode",{parentName:"li"},'"categorical"'),", then ",Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"values"))," should represent the possible choices of this search space."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"dtype")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Indicate the type of this search space."),Object(i.b)("li",{parentName:"ul"},"If ",Object(i.b)("inlineCode",{parentName:"li"},'"int"'),", then this search space will be finite and will only pop integer values."),Object(i.b)("li",{parentName:"ul"},"If ",Object(i.b)("inlineCode",{parentName:"li"},'"float"'),", then this search space will be infinite and will only pop float values."),Object(i.b)("li",{parentName:"ul"},"If ",Object(i.b)("inlineCode",{parentName:"li"},'"categorical"'),", then this search space will be finite and will only pop values specified by ",Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"values")),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"config"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"None"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify other configurations used in ",Object(i.b)("inlineCode",{parentName:"li"},"optuna"),"."),Object(i.b)("li",{parentName:"ul"},"There's only one common use case, namely if we need to search in a logarithm way, that we need to specify ",Object(i.b)("inlineCode",{parentName:"li"},'config={"log": True}'),".")))),Object(i.b)("h3",{id:"examples"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\nfrom cfdata.tabular import TabularDataset\n\nx, y = TabularDataset.iris().xy\nlr_param = cflearn.OptunaParam("lr", [1e-5, 0.1], "float", {"log": True})\nparams = {"linear": {"optimizer_config": {"lr": lr_param}}}\nauto = cflearn.Auto("clf", models="linear").fit(x, y, params=params)\n')),Object(i.b)("h2",{id:"optunapresetparams"},Object(i.b)("inlineCode",{parentName:"h2"},"OptunaPresetParams")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Source code: ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/752f4190aab49e6fa44e3926c01aeec5dc9a129a/cflearn/api/hpo.py#L760"}),"hpo.py -> class OptunaPresetParams"),".")),Object(i.b)("p",null,"Structure for defining default search spaces of each model."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"class OptunaPresetParams:\n    def __init__(\n        self,\n        *,\n        tune_lr: bool = True,\n        tune_optimizer: bool = True,\n        tune_scheduler: bool = True,\n        tune_ema_decay: bool = True,\n        tune_clip_norm: bool = True,\n        tune_batch_size: bool = True,\n        tune_init_method: bool = True,\n        **kwargs: Any,\n    ):\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"tune_lr"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"True"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify whether we should include the search space of ",Object(i.b)("inlineCode",{parentName:"li"},"lr"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"tune_optimizer"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"True"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify whether we should include the search space of ",Object(i.b)("inlineCode",{parentName:"li"},"optimizer"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"tune_ema_decay"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"True"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify whether we should include the search space of ",Object(i.b)("inlineCode",{parentName:"li"},"ema_decay"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"tune_clip_norm"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"True"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify whether we should include the search space of ",Object(i.b)("inlineCode",{parentName:"li"},"clip_norm"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"tune_init_method"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"True"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify whether we should include the search space of ",Object(i.b)("inlineCode",{parentName:"li"},"init_method"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"kwargs"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify other configs that may be used in the definitions of search spaces of each model.")))),Object(i.b)("h3",{id:"get"},Object(i.b)("inlineCode",{parentName:"h3"},"get")),Object(i.b)("p",null,"Method for getting the default search spaces of the specific model."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"def get(self, model: str) -> optuna_params_type:\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"model")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify which model's default search spaces that we want to get.")))),Object(i.b)("h4",{id:"examples-1"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\npreset = cflearn.OptunaPresetParams()\nprint(preset.get("linear"))  # ...\n')),Object(i.b)("h2",{id:"cflearnauto"},Object(i.b)("inlineCode",{parentName:"h2"},"cflearn.Auto")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Source code: ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/752f4190aab49e6fa44e3926c01aeec5dc9a129a/cflearn/api/auto.py#L42"}),"auto.py -> class Auto"))),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Auto")," implement the high-level parts, and should be able to cover the life cycle of an AutoML task."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'class Auto:\n    def __init__(\n        self,\n        task_type: task_type_type,\n        *,\n        models: Union[str, List[str]] = "auto",\n        tune_lr: bool = True,\n        tune_optimizer: bool = True,\n        tune_ema_decay: bool = True,\n        tune_clip_norm: bool = True,\n        tune_init_method: bool = True,\n        **kwargs: Any,\n    ):\n')),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"task_type")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify the task type."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"clf"')," for classification tasks."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"reg"')," for regression tasks."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"models"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},'"auto"'),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify the ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#define-model-space"}),"Model Space"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"tune_lr"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"True"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify whether we should include the search space of ",Object(i.b)("inlineCode",{parentName:"li"},"lr"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"tune_optimizer"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"True"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify whether we should include the search space of ",Object(i.b)("inlineCode",{parentName:"li"},"optimizer"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"tune_ema_decay"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"True"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify whether we should include the search space of ",Object(i.b)("inlineCode",{parentName:"li"},"ema_decay"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"tune_clip_norm"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"True"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify whether we should include the search space of ",Object(i.b)("inlineCode",{parentName:"li"},"clip_norm"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"tune_init_method"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"True"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify whether we should include the search space of ",Object(i.b)("inlineCode",{parentName:"li"},"init_method"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"kwargs"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify other configs used in ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#optunapresetparams"}),Object(i.b)("inlineCode",{parentName:"a"},"OptunaPresetParams")),".")))),Object(i.b)("h3",{id:"fit"},Object(i.b)("inlineCode",{parentName:"h3"},"fit")),Object(i.b)("p",null,"Method for running the training process of an AutoML task."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'def fit(\n    self,\n    x: data_type,\n    y: data_type = None,\n    x_cv: data_type = None,\n    y_cv: data_type = None,\n    *,\n    study_config: Optional[Dict[str, Any]] = None,\n    predict_config: Optional[Dict[str, Any]] = None,\n    metrics: Optional[Union[str, List[str]]] = None,\n    params: Optional[Dict[str, optuna_params_type]] = None,\n    num_jobs: int = 1,\n    num_trial: int = 20,\n    num_repeat: int = 5,\n    num_parallel: int = 1,\n    timeout: Optional[float] = None,\n    score_weights: Optional[Dict[str, float]] = None,\n    estimator_scoring_function: Union[str, scoring_fn_type] = default_scoring,\n    temp_folder: str = "__tmp__",\n    num_final_repeat: int = 20,\n    extra_config: general_config_type = None,\n    cuda: Optional[Union[str, int]] = None,\n) -> "Auto":\n')),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"x")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify the training features."),Object(i.b)("li",{parentName:"ul"},"Could be either a ",Object(i.b)("inlineCode",{parentName:"li"},"ndarray")," or a ",Object(i.b)("inlineCode",{parentName:"li"},"file"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"y"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"None"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify the training labels."),Object(i.b)("li",{parentName:"ul"},"If ",Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"x"))," is a ",Object(i.b)("inlineCode",{parentName:"li"},"file"),", then we should leave ",Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"y"))," unspecified."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"x_cv"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"None"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify the cross validation features (if provided)."),Object(i.b)("li",{parentName:"ul"},"If ",Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"x"))," is a ",Object(i.b)("inlineCode",{parentName:"li"},"file"),", then ",Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"x_cv"))," should also be a ",Object(i.b)("inlineCode",{parentName:"li"},"file")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"y_cv"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"None"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify the cross validation labels (if provided)."),Object(i.b)("li",{parentName:"ul"},"If ",Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"x_cv"))," is a ",Object(i.b)("inlineCode",{parentName:"li"},"file"),", then we should leave ",Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"y_cv"))," unspecified."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"study_config"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"None"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Configs that will be passed into ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://optuna.readthedocs.io/en/stable/reference/generated/optuna.create_study.html"}),Object(i.b)("inlineCode",{parentName:"a"},"optuna.create_study")),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"predict_config"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"None"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Configs that will be passed into ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"../user-guides/apis#predict"}),Object(i.b)("inlineCode",{parentName:"a"},"Pipeline.predict")),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"metrics"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"None"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify which metric(s) are we going to use to monitor our training process."),Object(i.b)("li",{parentName:"ul"},"If not provided, we'll use the ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"../getting-started/configurations#metrics"}),"default settings"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"params"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"None"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify the ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#define-search-spaces"}),"Search Spaces"),"."),Object(i.b)("li",{parentName:"ul"},"If not provided, we'll use ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#the-default-search-spaces"}),"the default search spaces"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"num_jobs"))," ","[default = 1]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Number of processes run in parallel."),Object(i.b)("li",{parentName:"ul"},"If set to value greater than ",Object(i.b)("inlineCode",{parentName:"li"},"1"),", we'll use distributed training."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"num_trial"))," ","[default = 20]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Number of trials we will run through."),Object(i.b)("li",{parentName:"ul"},"This is equivalent to ",Object(i.b)("em",{parentName:"li"},"how many combinations of hyperparameters will we try"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"num_repeat"))," ","[default = 5]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Number of models we train in each trial."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"num_parallel"))," ","[default = 1]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Number of processes run in parallel, in each trial."),Object(i.b)("li",{parentName:"ul"},"It is recommended to leave it as ",Object(i.b)("inlineCode",{parentName:"li"},"1"),", unless ",Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"num_repeat"))," has been set to a very large number."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"timeout"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"None"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"timeout")," argument used in ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.Study.html#optuna.study.Study.optimize"}),Object(i.b)("inlineCode",{parentName:"a"},"optuna.study.Study.optimize")),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"score_weights"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"None"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify the weights of each metric."),Object(i.b)("li",{parentName:"ul"},"It is recommended to leave it as ",Object(i.b)("inlineCode",{parentName:"li"},"None"),", which means we will treat every metric as equal."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"estimator_scoring_function"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},'"default"'),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify the scoring function we'll use to aggregate every score and get the final score."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"temp_folder"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},'"__tmp__"'),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Temporary folder in which we used to store the intermediate results."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"num_final_repeat"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"20"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify the final ",Object(i.b)("inlineCode",{parentName:"li"},"num_repeat")," we'll use in ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"../user-guides/apis#repeat_with"}),Object(i.b)("inlineCode",{parentName:"a"},"repeat_with")),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"extra_config"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"None"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify the ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#define-extra-configurations"}),"Extra Configurations"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"cuda"))," ","[default = ",Object(i.b)("inlineCode",{parentName:"li"},"None"),"]",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Specify the working GPU."),Object(i.b)("li",{parentName:"ul"},"If not provided, ",Object(i.b)("inlineCode",{parentName:"li"},"carefree-learn")," will try to inference it automatically.")))),Object(i.b)("h3",{id:"best_params"},Object(i.b)("inlineCode",{parentName:"h3"},"best_params")),Object(i.b)("p",null,"Property that stores the best hyperparameters searched in the ",Object(i.b)("inlineCode",{parentName:"p"},"fit")," process."),Object(i.b)("h4",{id:"examples-2"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\nfrom cfdata.tabular import TabularDataset\n\nx, y = TabularDataset.iris().xy\nauto = cflearn.Auto("clf", models=["linear", "fcnn"]).fit(x, y)\nprint(auto.best_params)\n')),Object(i.b)("p",null,"Which yields"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n    "linear": {\n        "optimizer_config": {\n            "lr": 0.08741785470275337\n        },\n        "optimizer": "adamw",\n        "scheduler": "plateau",\n        "model_config": {\n            "ema_decay": 0.0,\n            "default_encoding_configs": {\n                "init_method": "truncated_normal"\n            }\n        },\n        "trainer_config": {\n            "clip_norm": 1.0146174647714874\n        },\n        "batch_size": 32\n    },\n    "fcnn": {\n        "optimizer_config": {\n            "lr": 0.035924214329005666\n        },\n        "optimizer": "rmsprop",\n        "scheduler": "plateau",\n        "model_config": {\n            "ema_decay": 0.0,\n            "default_encoding_configs": {\n                "init_method": "truncated_normal",\n                "embedding_dim": "auto"\n            },\n            "hidden_units": [\n                8\n            ],\n            "mapping_configs": {\n                "batch_norm": false,\n                "dropout": 0.4412946560665756,\n                "pruner_config": null\n            }\n        },\n        "trainer_config": {\n            "clip_norm": 0.0\n        },\n        "batch_size": 32\n    }\n}\n')),Object(i.b)("h3",{id:"pack"},Object(i.b)("inlineCode",{parentName:"h3"},"pack")),Object(i.b)("p",null,"Please refer to ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"production#automl-in-production"}),"AutoML in Production")," for more details."),Object(i.b)("h3",{id:"unpack"},Object(i.b)("inlineCode",{parentName:"h3"},"unpack")),Object(i.b)("p",null,"Please refer to ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"production#automl-in-production"}),"AutoML in Production")," for more details."))}p.isMDXComponent=!0}}]);