(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{100:function(e,t,a){"use strict";var n=a(0),i=a(101);t.a=function(){var e=Object(n.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},101:function(e,t,a){"use strict";var n=a(0),i=Object(n.createContext)(void 0);t.a=i},103:function(e,t,a){"use strict";var n=a(0),i=a.n(n),l=a(100),r=a(97),c=a(52),b=a.n(c),o=37,s=39;t.a=function(e){var t=e.lazy,a=e.block,c=e.children,p=e.defaultValue,m=e.values,d=e.groupId,O=e.className,j=Object(l.a)(),u=j.tabGroupChoices,N=j.setTabGroupChoices,f=Object(n.useState)(p),g=f[0],h=f[1];if(null!=d){var _=u[d];null!=_&&_!==g&&m.some((function(e){return e.value===_}))&&h(_)}var C=function(e){h(e),null!=d&&N(d,e)},v=[];return i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(r.a)("tabs",{"tabs--block":a},O)},m.map((function(e){var t=e.value,a=e.label;return i.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===t,className:Object(r.a)("tabs__item",b.a.tabItem,{"tabs__item--active":g===t}),key:t,ref:function(e){return v.push(e)},onKeyDown:function(e){!function(e,t,a){switch(a.keyCode){case s:!function(e,t){var a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()}(e,t);break;case o:!function(e,t){var a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()}(e,t)}}(v,e.target,e)},onFocus:function(){return C(t)},onClick:function(){C(t)}},a)}))),t?Object(n.cloneElement)(c.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):i.a.createElement("div",{className:"margin-vert--md"},c.map((function(e,t){return Object(n.cloneElement)(e,{key:t,hidden:e.props.value!==g})}))))}},104:function(e,t,a){"use strict";var n=a(3),i=a(0),l=a.n(i);t.a=function(e){var t=e.children,a=e.hidden,i=e.className;return l.a.createElement("div",Object(n.a)({role:"tabpanel"},{hidden:a,className:i}),t)}},89:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return m}));var n=a(3),i=a(7),l=(a(0),a(96)),r=a(103),c=a(104),b={id:"configurations",title:"Configurations"},o={unversionedId:"getting-started/configurations",id:"getting-started/configurations",isDocsHomePage:!1,title:"Configurations",description:"Although it is possible to get a rather good performance with default configurations, performance might be gained easily by specifying configurations with our prior knowledges.",source:"@site/docs/getting-started/configurations.md",slug:"/getting-started/configurations",permalink:"/carefree-learn-doc/docs/getting-started/configurations",version:"current",lastUpdatedAt:1635037628,sidebar:"docs",previous:{title:"Quick Start",permalink:"/carefree-learn-doc/docs/getting-started/quick-start"},next:{title:"Iris",permalink:"/carefree-learn-doc/docs/examples/Iris"}},s=[{value:"Specify Configurations",id:"specify-configurations",children:[{value:"<code>DLPipeline</code>",id:"dlpipeline",children:[]},{value:"<code>dl.SimplePipeline</code>",id:"dlsimplepipeline",children:[]},{value:"<code>dl.CarefreePipeline</code>",id:"dlcarefreepipeline",children:[]},{value:"<code>cv.SimplePipeline</code>",id:"cvsimplepipeline",children:[]},{value:"<code>cv.CarefreePipeline</code>",id:"cvcarefreepipeline",children:[]},{value:"<code>ml.SimplePipeline</code>",id:"mlsimplepipeline",children:[]},{value:"<code>ml.CarefreePipeline</code>",id:"mlcarefreepipeline",children:[]},{value:"Configure <code>DLZoo</code>",id:"configure-dlzoo",children:[]},{value:"Configure <code>cflearn.api</code>",id:"configure-cflearnapi",children:[]}]},{value:"Configuration Details",id:"configuration-details",children:[{value:"<code>make_multiple</code> mechanism",id:"make_multiple-mechanism",children:[]},{value:"<code>TrainerState</code>",id:"trainerstate",children:[]},{value:"<code>BasicMonitor</code>",id:"basicmonitor",children:[]},{value:"<code>_LogMetricsMsgCallback</code>",id:"_logmetricsmsgcallback",children:[]},{value:"<code>OptimizerPack</code>",id:"optimizerpack",children:[]},{value:"<code>finetune_config</code>",id:"finetune_config",children:[]},{value:"<code>TqdmSettings</code>",id:"tqdmsettings",children:[]}]},{value:"Supported Models",id:"supported-models",children:[{value:"<code>clf</code>",id:"clf",children:[]},{value:"<code>gan</code>",id:"gan",children:[]},{value:"<code>generator</code>",id:"generator",children:[]},{value:"<code>multimodal</code>",id:"multimodal",children:[]},{value:"<code>segmentor</code>",id:"segmentor",children:[]},{value:"<code>ssl</code>",id:"ssl",children:[]},{value:"<code>style_transfer</code>",id:"style_transfer",children:[]},{value:"<code>vae</code>",id:"vae",children:[]}]}],p={rightToc:s};function m(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Although it is possible to get a rather good performance with default configurations, performance might be gained easily by specifying configurations with our prior knowledges."),Object(l.b)("p",null,"We've already mentioned the basic ideas on how to configure ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," in ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/#configurations"}),Object(l.b)("inlineCode",{parentName:"a"},"Introduction")),", so we will focus on introducing how to actually configure ",Object(l.b)("inlineCode",{parentName:"p"},"Pipeline"),"s in this page. "),Object(l.b)("h2",{id:"specify-configurations"},"Specify Configurations"),Object(l.b)("p",null,"There are three ways to specify configurations in ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Construct a ",Object(l.b)("inlineCode",{parentName:"li"},"Pipeline")," from scratch."),Object(l.b)("li",{parentName:"ul"},"Leverage ",Object(l.b)("inlineCode",{parentName:"li"},"DLZoo")," to construct a ",Object(l.b)("inlineCode",{parentName:"li"},"Pipeline")," with a JSON file."),Object(l.b)("li",{parentName:"ul"},"Utilize ",Object(l.b)("inlineCode",{parentName:"li"},"cflearn.api")," (",Object(l.b)("strong",{parentName:"li"},"recommended!"),").")),Object(l.b)("p",null,"Let's say we want to construct a ",Object(l.b)("inlineCode",{parentName:"p"},"Pipeline")," to train ",Object(l.b)("inlineCode",{parentName:"p"},"resnet18")," on MNIST dataset, here are three different ways to achieve this:"),Object(l.b)(r.a,{defaultValue:"scratch",values:[{label:"From Scratch",value:"scratch"},{label:"DLZoo",value:"zoo"},{label:"cflearn.api",value:"api"}],mdxType:"Tabs"},Object(l.b)(c.a,{value:"scratch",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'m = cflearn.cv.CarefreePipeline(\n    "clf",\n    {\n        "in_channels": 1,\n        "num_classes": 10,\n        "latent_dim": 512,\n        "encoder1d": "backbone",\n        "encoder1d_config": {\n            "name": "resnet18",\n            "pretrained": False,\n        },\n    },\n    loss_name="cross_entropy",\n    metric_names="acc",\n)\n'))),Object(l.b)(c.a,{value:"zoo",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'m = cflearn.DLZoo.load_pipeline("clf/resnet18.gray", num_classes=10)\n'))),Object(l.b)(c.a,{value:"api",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"m = cflearn.api.resnet18_gray(10)\n")))),Object(l.b)("p",null,"We'll describe some details in the following sections."),Object(l.b)("h3",{id:"dlpipeline"},Object(l.b)("inlineCode",{parentName:"h3"},"DLPipeline")),Object(l.b)("p",null,"Since ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," exposed almost every parameter to users, we can actually control every part of the ",Object(l.b)("inlineCode",{parentName:"p"},"Pipeline")," through args and kwargs of ",Object(l.b)("inlineCode",{parentName:"p"},"__init__"),"."),Object(l.b)("p",null,"Although Machine Learning, Computer Vision and Natural Language Processing are very different, they share many things in common when they are solved by Deep Learning. Therefore in ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn"),", we implement ",Object(l.b)("inlineCode",{parentName:"p"},"DLPipeline")," to handle these shared stuffs."),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"The ",Object(l.b)("inlineCode",{parentName:"p"},"DLPipeline")," serves as the base class of all ",Object(l.b)("inlineCode",{parentName:"p"},"Pipeline"),"s, and for specific domain, we need to inherit ",Object(l.b)("inlineCode",{parentName:"p"},"DLPipeline")," and implement its own ",Object(l.b)("inlineCode",{parentName:"p"},"Pipeline")," class."))),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'class DLPipeline(PipelineProtocol, metaclass=ABCMeta):\n    def __init__(\n        self,\n        *,\n        loss_name: str,\n        loss_config: Optional[Dict[str, Any]] = None,\n        # trainer\n        state_config: Optional[Dict[str, Any]] = None,\n        num_epoch: int = 40,\n        max_epoch: int = 1000,\n        fixed_epoch: Optional[int] = None,\n        fixed_steps: Optional[int] = None,\n        log_steps: Optional[int] = None,\n        valid_portion: float = 1.0,\n        amp: bool = False,\n        clip_norm: float = 0.0,\n        cudnn_benchmark: bool = False,\n        metric_names: Optional[Union[str, List[str]]] = None,\n        metric_configs: Optional[Dict[str, Any]] = None,\n        use_losses_as_metrics: Optional[bool] = None,\n        loss_metrics_weights: Optional[Dict[str, float]] = None,\n        recompute_train_losses_in_eval: bool = True,\n        monitor_names: Optional[Union[str, List[str]]] = None,\n        monitor_configs: Optional[Dict[str, Any]] = None,\n        callback_names: Optional[Union[str, List[str]]] = None,\n        callback_configs: Optional[Dict[str, Any]] = None,\n        lr: Optional[float] = None,\n        optimizer_name: Optional[str] = None,\n        scheduler_name: Optional[str] = None,\n        optimizer_config: Optional[Dict[str, Any]] = None,\n        scheduler_config: Optional[Dict[str, Any]] = None,\n        optimizer_settings: Optional[Dict[str, Dict[str, Any]]] = None,\n        workplace: str = "_logs",\n        finetune_config: Optional[Dict[str, Any]] = None,\n        tqdm_settings: Optional[Dict[str, Any]] = None,\n        # misc\n        in_loading: bool = False,\n    )\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"loss_name")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Loss that we'll use for training."),Object(l.b)("li",{parentName:"ul"},"Currently ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," supports",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Common losses: ",Object(l.b)("inlineCode",{parentName:"li"},"mae"),", ",Object(l.b)("inlineCode",{parentName:"li"},"mse"),", ",Object(l.b)("inlineCode",{parentName:"li"},"quantile"),", ",Object(l.b)("inlineCode",{parentName:"li"},"cross_entropy"),", ",Object(l.b)("inlineCode",{parentName:"li"},"focal"),", ..."),Object(l.b)("li",{parentName:"ul"},"Task specific losses: ",Object(l.b)("inlineCode",{parentName:"li"},"vae"),", ",Object(l.b)("inlineCode",{parentName:"li"},"vqvae"),", ..."))))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"loss_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Configurations of the corresponding loss."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"state_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Configurations of the ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"#trainerstate"}),Object(l.b)("inlineCode",{parentName:"a"},"TrainerState")),"."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"num_epoch"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"40"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify number of epochs. "),Object(l.b)("li",{parentName:"ul"},"Notice that in most cases this will not be the final epoch number."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"max_epoch"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"1000"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the maximum number of epochs."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"fixed_epoch"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the (fixed) number of epochs."),Object(l.b)("li",{parentName:"ul"},"If sepcified, then ",Object(l.b)("inlineCode",{parentName:"li"},"num_epoch")," and ",Object(l.b)("inlineCode",{parentName:"li"},"max_epoch")," will all be set to it."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"fixed_steps"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the (fixed) number of steps."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"log_steps"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the (fixed) number of steps to do loggings."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"valid_portion"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"1.0"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify how much data from validation set do we want to use for monitoring."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"amp"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"False"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether use the ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://pytorch.org/docs/stable/amp.html"}),Object(l.b)("inlineCode",{parentName:"a"},"amp"))," technique or not."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"clip_norm"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"0.0"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Given a gradient ",Object(l.b)("inlineCode",{parentName:"li"},"g"),", and the ",Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"clip_norm"))," value, we will normalize ",Object(l.b)("inlineCode",{parentName:"li"},"g")," so that its L2-norm is less than or equal to ",Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"clip_norm")),"."),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("inlineCode",{parentName:"li"},"0.0"),", then no gradient clip will be performed."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"cudnn_benchmark"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"False"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether use the ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://pytorch.org/docs/stable/backends.html"}),Object(l.b)("inlineCode",{parentName:"a"},"cudnn.benchmark"))," technique or not."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"metric_names"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify what metrics do we want to use for monitoring."),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("inlineCode",{parentName:"li"},"None"),", then no metrics will be used, and losses will be treated as metrics."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"metric_configs"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Configurations of the corresponding metrics."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"use_losses_as_metrics"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether use losses as metrics or not."),Object(l.b)("li",{parentName:"ul"},"It will always be ",Object(l.b)("inlineCode",{parentName:"li"},"True")," if ",Object(l.b)("inlineCode",{parentName:"li"},"metric_names")," is ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"loss_metrics_weights"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the weight of each loss when they are used as metrics."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"recompute_train_losses_in_eval"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"True"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether should we recompute losses on training set in monitor steps when validation set is not provided."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"monitor_names"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify what monitors do we want to use for monitoring."),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("inlineCode",{parentName:"li"},"None"),", then ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"#basicmonitor"}),Object(l.b)("inlineCode",{parentName:"a"},"BasicMonitor"))," will be used."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"monitor_configs"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Configurations of the corresponding monitors."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"callback_names"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify what callbacks do we want to use during training."),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("inlineCode",{parentName:"li"},"None"),", then ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"#_logmetricsmsgcallback"}),Object(l.b)("inlineCode",{parentName:"a"},"_LogMetricsMsgCallback"))," will be used."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"callback_configs"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Configurations of the corresponding callbacks."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"lr"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Default learning rate."),Object(l.b)("li",{parentName:"ul"},"If not specified, ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," will try to infer the best default value."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"optimizer_name"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},'"None"'),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify which optimizer will be used."),Object(l.b)("li",{parentName:"ul"},"If not specified, ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," will try to infer the best default value."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"scheduler_name"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},'"None"'),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify which learning rate scheduler will be used."),Object(l.b)("li",{parentName:"ul"},"If not specified, ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," will try to infer the best default value."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"optimizer_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the optimizer's configuration."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"scheduler_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the scheduler's configuration."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"optimizer_settings"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the fine grained configurations of optimizers and schedulers."),Object(l.b)("li",{parentName:"ul"},"We should not specify ",Object(l.b)("inlineCode",{parentName:"li"},"optimizer_name"),", ... if we want to specify ",Object(l.b)("inlineCode",{parentName:"li"},"optimizer_settings"),"."),Object(l.b)("li",{parentName:"ul"},"See ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"#optimizerpack"}),Object(l.b)("inlineCode",{parentName:"a"},"OptimizerPack"))," for more details."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"workplace"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},'"_logs"'),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the workplace of the whole training process."),Object(l.b)("li",{parentName:"ul"},"In general, ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," will create a folder (with timestamp as its name) in the workplace, and will dump everything generated in the training process to it."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"finetune_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the finetune configurations."),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("inlineCode",{parentName:"li"},"None"),", then we'll not utilize the finetune mechanism supported by ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn"),"."),Object(l.b)("li",{parentName:"ul"},"See ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"#finetune_config"}),Object(l.b)("inlineCode",{parentName:"a"},"finetune_config"))," for more details."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"tqdm_settings"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the ",Object(l.b)("inlineCode",{parentName:"li"},"tqdm")," configurations."),Object(l.b)("li",{parentName:"ul"},"See ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"#tqdmsettings"}),Object(l.b)("inlineCode",{parentName:"a"},"TqdmSettings"))," for more details."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"in_loading"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"False"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In most cases this is an internal property handled by ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," itself.")))),Object(l.b)("h3",{id:"dlsimplepipeline"},Object(l.b)("inlineCode",{parentName:"h3"},"dl.SimplePipeline")),Object(l.b)("p",null,"This ",Object(l.b)("inlineCode",{parentName:"p"},"Pipeline")," aims to solve general deep learning tasks."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'@DLPipeline.register("dl.simple")\nclass SimplePipeline(DLPipeline):\n    def __init__(\n        self,\n        model_name: str,\n        model_config: Dict[str, Any],\n        *,\n        # The rest is the same as `DLPipeline`\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"model_name")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Model that we'll use for training."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"model_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Configurations of the corresponding model.")))),Object(l.b)("h3",{id:"dlcarefreepipeline"},Object(l.b)("inlineCode",{parentName:"h3"},"dl.CarefreePipeline")),Object(l.b)("p",null,"This ",Object(l.b)("inlineCode",{parentName:"p"},"Pipeline")," will provide some useful default settings on top of ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#dlsimplepipeline"}),Object(l.b)("inlineCode",{parentName:"a"},"dl.SimplePipeline")),"."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'@DLPipeline.register("dl.carefree")\nclass CarefreePipeline(SimplePipeline):\n    def __init__(\n        self,\n        # The rest is the same as `dl.SimplePipeline`\n')),Object(l.b)("h3",{id:"cvsimplepipeline"},Object(l.b)("inlineCode",{parentName:"h3"},"cv.SimplePipeline")),Object(l.b)("p",null,"This ",Object(l.b)("inlineCode",{parentName:"p"},"Pipeline")," is exactly the same as ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#dlsimplepipeline"}),Object(l.b)("inlineCode",{parentName:"a"},"dl.SimplePipeline")),", just an alias."),Object(l.b)("h3",{id:"cvcarefreepipeline"},Object(l.b)("inlineCode",{parentName:"h3"},"cv.CarefreePipeline")),Object(l.b)("p",null,"This ",Object(l.b)("inlineCode",{parentName:"p"},"Pipeline")," is exactly the same as ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#dlcarefreepipeline"}),Object(l.b)("inlineCode",{parentName:"a"},"dl.CarefreePipeline")),", just an alias."),Object(l.b)("h3",{id:"mlsimplepipeline"},Object(l.b)("inlineCode",{parentName:"h3"},"ml.SimplePipeline")),Object(l.b)("p",null,"This ",Object(l.b)("inlineCode",{parentName:"p"},"Pipeline")," aims to solve tabular tasks. It will always use ",Object(l.b)("inlineCode",{parentName:"p"},"MLModel")," as its model, and we can only specify the ",Object(l.b)("inlineCode",{parentName:"p"},"core")," of the ",Object(l.b)("inlineCode",{parentName:"p"},"MLModel"),"."),Object(l.b)("div",{className:"admonition admonition-info alert alert--info"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"The reason why ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," does so is that in tabular tasks, there are many common practices which shall be applied everytime, such as:"),Object(l.b)("ul",{parentName:"div"},Object(l.b)("li",{parentName:"ul"},"Encode the categorical columns (to ",Object(l.b)("inlineCode",{parentName:"li"},"one_hot")," / ",Object(l.b)("inlineCode",{parentName:"li"},"embedding")," format, required)."),Object(l.b)("li",{parentName:"ul"},"Pre-process the numerical columns (with ",Object(l.b)("inlineCode",{parentName:"li"},"min_max")," / ",Object(l.b)("inlineCode",{parentName:"li"},"normalize")," / ... method, optional)."),Object(l.b)("li",{parentName:"ul"},"Decide the binary threshold in binary classification tasks."),Object(l.b)("li",{parentName:"ul"},"......")),Object(l.b)("p",{parentName:"div"},"In order to prevent users from re-implementing these stuffs over and over again, ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," decides to provide ",Object(l.b)("inlineCode",{parentName:"p"},"MLModel")," which wraps everything up. In this case, we can focus on the core algorithms, without concerning the rest."))),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'@DLPipeline.register("ml.simple")\nclass SimplePipeline(DLPipeline):\n    def __init__(\n        self,\n        core_name: str = "fcnn",\n        core_config: Optional[Dict[str, Any]] = None,\n        *,\n        input_dim: Optional[int] = None,\n        output_dim: Optional[int] = None,\n        loss_name: str = "auto",\n        loss_config: Optional[Dict[str, Any]] = None,\n        # encoder\n        only_categorical: bool = False,\n        encoder_config: Optional[Dict[str, Any]] = None,\n        encoding_methods: Optional[Dict[str, List[str]]] = None,\n        encoding_configs: Optional[Dict[str, Dict[str, Any]]] = None,\n        default_encoding_methods: Optional[List[str]] = None,\n        default_encoding_configs: Optional[Dict[str, Any]] = None,\n        # misc\n        pre_process_batch: bool = True,\n        num_repeat: Optional[int] = None,\n        # The rest is the same as `DLPipeline`\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"core_name"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},'"fcnn"'),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Core of ",Object(l.b)("inlineCode",{parentName:"li"},"MLModel")," that we'll use for training."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"core_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Configurations of the corresponding core."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"input_dim"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Input dimension of the task."),Object(l.b)("li",{parentName:"ul"},"If not provided, then ",Object(l.b)("inlineCode",{parentName:"li"},"cf_data")," should be provided in ",Object(l.b)("inlineCode",{parentName:"li"},"MLData")," which we want to train on."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"output_dim"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Output dimension of the task."),Object(l.b)("li",{parentName:"ul"},"If not provided, then ",Object(l.b)("inlineCode",{parentName:"li"},"cf_data")," should be provided in ",Object(l.b)("inlineCode",{parentName:"li"},"MLData")," which we want to train on."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"loss_name"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},'"auto"'),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Loss that we'll use for training."),Object(l.b)("li",{parentName:"ul"},"As default (",Object(l.b)("inlineCode",{parentName:"li"},'"auto"'),"), ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," will use:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'"mae"')," for regression tasks."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'"focal"')," for classification tasks."))))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"loss_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Configurations of the corresponding loss."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"only_categorical"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"False"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether all columns in the task are categorical columns or not."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"encoder_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Configurations of ",Object(l.b)("inlineCode",{parentName:"li"},"Encoder"),"."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"encoding_methods"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Encoding methods we will use to encode the categorical columns."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"encoding_configs"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Configurations of the corresponding methods."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"default_encoding_methods"))," [default = ",Object(l.b)("inlineCode",{parentName:"li"},'["embedding"]'),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Default encoding methods we will use to encode the categorical columns."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"default_encoding_configs"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Default configurations of the corresponding methods."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"pre_process_batch"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"False"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether should we pre-process the input batch or not."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"num_repeat"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In most cases this is an internal property handled by ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," itself.")))),Object(l.b)("h3",{id:"mlcarefreepipeline"},Object(l.b)("inlineCode",{parentName:"h3"},"ml.CarefreePipeline")),Object(l.b)("p",null,"This ",Object(l.b)("inlineCode",{parentName:"p"},"Pipeline")," will provide some useful default settings on top of ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#mlsimplepipeline"}),Object(l.b)("inlineCode",{parentName:"a"},"ml.SimplePipeline")),"."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'@DLPipeline.register("ml.carefree")\nclass CarefreePipeline(SimplePipeline):\n    def __init__(\n        self,\n        # The rest is the same as `ml.SimplePipeline`\n')),Object(l.b)("h3",{id:"configure-dlzoo"},"Configure ",Object(l.b)("inlineCode",{parentName:"h3"},"DLZoo")),Object(l.b)("p",null,"Since it will be tedious to re-define similar configurations over and over, ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," provides ",Object(l.b)("inlineCode",{parentName:"p"},"DLZoo")," to improve user experience. Internally, ",Object(l.b)("inlineCode",{parentName:"p"},"DLZoo")," will read configurations from ",Object(l.b)("inlineCode",{parentName:"p"},"cflearn/api/zoo/configs"),", which contains a bunch of JSON files:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# This will read the  cflearn/api/zoo/configs/clf/resnet18/default.json  file\nm = cflearn.DLZoo.load_pipeline("clf/resnet18", num_classes=10)\n# This will read the  cflearn/api/zoo/configs/clf/resnet18/gray.json     file\nm = cflearn.DLZoo.load_pipeline("clf/resnet18.gray", num_classes=10)\n')),Object(l.b)("p",null,"The general usage of ",Object(l.b)("inlineCode",{parentName:"p"},"DLZoo")," should be as follows:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'m = cflearn.DLZoo.load_pipeline("task/model.type", **kwargs)\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"task")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the task we want to work with."),Object(l.b)("li",{parentName:"ul"},"See ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"#supported-models"}),"Supported Models")," for more details."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"model")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the model we want to use."),Object(l.b)("li",{parentName:"ul"},"See ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"#supported-models"}),"Supported Models")," for more details."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"type")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the model type we want to use."),Object(l.b)("li",{parentName:"ul"},"If not provided, we will use ",Object(l.b)("inlineCode",{parentName:"li"},"default")," as the model type."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"kwargs")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the keyword arguments of the ",Object(l.b)("inlineCode",{parentName:"li"},"Pipeline"),", described above."),Object(l.b)("li",{parentName:"ul"},"See ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"#example"}),"Example")," section for more details.")))),Object(l.b)("h4",{id:"__requires__"},Object(l.b)("inlineCode",{parentName:"h4"},"__requires__")),Object(l.b)("p",null,"Although ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," wants to make everything as easy as possible, there are still some properties that ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," cannot make decisions for you (e.g. ",Object(l.b)("inlineCode",{parentName:"p"},"img_size"),", ",Object(l.b)("inlineCode",{parentName:"p"},"num_classes"),", etc.). These properties will be presented in the ",Object(l.b)("inlineCode",{parentName:"p"},"__requires__")," field of each JSON file."),Object(l.b)("p",null,"For example, in ",Object(l.b)("inlineCode",{parentName:"p"},"resnet18"),", we will need you to provide the ",Object(l.b)("inlineCode",{parentName:"p"},"num_classes")," property, so the corresponding JSON file will be:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "__requires__": {\n    "model_config": ["num_classes"]\n  },\n  ...\n}\n')),Object(l.b)("p",null,"Which means we need to specify ",Object(l.b)("inlineCode",{parentName:"p"},"num_classes")," if we want to use ",Object(l.b)("inlineCode",{parentName:"p"},"resnet18"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'m = cflearn.DLZoo.load_pipeline("clf/resnet18", num_classes=10)\n')),Object(l.b)("div",{className:"admonition admonition-info alert alert--info"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"In fact, the 'original' configuration should be:"),Object(l.b)("pre",{parentName:"div"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'m = cflearn.DLZoo.load_pipeline("clf/resnet18", model_config=dict(num_classes=10))\n')),Object(l.b)("p",{parentName:"div"},"Because ",Object(l.b)("inlineCode",{parentName:"p"},"num_classes")," should be defined under the ",Object(l.b)("inlineCode",{parentName:"p"},"model_config")," scope."),Object(l.b)("p",{parentName:"div"},"Since this is quite troublesome, we decided to allow users to specify these 'requirements' directly by the names, which makes ",Object(l.b)("inlineCode",{parentName:"p"},"DLZoo")," more readable and easier to use!"))),Object(l.b)("h4",{id:"example"},"Example"),Object(l.b)("p",null,"The following two code snippets have same effects:"),Object(l.b)(r.a,{defaultValue:"scratch",values:[{label:"From Scratch",value:"scratch"},{label:"DLZoo",value:"zoo"}],mdxType:"Tabs"},Object(l.b)(c.a,{value:"scratch",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python",metastring:"{3-7}","{3-7}":!0}),'m = cflearn.cv.CarefreePipeline(\n    "clf",\n    model_config={\n        "num_classes": 10,\n        ...\n    },\n    loss_name="focal",\n    ...\n)\n'))),Object(l.b)(c.a,{value:"zoo",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python",metastring:"{3-7}","{3-7}":!0}),'m = cflearn.DLZoo.load_pipeline(\n    "clf/resnet18.gray",\n    model_config={\n        "num_classes": 10,\n        ...\n    },\n    loss_name="focal",\n    ...\n)\n'))),Object(l.b)(c.a,{value:"api",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"m = cflearn.api.resnet18_gray(10)\n")))),Object(l.b)("h3",{id:"configure-cflearnapi"},"Configure ",Object(l.b)("inlineCode",{parentName:"h3"},"cflearn.api")),Object(l.b)("p",null,"Since ",Object(l.b)("inlineCode",{parentName:"p"},"DLZoo")," mainly depends on JSON files which cannot provide useful auto-completion, ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," further provides ",Object(l.b)("inlineCode",{parentName:"p"},"cflearn.api"),", which is a thin wrapper of ",Object(l.b)("inlineCode",{parentName:"p"},"DLZoo"),", as the recommended user interface."),Object(l.b)("p",null,"Configuring ",Object(l.b)("inlineCode",{parentName:"p"},"cflearn.api")," will be exactly the same as configuring ",Object(l.b)("inlineCode",{parentName:"p"},"DLZoo"),", except that it can utilize auto-completion which significantly improves user experience."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'m = cflearn.api.resnet18_gray(10, metric_names="acc")\n')),Object(l.b)("h2",{id:"configuration-details"},"Configuration Details"),Object(l.b)("h3",{id:"make_multiple-mechanism"},Object(l.b)("inlineCode",{parentName:"h3"},"make_multiple")," mechanism"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"This mechanism is based on the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/design-principles#register-mechanism"}),Object(l.b)("inlineCode",{parentName:"a"},"Register Mechanism")),".")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"make_multiple")," mechanism is useful when we need to use either one single instance or multiple instances (e.g. use one metric / use multiple metrics to monitor the training process):"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"When we need one single instance, only one single name (",Object(l.b)("inlineCode",{parentName:"li"},"str"),") and the corresponding config is required."),Object(l.b)("li",{parentName:"ul"},"When we need multiple instances, their names (",Object(l.b)("inlineCode",{parentName:"li"},"List[str]"),") are required, and the configs should be a dictionary, where:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"The keys should be the names."),Object(l.b)("li",{parentName:"ul"},"The values should be the corresponding configs.")))),Object(l.b)("p",null,"The source codes well demonstrate how it works:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"@classmethod\ndef make_multiple(\n    cls,\n    names: Union[str, List[str]],\n    configs: configs_type = None,\n) -> Union[T, List[T]]:\n    if configs is None:\n        configs = {}\n    if isinstance(names, str):\n        assert isinstance(configs, dict)\n        return cls.make(names, configs)  # type: ignore\n    if not isinstance(configs, list):\n        configs = [configs.get(name, {}) for name in names]\n    return [\n        cls.make(name, shallow_copy_dict(config))\n        for name, config in zip(names, configs)\n    ]\n")),Object(l.b)("h3",{id:"trainerstate"},Object(l.b)("inlineCode",{parentName:"h3"},"TrainerState")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Source code: ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/99c946ffa1df2b821161d52aae19f67e91abf46e/cflearn/protocol.py#L195"}),"protocol.py"))),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"class TrainerState:\n    def __init__(\n        self,\n        loader: DataLoaderProtocol,\n        *,\n        num_epoch: int,\n        max_epoch: int,\n        fixed_steps: Optional[int] = None,\n        extension: int = 5,\n        enable_logging: bool = True,\n        min_num_sample: int = 3000,\n        snapshot_start_step: Optional[int] = None,\n        max_snapshot_file: int = 5,\n        num_snapshot_per_epoch: int = 2,\n        num_step_per_log: int = 350,\n        num_step_per_snapshot: Optional[int] = None,\n        max_step_per_snapshot: int = 1000,\n    )\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"loader")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"This will be handled by ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," internally."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"num_epoch")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify number of epochs. "),Object(l.b)("li",{parentName:"ul"},"Notice that in most cases this will not be the final epoch number."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"max_epoch")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the maximum number of epochs."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"fixed_steps"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the (fixed) number of steps."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"extension"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the number of the extended epochs per extension."),Object(l.b)("li",{parentName:"ul"},"So basically, we'll not extend the epoch for more than ",Object(l.b)("span",Object(n.a)({parentName:"li"},{className:"math math-inline"}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(l.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(l.b)("semantics",{parentName:"math"},Object(l.b)("mrow",{parentName:"semantics"},Object(l.b)("mfrac",{parentName:"mrow"},Object(l.b)("mrow",{parentName:"mfrac"},Object(l.b)("mrow",{parentName:"mrow"},Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"m"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"a"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"x"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"_"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"e"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"p"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"o"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"c"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"h")),Object(l.b)("mo",{parentName:"mrow"},"\u2212"),Object(l.b)("mrow",{parentName:"mrow"},Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"n"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"u"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"m"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"_"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"e"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"p"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"o"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"c"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"h"))),Object(l.b)("mrow",{parentName:"mfrac"},Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"e"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"x"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"t"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"e"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"n"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"s"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"i"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"o"),Object(l.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"n")))),Object(l.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\frac{\\mathrm{max\\_epoch}-\\mathrm{num\\_epoch}}{\\mathrm{extension}}")))),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1.3581079999999999em",verticalAlign:"-0.345em"}})),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mopen nulldelimiter"})),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mfrac"}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t vlist-t2"}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"1.013108em"}}),Object(l.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-2.6550000000000002em"}}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"e"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"x"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"t"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"e"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"n"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"s"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"i"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"o"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"n"))))),Object(l.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.23em"}}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"frac-line",style:{borderBottomWidth:"0.04em"}}))),Object(l.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.527em"}}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"m"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"a"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"x"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight",style:{marginRight:"0.02778em"}}),"_"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"e"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"p"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"o"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"c"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"h")),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mbin mtight"}),"\u2212"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"n"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"u"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"m"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight",style:{marginRight:"0.02778em"}}),"_"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"e"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"p"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"o"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"c"),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathrm mtight"}),"h")))))),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-s"}),"\u200b")),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.345em"}}),Object(l.b)("span",{parentName:"span"}))))),Object(l.b)("span",Object(n.a)({parentName:"span"},{className:"mclose nulldelimiter"})))))))," times."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"enable_logging"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"True"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Whether enable logging stuffs or not."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"min_num_sample"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"3000"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"We'll not start monitoring until the model has already seen ",Object(l.b)("inlineCode",{parentName:"li"},"min_num_sample")," samples."),Object(l.b)("li",{parentName:"ul"},"This can avoid monitors from stopping too early, when the model is still trying to optimize its initial state."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"snapshot_start_step"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the number of steps when we start to take snapshots."),Object(l.b)("li",{parentName:"ul"},"If not specified, ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," will try to infer the best default value."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"max_snapshot_file"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"5"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the maximum number of checkpoint files we could save during training."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"num_snapshot_per_epoch"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"2"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Indicates how many snapshots we would like to take per epoch."),Object(l.b)("li",{parentName:"ul"},"The final behaviour will be affected by ",Object(l.b)("inlineCode",{parentName:"li"},"max_step_per_snapshot"),"."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"num_step_per_log"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"350"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Indicates the number of steps of each logging period."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"num_step_per_snapshot"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the number of steps of each snapshot period."),Object(l.b)("li",{parentName:"ul"},"If not specified, ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," will try to infer the best default value."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"max_step_per_snapshot"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"1000"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the maximum number of steps of each snapshot period.")))),Object(l.b)("h3",{id:"basicmonitor"},Object(l.b)("inlineCode",{parentName:"h3"},"BasicMonitor")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Source code: ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/99c946ffa1df2b821161d52aae19f67e91abf46e/cflearn/misc/internal_/monitors.py#L9"}),"monitors.py"),".")),Object(l.b)("p",null,"This is the default monitor of ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn"),". It's fairly simple, but quite useful in practice:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"It will take a snapshot when SOTA is achieved."),Object(l.b)("li",{parentName:"ul"},"It will terminate the training after ",Object(l.b)("inlineCode",{parentName:"li"},"patience")," steps, if the new score is even worse than the worst score."),Object(l.b)("li",{parentName:"ul"},"It will not punish extension")),Object(l.b)("div",{className:"admonition admonition-info alert alert--info"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"So in most cases, ",Object(l.b)("inlineCode",{parentName:"p"},"BasicMonitor")," will not early-stop until ",Object(l.b)("inlineCode",{parentName:"p"},"max_epoch")," is reached."))),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'@TrainerMonitor.register("basic")\nclass BasicMonitor(TrainerMonitor):\n    def __init__(self, patience: int = 25):\n        super().__init__()\n        self.patience = patience\n        self.num_snapshot = 0\n        self.best_score = -math.inf\n        self.worst_score: Optional[float] = None\n\n    def snapshot(self, new_score: float) -> bool:\n        self.num_snapshot += 1\n        if self.worst_score is None:\n            self.worst_score = new_score\n        else:\n            self.worst_score = min(new_score, self.worst_score)\n        if new_score > self.best_score:\n            self.best_score = new_score\n            return True\n        return False\n\n    def check_terminate(self, new_score: float) -> bool:\n        if self.num_snapshot <= self.patience:\n            return False\n        if self.worst_score is None:\n            return False\n        return new_score <= self.worst_score\n\n    def punish_extension(self) -> None:\n        return None\n')),Object(l.b)("h3",{id:"_logmetricsmsgcallback"},Object(l.b)("inlineCode",{parentName:"h3"},"_LogMetricsMsgCallback")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Source code: ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/99c946ffa1df2b821161d52aae19f67e91abf46e/cflearn/misc/internal_/callbacks/general.py#L34"}),"general.py"),".")),Object(l.b)("p",null,"This is the default callback of ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn"),". It will report the validation metrics to the console periodically, along with the current steps / epochs, and the execution time since last report. It will also write these information to disk."),Object(l.b)("div",{className:"admonition admonition-info alert alert--info"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"When writing to disk, ",Object(l.b)("inlineCode",{parentName:"p"},"_LogMetricsMsgCallback")," will also write the ",Object(l.b)("inlineCode",{parentName:"p"},"lr")," (learning rate) of the corresponding steps."))),Object(l.b)("h3",{id:"optimizerpack"},Object(l.b)("inlineCode",{parentName:"h3"},"OptimizerPack")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"class OptimizerPack(NamedTuple):\n    scope: str\n    optimizer_name: str\n    scheduler_name: Optional[str] = None\n    optimizer_config: Optional[Dict[str, Any]] = None\n    scheduler_config: Optional[Dict[str, Any]] = None\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"scope")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the parameter 'scope' of this pack."),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("inlineCode",{parentName:"li"},'scope="all"'),", all trainable parameters will be considered."),Object(l.b)("li",{parentName:"ul"},"Else, it represents the attribute of the model, and:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If this attribute is an ",Object(l.b)("inlineCode",{parentName:"li"},"nn.Module"),", then its parameters will be considered."),Object(l.b)("li",{parentName:"ul"},"Else, this attribute should be a list of parameters, which will be considered."))))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"optimizer_name")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify which optimizer will be used."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"scheduler_name"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},'"None"'),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify which learning rate scheduler will be used."),Object(l.b)("li",{parentName:"ul"},"If not specified, no scheduler will be used."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"optimizer_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify optimizer's configuration."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"scheduler_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify scheduler's configuration.")))),Object(l.b)("p",null,"Since directly constructing ",Object(l.b)("inlineCode",{parentName:"p"},"OptimizerPack"),"s will be troublesome, ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," provides many convenient interface for users to specify optimizer settings. For instance, these configurations will have same effects:"),Object(l.b)(r.a,{defaultValue:"kwargs",values:[{label:"Via `kwargs`",value:"kwargs"},{label:"Via `optimizer_settings`",value:"settings"}],mdxType:"Tabs"},Object(l.b)(c.a,{value:"kwargs",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'m = cflearn.cv.CarefreePipeline(\n    ...,\n    lr=1.0e-3,\n    optimizer_name="adamw",\n    scheduler_name="plateau",\n    optimizer_config={"weight_decay": 1.0e-3},\n)\n'))),Object(l.b)(c.a,{value:"settings",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'m = cflearn.cv.CarefreePipeline(\n    ...,\n    optimizer_settings={\n        "all": dict(\n            optimizer_name="adamw",\n            scheduler_name="plateau",\n            optimizer_config={"lr": 1.0e-3, "weight_decay": 1.0e-3},\n        ),\n    },\n)\n')))),Object(l.b)("p",null,"If we need to apply different optimizers on different parameters (which is quite common in GANs), we need to walk through the following two steps:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Define a ",Object(l.b)("inlineCode",{parentName:"li"},"property")," in your ",Object(l.b)("inlineCode",{parentName:"li"},"Model")," which returns a list of parameters you want to optimize."),Object(l.b)("li",{parentName:"ul"},"Define the corresponding optimizer configs with ",Object(l.b)("inlineCode",{parentName:"li"},"property"),"'s name as the dictionary key.")),Object(l.b)("p",null,"Here's an example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\n@cflearn.register_model("foo")\nclass Foo(cflearn.ModelBase):\n    @property\n    def params1(self):\n        return [self.p1, self.p2, ...]\n    \n    @property\n    def params2(self):\n        return [self.p1, self.p3, ...]\n')),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'m = cflearn.cv.CarefreePipeline(\n    ...,\n    optimizer_settings={\n        "params1": {\n            "optimizer": "adam",\n            "optimizer_config": {"lr": 3.0e-4},\n            "scheduler": None,\n        },\n        "params2": {\n            "optimizer": "nag",\n            "optimizer_config": {"lr": 1.0e-3, "momentum": 0.9},\n            "scheduler": "plateau",\n            "scheduler_config": {"mode": "max", ...},\n        },\n    },\n)\n')),Object(l.b)("h3",{id:"finetune_config"},Object(l.b)("inlineCode",{parentName:"h3"},"finetune_config")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Source code: ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/d039183c803f23266101b65c3863528e97940bc8/cflearn/trainer.py#L435"}),Object(l.b)("inlineCode",{parentName:"a"},"_init_finetune")),".")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," supports finetune mechanism, and we can specify:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The initial states we want to start training from."),Object(l.b)("li",{parentName:"ul"},"What parameters should we freeze / train during the finetune process, and Regex is supported!")),Object(l.b)("h4",{id:"example-1"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'m = cflearn.api.u2net(\n    ...,\n    finetune_config={\n        "pretrained_ckpt": "/path/to/your/pretrained.pt",\n        # We\'ll freeze the parameters whose name follows the regex expression\n        "freeze": "some.regex.expression",\n        # We\'ll freeze the parameters whose name doesn\'t follow the regex expression\n        "freeze_except": "some.regex.expression",\n    },\n)\n')),Object(l.b)("div",{className:"admonition admonition-info alert alert--info"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},Object(l.b)("inlineCode",{parentName:"p"},"freeze")," & ",Object(l.b)("inlineCode",{parentName:"p"},"freeze_except")," should not be provided simultaneously"))),Object(l.b)("h3",{id:"tqdmsettings"},Object(l.b)("inlineCode",{parentName:"h3"},"TqdmSettings")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'class TqdmSettings(NamedTuple):\n    use_tqdm: bool = False\n    use_step_tqdm: bool = False\n    use_tqdm_in_validation: bool = False\n    in_distributed: bool = False\n    position: int = 0\n    desc: str = "epoch"\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"use_tqdm"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"False"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Whether enable ",Object(l.b)("inlineCode",{parentName:"li"},"tqdm")," progress bar or not."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"use_step_tqdm"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"False"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Whether enable ",Object(l.b)("inlineCode",{parentName:"li"},"tqdm")," progress bar on steps or not."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"use_tqdm_in_validation"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"False"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Whether enable ",Object(l.b)("inlineCode",{parentName:"li"},"tqdm")," progress bar in validation procedure or not."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"in_distributed"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"False"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"This will be handled by ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," internally."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"position"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"0"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"This will be handled by ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," internally."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"desc"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},'"epoch"'),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"This will be handled by ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," internally.")))),Object(l.b)("h2",{id:"supported-models"},"Supported Models"),Object(l.b)("div",{className:"admonition admonition-info alert alert--info"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"In this section, we will:"),Object(l.b)("ul",{parentName:"div"},Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"load")," to represent ",Object(l.b)("inlineCode",{parentName:"li"},"cflearn.DLZoo.load_pipeline"),"."),Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"key=...")," to represent the ",Object(l.b)("inlineCode",{parentName:"li"},"__requires__")," field.")))),Object(l.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"It's also recommended to browse the ",Object(l.b)("inlineCode",{parentName:"p"},"cflearn/api/zoo/configs")," folder, from which you can see all the JSON files that represent the corresponding supported models."))),Object(l.b)("h3",{id:"clf"},Object(l.b)("inlineCode",{parentName:"h3"},"clf")),Object(l.b)("h4",{id:"cct"},Object(l.b)("inlineCode",{parentName:"h4"},"cct")),Object(l.b)("h5",{id:"default"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/clf/cct/default.json\nm = load("clf/cct", img_size=..., num_classes=...)\n')),Object(l.b)("h5",{id:"large"},"large"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/clf/cct/large.json\nm = load("clf/cct.large", img_size=..., num_classes=...)\n')),Object(l.b)("h5",{id:"large_224"},"large_224"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/clf/cct/large_224.json\nm = load("clf/cct.large_224", num_classes=...)\n')),Object(l.b)("h5",{id:"large_384"},"large_384"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/clf/cct/large_384.json\nm = load("clf/cct.large_384", num_classes=...)\n')),Object(l.b)("h5",{id:"lite"},"lite"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/clf/cct/lite.json\nm = load("clf/cct.lite", img_size=..., num_classes=...)\n')),Object(l.b)("h4",{id:"resnet101"},Object(l.b)("inlineCode",{parentName:"h4"},"resnet101")),Object(l.b)("h5",{id:"default-1"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/clf/resnet101/default.json\nm = load("clf/resnet101", num_classes=...)\n')),Object(l.b)("h4",{id:"resnet18"},Object(l.b)("inlineCode",{parentName:"h4"},"resnet18")),Object(l.b)("h5",{id:"default-2"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/clf/resnet18/default.json\nm = load("clf/resnet18", num_classes=...)\n')),Object(l.b)("h5",{id:"gray"},"gray"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/clf/resnet18/gray.json\nm = load("clf/resnet18.gray", num_classes=...)\n')),Object(l.b)("h3",{id:"gan"},Object(l.b)("inlineCode",{parentName:"h3"},"gan")),Object(l.b)("h4",{id:"siren"},Object(l.b)("inlineCode",{parentName:"h4"},"siren")),Object(l.b)("h5",{id:"default-3"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/gan/siren/default.json\nm = load("gan/siren", img_size=...)\n')),Object(l.b)("h5",{id:"gray-1"},"gray"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/gan/siren/gray.json\nm = load("gan/siren.gray", img_size=...)\n')),Object(l.b)("h4",{id:"vanilla"},Object(l.b)("inlineCode",{parentName:"h4"},"vanilla")),Object(l.b)("h5",{id:"default-4"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/gan/vanilla/default.json\nm = load("gan/vanilla", img_size=...)\n')),Object(l.b)("h5",{id:"gray-2"},"gray"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/gan/vanilla/gray.json\nm = load("gan/vanilla.gray", img_size=...)\n')),Object(l.b)("h3",{id:"generator"},Object(l.b)("inlineCode",{parentName:"h3"},"generator")),Object(l.b)("h4",{id:"cycle_gan_generator"},Object(l.b)("inlineCode",{parentName:"h4"},"cycle_gan_generator")),Object(l.b)("h5",{id:"default-5"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/generator/cycle_gan_generator/default.json\nm = load("generator/cycle_gan_generator")\n')),Object(l.b)("h4",{id:"pixel_cnn"},Object(l.b)("inlineCode",{parentName:"h4"},"pixel_cnn")),Object(l.b)("h5",{id:"default-6"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/generator/pixel_cnn/default.json\nm = load("generator/pixel_cnn", num_classes=...)\n')),Object(l.b)("h4",{id:"style_gan2_generator"},Object(l.b)("inlineCode",{parentName:"h4"},"style_gan2_generator")),Object(l.b)("h5",{id:"1024"},"1024"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/generator/style_gan2_generator/1024.json\nm = load("generator/style_gan2_generator.1024")\n')),Object(l.b)("h5",{id:"default-7"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/generator/style_gan2_generator/default.json\nm = load("generator/style_gan2_generator")\n')),Object(l.b)("h5",{id:"ffhq"},"ffhq"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/generator/style_gan2_generator/ffhq.json\nm = load("generator/style_gan2_generator.ffhq")\n')),Object(l.b)("h5",{id:"metfaces"},"metfaces"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/generator/style_gan2_generator/metfaces.json\nm = load("generator/style_gan2_generator.metfaces")\n')),Object(l.b)("h4",{id:"vqgan_generator"},Object(l.b)("inlineCode",{parentName:"h4"},"vqgan_generator")),Object(l.b)("h5",{id:"default-8"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/generator/vqgan_generator/default.json\nm = load("generator/vqgan_generator")\n')),Object(l.b)("h3",{id:"multimodal"},Object(l.b)("inlineCode",{parentName:"h3"},"multimodal")),Object(l.b)("h4",{id:"clip"},Object(l.b)("inlineCode",{parentName:"h4"},"clip")),Object(l.b)("h5",{id:"default-9"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/multimodal/clip/default.json\nm = load("multimodal/clip")\n')),Object(l.b)("h4",{id:"clip_vqgan_aligner"},Object(l.b)("inlineCode",{parentName:"h4"},"clip_vqgan_aligner")),Object(l.b)("h5",{id:"default-10"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/multimodal/clip_vqgan_aligner/default.json\nm = load("multimodal/clip_vqgan_aligner")\n')),Object(l.b)("h3",{id:"segmentor"},Object(l.b)("inlineCode",{parentName:"h3"},"segmentor")),Object(l.b)("h4",{id:"aim"},Object(l.b)("inlineCode",{parentName:"h4"},"aim")),Object(l.b)("h5",{id:"default-11"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/segmentor/aim/default.json\nm = load("segmentor/aim")\n')),Object(l.b)("h4",{id:"u2net"},Object(l.b)("inlineCode",{parentName:"h4"},"u2net")),Object(l.b)("h5",{id:"default-12"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/segmentor/u2net/default.json\nm = load("segmentor/u2net")\n')),Object(l.b)("h5",{id:"finetune"},"finetune"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/segmentor/u2net/finetune.json\nm = load("segmentor/u2net.finetune", pretrained_ckpt=...)\n')),Object(l.b)("h5",{id:"finetune_lite"},"finetune_lite"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/segmentor/u2net/finetune_lite.json\nm = load("segmentor/u2net.finetune_lite", pretrained_ckpt=...)\n')),Object(l.b)("h5",{id:"lite-1"},"lite"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/segmentor/u2net/lite.json\nm = load("segmentor/u2net.lite")\n')),Object(l.b)("h5",{id:"refine"},"refine"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/segmentor/u2net/refine.json\nm = load("segmentor/u2net.refine", lv1_model_ckpt_path=...)\n')),Object(l.b)("h5",{id:"refine_lite"},"refine_lite"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/segmentor/u2net/refine_lite.json\nm = load("segmentor/u2net.refine_lite", lv1_model_ckpt_path=...)\n')),Object(l.b)("h3",{id:"ssl"},Object(l.b)("inlineCode",{parentName:"h3"},"ssl")),Object(l.b)("h4",{id:"dino"},Object(l.b)("inlineCode",{parentName:"h4"},"dino")),Object(l.b)("h5",{id:"default-13"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/ssl/dino/default.json\nm = load("ssl/dino", img_size=...)\n')),Object(l.b)("h3",{id:"style_transfer"},Object(l.b)("inlineCode",{parentName:"h3"},"style_transfer")),Object(l.b)("h4",{id:"adain"},Object(l.b)("inlineCode",{parentName:"h4"},"adain")),Object(l.b)("h5",{id:"default-14"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/style_transfer/adain/default.json\nm = load("style_transfer/adain")\n')),Object(l.b)("h3",{id:"vae"},Object(l.b)("inlineCode",{parentName:"h3"},"vae")),Object(l.b)("h4",{id:"siren-1"},Object(l.b)("inlineCode",{parentName:"h4"},"siren")),Object(l.b)("h5",{id:"default-15"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/vae/siren/default.json\nm = load("vae/siren", img_size=...)\n')),Object(l.b)("h5",{id:"gray-3"},"gray"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/vae/siren/gray.json\nm = load("vae/siren.gray", img_size=...)\n')),Object(l.b)("h4",{id:"style"},Object(l.b)("inlineCode",{parentName:"h4"},"style")),Object(l.b)("h5",{id:"default-16"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/vae/style/default.json\nm = load("vae/style", img_size=...)\n')),Object(l.b)("h5",{id:"gray-4"},"gray"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/vae/style/gray.json\nm = load("vae/style.gray", img_size=...)\n')),Object(l.b)("h4",{id:"vanilla-1"},Object(l.b)("inlineCode",{parentName:"h4"},"vanilla")),Object(l.b)("h5",{id:"2d"},"2d"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/vae/vanilla/2d.json\nm = load("vae/vanilla.2d", img_size=...)\n')),Object(l.b)("h5",{id:"2d_gray"},"2d_gray"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/vae/vanilla/2d_gray.json\nm = load("vae/vanilla.2d_gray", img_size=...)\n')),Object(l.b)("h5",{id:"default-17"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/vae/vanilla/default.json\nm = load("vae/vanilla", img_size=...)\n')),Object(l.b)("h5",{id:"gray-5"},"gray"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/vae/vanilla/gray.json\nm = load("vae/vanilla.gray", img_size=...)\n')),Object(l.b)("h4",{id:"vq"},Object(l.b)("inlineCode",{parentName:"h4"},"vq")),Object(l.b)("h5",{id:"default-18"},"default"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/vae/vq/default.json\nm = load("vae/vq", img_size=...)\n')),Object(l.b)("h5",{id:"gray-6"},"gray"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/vae/vq/gray.json\nm = load("vae/vq.gray", img_size=...)\n')),Object(l.b)("h5",{id:"gray_lite"},"gray_lite"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/vae/vq/gray_lite.json\nm = load("vae/vq.gray_lite", img_size=...)\n')),Object(l.b)("h5",{id:"lite-2"},"lite"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# cflearn/api/zoo/configs/vae/vq/lite.json\nm = load("vae/vq.lite", img_size=...)\n')))}m.isMDXComponent=!0},96:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return O}));var n=a(0),i=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function b(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=i.a.createContext({}),s=function(e){var t=i.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=s(e.components);return i.a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,r=e.parentName,o=b(e,["components","mdxType","originalType","parentName"]),p=s(a),d=n,O=p["".concat(r,".").concat(d)]||p[d]||m[d]||l;return a?i.a.createElement(O,c(c({ref:t},o),{},{components:a})):i.a.createElement(O,c({ref:t},o))}));function O(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,r=new Array(l);r[0]=d;var c={};for(var b in t)hasOwnProperty.call(t,b)&&(c[b]=t[b]);c.originalType=e,c.mdxType="string"==typeof e?e:n,r[1]=c;for(var o=2;o<l;o++)r[o]=a[o];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},97:function(e,t,a){"use strict";function n(e){var t,a,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(i&&(i+=" "),i+=a);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}t.a=function(){for(var e,t,a=0,i="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(i&&(i+=" "),i+=t);return i}}}]);