(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{105:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=i.a.createContext({}),p=function(e){var t=i.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=p(e.components);return i.a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},O=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,o=b(e,["components","mdxType","originalType","parentName"]),s=p(n),O=a,u=s["".concat(r,".").concat(O)]||s[O]||m[O]||l;return n?i.a.createElement(u,c(c({ref:t},o),{},{components:n})):i.a.createElement(u,c({ref:t},o))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=O;var c={};for(var b in t)hasOwnProperty.call(t,b)&&(c[b]=t[b]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var o=2;o<l;o++)r[o]=n[o];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}O.displayName="MDXCreateElement"},106:function(e,t,n){"use strict";function a(e){var t,n,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(i&&(i+=" "),i+=n);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}t.a=function(){for(var e,t,n=0,i="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(i&&(i+=" "),i+=t);return i}},111:function(e,t,n){"use strict";var a=n(0),i=n(112);t.a=function(){const e=Object(a.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},112:function(e,t,n){"use strict";var a=n(0);const i=Object(a.createContext)(void 0);t.a=i},114:function(e,t,n){"use strict";var a=n(0),i=n.n(a),l=n(111),r=n(106),c=n(52),b=n.n(c);const o=37,p=39;t.a=function(e){const{lazy:t,block:n,children:c,defaultValue:s,values:m,groupId:O,className:u}=e,{tabGroupChoices:d,setTabGroupChoices:j}=Object(l.a)(),[N,f]=Object(a.useState)(s);if(null!=O){const e=d[O];null!=e&&e!==N&&m.some((t=>t.value===e))&&f(e)}const g=e=>{f(e),null!=O&&j(O,e)},h=[];return i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(r.a)("tabs",{"tabs--block":n},u)},m.map((({value:e,label:t})=>i.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":N===e,className:Object(r.a)("tabs__item",b.a.tabItem,{"tabs__item--active":N===e}),key:e,ref:e=>h.push(e),onKeyDown:e=>{((e,t,n)=>{switch(n.keyCode){case p:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case o:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(h,e.target,e)},onFocus:()=>g(e),onClick:()=>{g(e)}},t)))),t?Object(a.cloneElement)(c.filter((e=>e.props.value===N))[0],{className:"margin-vert--md"}):i.a.createElement("div",{className:"margin-vert--md"},c.map(((e,t)=>Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}},115:function(e,t,n){"use strict";var a=n(3),i=n(0),l=n.n(i);t.a=function({children:e,hidden:t,className:n}){return l.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:t,className:n}),e)}},91:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return m}));var a=n(3),i=n(7),l=(n(0),n(105)),r=n(114),c=n(115),b={id:"configurations",title:"Configurations"},o={unversionedId:"getting-started/configurations",id:"getting-started/configurations",isDocsHomePage:!1,title:"Configurations",description:"Although it is possible to get a rather good performance with default configurations, performance might be gained easily by specifying configurations with our prior knowledges.",source:"@site/docs\\getting-started\\configurations.md",slug:"/getting-started/configurations",permalink:"/carefree-learn-doc/docs/getting-started/configurations",version:"current",lastUpdatedAt:1605876656,sidebar:"docs",previous:{title:"Quick Start",permalink:"/carefree-learn-doc/docs/getting-started/quick-start"},next:{title:"AutoML",permalink:"/carefree-learn-doc/docs/user-guides/auto-ml"}},p=[{value:"Environment",id:"environment",children:[]},{value:"Specify Configurations",id:"specify-configurations",children:[]},{value:"High Level APIs",id:"high-level-apis",children:[{value:"Elements",id:"elements",children:[]},{value:"make",id:"make",children:[]}]},{value:"Configuration Details",id:"configuration-details",children:[{value:"metrics",id:"metrics",children:[]},{value:"optimizers",id:"optimizers",children:[]},{value:"cv_split",id:"cv_split",children:[]}]}],s={rightToc:p};function m(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Although it is possible to get a rather good performance with default configurations, performance might be gained easily by specifying configurations with our prior knowledges."),Object(l.b)("p",null,"We've already mentioned the basic ideas on how to configure ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," in ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"../#configurations"}),Object(l.b)("inlineCode",{parentName:"a"},"Introduction")),", so we will focus on introducing how to actually configure ",Object(l.b)("inlineCode",{parentName:"p"},"Environment")," in this page. "),Object(l.b)("h2",{id:"environment"},"Environment"),Object(l.b)("p",null,"In many high-level Machine Learning modules (e.g. ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://scikit-learn.org/stable/"}),"scikit-learn"),"), configurations are directly specified by using args and kwargs to instantiate an object of the corresponding algorithm. In ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn"),", however, since we've wrapped many procedures together (in ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"../design-principles#pipeline"}),Object(l.b)("inlineCode",{parentName:"a"},"Pipeline")),") to provide a more ",Object(l.b)("em",{parentName:"p"},"carefree")," usage, we cannot put all those configurations in the definition of the class because that will be too much and too messy. Instead, we will share an ",Object(l.b)("inlineCode",{parentName:"p"},"Environment")," instance across different components to specify their configurations."),Object(l.b)("p",null,"There are several advantages by doing so, as listed below:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"It's much more flexible and easier to extend."),Object(l.b)("li",{parentName:"ul"},"It's much easier to reproduce other's work, because a single JSON file will be enough."),Object(l.b)("li",{parentName:"ul"},"It's much easier to share configurations between different modules. This is especially helpful in ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," because we've tried hard to do elegant abstractions, which lead us to implement many individual modules to handle different problems. In this case, some ",Object(l.b)("em",{parentName:"li"},"global")," information will be hard to access if we don't share configurations.")),Object(l.b)("div",{className:"admonition admonition-info alert alert--info"},Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"In most cases we won't instantiate an ",Object(l.b)("inlineCode",{parentName:"p"},"Environment")," instance explicitly, but will leverage ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"#high-level-apis"}),"High Level APIs")," (e.g. ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"#elements"}),"Elements")," & ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"#make"}),"cflearn.make"),") to make things easier and clearer."))),Object(l.b)("h2",{id:"specify-configurations"},"Specify Configurations"),Object(l.b)("p",null,"There are two ways to specify configurations in ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn"),": directly with a Python dict or indirectly with a JSON file."),Object(l.b)(r.a,{defaultValue:"dict",values:[{label:"Python dict",value:"dict"},{label:"JSON file",value:"json"}],mdxType:"Tabs"},Object(l.b)(c.a,{value:"dict",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\n# specify any configurations\nconfig = {"foo": 0, "dummy": 1}\nfcnn = cflearn.make(**config)\n\nprint(fcnn.config)  # {"foo": 0, "dummy": 1, ...}\n'))),Object(l.b)(c.a,{value:"json",mdxType:"TabItem"},Object(l.b)("p",null,"In order to use a JSON file as configuration, suppose you want to run ",Object(l.b)("inlineCode",{parentName:"p"},"my_script.py"),", and it contains the following codes:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\nconfig = "./configs/basic.json"\nincrement_config = {"foo": 2}\nfcnn = cflearn.make(config=config, increment_config=increment_config)\n')),Object(l.b)("p",null,"Since ",Object(l.b)("inlineCode",{parentName:"p"},"config")," is set to ",Object(l.b)("inlineCode",{parentName:"p"},'"./configs/basic.json"'),", the file structure should be:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"-- my_script.py\n-- configs\n |-- basic.json\n")),Object(l.b)("p",null,"Suppose ",Object(l.b)("inlineCode",{parentName:"p"},"basic.json")," contains following stuffs:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "foo": 0,\n    "dummy": 1\n}\n')),Object(l.b)("p",null,"Then the output of ",Object(l.b)("inlineCode",{parentName:"p"},"print(fcnn.config)")," should be:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'{"foo": 2, "dummy": 1, ...}\n')),Object(l.b)("p",null,"It is OK to get rid of ",Object(l.b)("inlineCode",{parentName:"p"},"increment_config"),", in which case the configuration will be completely controlled by ",Object(l.b)("inlineCode",{parentName:"p"},"basic.json"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\nconfig = "./configs/basic.json"\nfcnn = cflearn.make(config=config)\n\nprint(fcnn.config)  # {"foo": 0, "dummy": 1, ...}\n')))),Object(l.b)("h2",{id:"high-level-apis"},"High Level APIs"),Object(l.b)("p",null,"In order to manage default configurations, ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," introduced ",Object(l.b)("inlineCode",{parentName:"p"},"Elements"),", which is a ",Object(l.b)("inlineCode",{parentName:"p"},"NamedTuple"),", to organize the logics. With the help of ",Object(l.b)("inlineCode",{parentName:"p"},"Elements"),", defining high-level APIs could be fairly easy and straight forward."),Object(l.b)("h3",{id:"elements"},"Elements"),Object(l.b)("p",null,"Since some fields in ",Object(l.b)("inlineCode",{parentName:"p"},"Elements")," need to be inferenced with other information, their ",Object(l.b)("inlineCode",{parentName:"p"},"default")," values are ones assigned in ",Object(l.b)("inlineCode",{parentName:"p"},"Elements.make"),"."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'class Elements(NamedTuple):\n    model: str = "fcnn"\n    task_type: Optional[task_type_type] = None\n    use_simplify_data: bool = False\n    data_config: Optional[Dict[str, Any]] = None\n    delim: Optional[str] = None\n    has_column_names: Optional[bool] = None\n    read_config: Optional[Dict[str, Any]] = None\n    batch_size: int = 128\n    cv_split: Optional[Union[float, int]] = None\n    logging_folder: Optional[str] = None\n    logging_file: Optional[str] = None\n    use_amp: bool = False\n    min_epoch: Optional[int] = None\n    num_epoch: Optional[int] = None\n    max_epoch: Optional[int] = None\n    fixed_epoch: Optional[int] = None\n    max_snapshot_file: int = 5\n    clip_norm: float = 0.0\n    ema_decay: float = 0.0\n    ts_config: Optional[TimeSeriesConfig] = None\n    aggregation: Optional[str] = None\n    aggregation_config: Optional[Dict[str, Any]] = None\n    ts_label_collator_config: Optional[Dict[str, Any]] = None\n    model_config: Optional[Dict[str, Any]] = None\n    metrics: Union[str, List[str]] = "auto"\n    metric_config: Optional[Dict[str, Any]] = None\n    optimizer: Optional[str] = None\n    scheduler: Optional[str] = None\n    optimizer_config: Optional[Dict[str, Any]] = None\n    scheduler_config: Optional[Dict[str, Any]] = None\n    optimizers: Optional[Dict[str, Any]] = None\n    trigger_logging: bool = False\n    trial: Optional[Trial] = None\n    tracker_config: Optional[Dict[str, Any]] = None\n    cuda: Optional[Union[int, str]] = None\n    verbose_level: int = 2\n    use_timing_context: bool = True\n    use_tqdm: bool = True\n    extra_config: Optional[Dict[str, Any]] = None\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"model"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},'"fcnn"'),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify which model we're going to use."),Object(l.b)("li",{parentName:"ul"},"Currently ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," supports:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'"linear"'),", ",Object(l.b)("inlineCode",{parentName:"li"},'"fcnn"'),", ",Object(l.b)("inlineCode",{parentName:"li"},'"wnd"'),", ",Object(l.b)("inlineCode",{parentName:"li"},'"nnb"'),", ",Object(l.b)("inlineCode",{parentName:"li"},'"ndt"'),", ",Object(l.b)("inlineCode",{parentName:"li"},'"tree_linear"'),", ",Object(l.b)("inlineCode",{parentName:"li"},'"tree_stack"'),", ",Object(l.b)("inlineCode",{parentName:"li"},'"tree_dnn"')," and ",Object(l.b)("inlineCode",{parentName:"li"},'"ddr"')," for basic usages."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'"rnn"')," and ",Object(l.b)("inlineCode",{parentName:"li"},'"transformer"')," for time series usages."))))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"task_type"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the task type.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If not provided, ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," will try to inference it with the help of ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-data"),"."))))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"use_simplify_data"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"False"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether use a simplified ",Object(l.b)("inlineCode",{parentName:"li"},"TabularData")," (without any pre-processing)."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"data_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"kwargs used in ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/carefree0910/carefree-data/blob/82f158be82ced404a1f4ac37e7a669a50470b109/cfdata/tabular/wrapper.py#L31"}),Object(l.b)("inlineCode",{parentName:"a"},"cfdata.tabular.TabularData")),"."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"delim"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the delimiter of the dataset file.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If not provided, ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," will try to inference it with the help of ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-data"),"."))),Object(l.b)("li",{parentName:"ul"},"Only take effects when we are using file datasets."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"has_column_names"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether the elements of the first row are column names.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If not provided, ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," will try to inference it with the help of ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-data"),"."))),Object(l.b)("li",{parentName:"ul"},"Only take effects when we are using file datasets."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"read_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"kwargs used in ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/carefree0910/carefree-data/blob/82f158be82ced404a1f4ac37e7a669a50470b109/cfdata/tabular/wrapper.py#L769"}),Object(l.b)("inlineCode",{parentName:"a"},"cfdata.tabular.TabularData.read")),"."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"batch_size"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"128"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the number of samples in each batch."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"cv_split"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the split of the cross validation dataset.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("inlineCode",{parentName:"li"},"cv_split < 1"),", it will be the 'ratio' comparing to the whole dataset."),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("inlineCode",{parentName:"li"},"cv_split > 1"),", it will be the exact 'size'."),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("inlineCode",{parentName:"li"},"cv_split == 1"),", ",Object(l.b)("inlineCode",{parentName:"li"},'cv_split == "ratio" if isinstance(cv_split, float) else "size"')))),Object(l.b)("li",{parentName:"ul"},"If not provided, ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," will try to inference it with ",Object(l.b)("inlineCode",{parentName:"li"},"min_cv_split"),", ",Object(l.b)("inlineCode",{parentName:"li"},"max_cv_split")," and ",Object(l.b)("inlineCode",{parentName:"li"},"max_cv_split_ratio"),". See ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"#cv_split"}),"cv_split")," for more details."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"logging_folder"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the logging folder."),Object(l.b)("li",{parentName:"ul"},"If not provided, ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," will try to inference it automatically."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"logging_file"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the logging file."),Object(l.b)("li",{parentName:"ul"},"If not provided, ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," will try to inference it automatically."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"use_amp"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"False"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether use the ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://pytorch.org/docs/stable/amp.html"}),Object(l.b)("inlineCode",{parentName:"a"},"amp"))," technique or not."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"min_epoch"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"0"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the minimum number of epoch."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"num_epoch"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"40"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify number of epoch. "),Object(l.b)("li",{parentName:"ul"},"Notice that in most cases this will not be the final epoch number."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"max_epoch"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"200"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the maximum number of epoch."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"fixed_epoch"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the (fixed) number of epoch."),Object(l.b)("li",{parentName:"ul"},"If sepcified, then ",Object(l.b)("inlineCode",{parentName:"li"},"min_epoch"),", ",Object(l.b)("inlineCode",{parentName:"li"},"num_epoch")," and ",Object(l.b)("inlineCode",{parentName:"li"},"max_epoch")," will all be set to it."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"max_snapshot_file"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"5"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the maximum number of checkpoint files we could save during training."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"clip_norm"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"0.0"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Given a gradient ",Object(l.b)("inlineCode",{parentName:"li"},"g"),", and the ",Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"clip_norm"))," value, we will normalize ",Object(l.b)("inlineCode",{parentName:"li"},"g")," so that its L2-norm is less than or equal to ",Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"clip_norm")),"."),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("inlineCode",{parentName:"li"},"0.0"),", then no gradient clip will be performed."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"ema_decay"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"0.0"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"When training a model, it is often beneficial to maintain ",Object(l.b)("strong",{parentName:"li"},"E"),"xponential ",Object(l.b)("strong",{parentName:"li"},"M"),"oving ",Object(l.b)("strong",{parentName:"li"},"A"),"verages with a certain decay rate (",Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"ema_decay")),") of the trained parameters. Evaluations that use averaged parameters sometimes produce significantly better results than the final trained values."),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("inlineCode",{parentName:"li"},"0.0"),", then no EMA will be used."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"ts_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the time series config (experimental)."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"aggregation"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the aggregation used in time series tasks (experimental)."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"aggregation_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the configuration of aggregation used in time series tasks (experimental)."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"ts_label_collator_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the configuration of the label collator used in time series tasks (experimental)."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"model_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Configurations used in ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"../design-principles#model"}),Object(l.b)("inlineCode",{parentName:"a"},"Model")),"."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"metrics"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},'"auto"'),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify which metric(s) are we going to use to monitor our training process"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"metric_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the fine grained configurations of metrics. See ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"#metrics"}),Object(l.b)("inlineCode",{parentName:"a"},"metrics"))," for more details."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"optimizer"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},'"adam"'),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify which optimizer will be used."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"scheduler"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},'"plateau"'),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify which learning rate scheduler will be used."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"optimizer_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify optimizer's configuration."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"scheduler_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify scheduler's configuration."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"optimizers"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the fine grained configurations of optimizers and schedulers. See ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"#optimizers"}),Object(l.b)("inlineCode",{parentName:"a"},"optimizers"))," for more details."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"trigger_logging"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"False"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Whether log messages into a log file."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"trial"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"optuna.trial.Trial"),", should not be set manually because this argument should only be set in ",Object(l.b)("inlineCode",{parentName:"li"},"cflearn.optuna_tune")," internally."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"tracker_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the configuration of ",Object(l.b)("inlineCode",{parentName:"li"},"cftool.ml.Tracker"),"."),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("inlineCode",{parentName:"li"},"None"),", then ",Object(l.b)("inlineCode",{parentName:"li"},"Tracker")," will not be used."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"cuda"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the working GPU."),Object(l.b)("li",{parentName:"ul"},"If not provided, ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," will try to inference it automatically."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"verbose_level"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"2"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the verbose level."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"use_timing_context"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"True"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Whether utilize the ",Object(l.b)("inlineCode",{parentName:"li"},"timing_context")," or not."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"use_tqdm"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"True"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Whether utilize the ",Object(l.b)("inlineCode",{parentName:"li"},"tqdm")," progress bar or not."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"extra_config"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Other configurations.")))),Object(l.b)("h3",{id:"make"},"make"),Object(l.b)("p",null,"In order to provide out of the box tools, ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," implements high level APIs for training, evaluating, distributed, HPO, etc. In this section we'll introduce ",Object(l.b)("inlineCode",{parentName:"p"},"cflearn.make")," because other APIs depend on it more or less."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'def make(model: str = "fcnn", **kwargs: Any) -> Pipeline:\n    kwargs["model"] = model\n    return Pipeline(Environment.from_elements(Elements.make(kwargs)))\n')),Object(l.b)("h2",{id:"configuration-details"},"Configuration Details"),Object(l.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(l.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"This section is a work in progress."))),Object(l.b)("p",null,"In this section we'll introduce some default configurations used in ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn"),", as well as how to configure them (with some examples). The default settings have already been tuned on variety tabular datasets and should be able to achieve a good performance, as mentioned at the beginning."),Object(l.b)("h3",{id:"metrics"},"metrics"),Object(l.b)("p",null,"By default:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mae")," & ",Object(l.b)("inlineCode",{parentName:"li"},"mse")," is used for regression tasks, while ",Object(l.b)("inlineCode",{parentName:"li"},"auc")," & ",Object(l.b)("inlineCode",{parentName:"li"},"acc")," is used for classification tasks."),Object(l.b)("li",{parentName:"ul"},"An EMA with ",Object(l.b)("inlineCode",{parentName:"li"},"decay = 0.1")," will be used."),Object(l.b)("li",{parentName:"ul"},"Every metrics will be treated as equal. ")),Object(l.b)("p",null,"So ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," will construct the following configurations for you (take classification tasks as an example):"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    ...,\n    "trainer_config": {\n        ...,\n        "metric_config": {\n            "decay": 0.1,\n            "types": ["auc", "acc"],\n            "weights": {"auc": 1.0, "acc": 1.0}\n        }\n    }\n}\n')),Object(l.b)("p",null,"It's worth mentioning that ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," also supports using losses as metrics:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    ...,\n    "trainer_config": {\n        ...,\n        "metric_config": {\n            "decay": 0.1,\n            "types": ["loss"]\n        }\n    }\n}\n')),Object(l.b)("h3",{id:"optimizers"},"optimizers"),Object(l.b)("p",null,"By default, ",Object(l.b)("strong",{parentName:"p"},"all")," parameters will be optimized via one single optimizer, so ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," will construct the following configurations for you:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    ...,\n    "trainer_config": {\n        ...,\n        "optimizers": {\n            "all": {\n                "optimizer": "adam",\n                "optimizer_config": {"lr": 1e-3},\n                "scheduler": "plateau",\n                "scheduler_config": {"mode": "max", ...}\n            }\n        }\n    }\n}\n')),Object(l.b)("p",null,"If we need to apply different optimizers on different parameters (which is quite common in GANs), we need to walk through the following two steps:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Define a ",Object(l.b)("inlineCode",{parentName:"li"},"property")," in your ",Object(l.b)("inlineCode",{parentName:"li"},"Model")," which returns a list of parameters you want to optimize."),Object(l.b)("li",{parentName:"ul"},"Define the corresponding optimizer configs with ",Object(l.b)("inlineCode",{parentName:"li"},"property"),"'s name as the dictionary key.")),Object(l.b)("p",null,"Here's an example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'from cflearn.models.base import ModelBase\n\n@ModelBase.register("foo")\nclass Foo(ModelBase):\n    @property\n    def params1(self):\n        return [self.p1, self.p2, ...]\n    \n    @property\n    def params2(self):\n        return [self.p1, self.p3, ...]\n')),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    ...,\n    "trainer_config": {\n        ...,\n        "optimizers": {\n            "params1": {\n                "optimizer": "adam",\n                "optimizer_config": {"lr": 3e-4},\n                "scheduler": null\n            },\n            "params2": {\n                "optimizer": "nag",\n                "optimizer_config": {"lr": 1e-3, "momentum": 0.9},\n                "scheduler": "plateau",\n                "scheduler_config": {"mode": "max", ...}\n            }\n        }\n    }\n}\n')),Object(l.b)("h3",{id:"cv_split"},"cv_split"),Object(l.b)("p",null,"It is important to split out a cross validation dataset from the training dataset if it is not explicitly provided, because a cv set could help us monitor the generalization error, hence prevent overfitting. However, unlike unstructured datasets, the sample number of tabular datasets could vary dramatically (roughly ",Object(l.b)("span",Object(a.a)({parentName:"p"},{className:"math math-inline"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"katex"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"katex-mathml"}),Object(l.b)("math",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(l.b)("semantics",{parentName:"math"},Object(l.b)("mrow",{parentName:"semantics"},Object(l.b)("mn",{parentName:"mrow"},"1"),Object(l.b)("msup",{parentName:"mrow"},Object(l.b)("mn",{parentName:"msup"},"0"),Object(l.b)("mn",{parentName:"msup"},"2"))),Object(l.b)("annotation",Object(a.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"10^2")))),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"base"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"strut",style:{height:"0.8141079999999999em",verticalAlign:"0em"}})),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"mord"}),"1"),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"mord"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"mord"}),"0"),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"msupsub"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"vlist-t"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"vlist-r"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"vlist",style:{height:"0.8141079999999999em"}}),Object(l.b)("span",Object(a.a)({parentName:"span"},{style:{top:"-3.063em",marginRight:"0.05em"}}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"mord mtight"}),"2"))))))))))))," ~ ",Object(l.b)("span",Object(a.a)({parentName:"p"},{className:"math math-inline"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"katex"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"katex-mathml"}),Object(l.b)("math",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(l.b)("semantics",{parentName:"math"},Object(l.b)("mrow",{parentName:"semantics"},Object(l.b)("mn",{parentName:"mrow"},"1"),Object(l.b)("msup",{parentName:"mrow"},Object(l.b)("mn",{parentName:"msup"},"0"),Object(l.b)("mn",{parentName:"msup"},"8"))),Object(l.b)("annotation",Object(a.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"10^8")))),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"base"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"strut",style:{height:"0.8141079999999999em",verticalAlign:"0em"}})),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"mord"}),"1"),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"mord"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"mord"}),"0"),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"msupsub"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"vlist-t"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"vlist-r"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"vlist",style:{height:"0.8141079999999999em"}}),Object(l.b)("span",Object(a.a)({parentName:"span"},{style:{top:"-3.063em",marginRight:"0.05em"}}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(l.b)("span",Object(a.a)({parentName:"span"},{className:"mord mtight"}),"8")))))))))))),"). Therefore, it is not trivial to decide how many samples should we use for cross validation. In ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn"),", we use ",Object(l.b)("inlineCode",{parentName:"p"},"min_cv_split"),", ",Object(l.b)("inlineCode",{parentName:"p"},"max_cv_split")," and ",Object(l.b)("inlineCode",{parentName:"p"},"max_cv_split_ratio")," to help us make this decision automatically:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"default_cv_split = 0.1\ncv_split_num = int(round(default_cv_split * num_data))\ncv_split_num = max(self.min_cv_split, cv_split_num)\nmax_cv_split = int(round(num_data * self.max_cv_split_ratio))\nmax_cv_split = min(self.max_cv_split, max_cv_split)\nreturn min(cv_split_num, max_cv_split)\n")),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"default settings")),Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("ul",{parentName:"div"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"min_cv_split"),": 100"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"max_cv_split"),": 10000"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"max_cv_split_ratio"),": 0.5")))))}m.isMDXComponent=!0}}]);