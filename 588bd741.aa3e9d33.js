(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{109:function(e,a,t){"use strict";t.d(a,"a",(function(){return p})),t.d(a,"b",(function(){return u}));var n=t(0),r=t.n(n);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function c(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?c(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),b=function(e){var a=r.a.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=b(e.components);return r.a.createElement(s.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},m=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=b(t),m=n,u=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return t?r.a.createElement(u,l(l({ref:a},s),{},{components:t})):r.a.createElement(u,l({ref:a},s))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,c=new Array(i);c[0]=m;var l={};for(var o in a)hasOwnProperty.call(a,o)&&(l[o]=a[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,c[1]=l;for(var s=2;s<i;s++)c[s]=t[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},110:function(e,a,t){"use strict";function n(e){var a,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(a=0;a<e.length;a++)e[a]&&(t=n(e[a]))&&(r&&(r+=" "),r+=t);else for(a in e)e[a]&&(r&&(r+=" "),r+=a);return r}a.a=function(){for(var e,a,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(a=n(e))&&(r&&(r+=" "),r+=a);return r}},114:function(e,a,t){"use strict";var n=t(0),r=t(115);a.a=function(){var e=Object(n.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},115:function(e,a,t){"use strict";var n=t(0),r=Object(n.createContext)(void 0);a.a=r},117:function(e,a,t){"use strict";var n=t(0),r=t.n(n),i=t(114),c=t(110),l=t(52),o=t.n(l),s=37,b=39;a.a=function(e){var a=e.lazy,t=e.block,l=e.children,p=e.defaultValue,d=e.values,m=e.groupId,u=e.className,f=Object(i.a)(),O=f.tabGroupChoices,j=f.setTabGroupChoices,g=Object(n.useState)(p),h=g[0],v=g[1];if(null!=m){var N=O[m];null!=N&&N!==h&&d.some((function(e){return e.value===N}))&&v(N)}var y=function(e){v(e),null!=m&&j(m,e)},w=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":t},u)},d.map((function(e){var a=e.value,t=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":h===a,className:Object(c.a)("tabs__item",o.a.tabItem,{"tabs__item--active":h===a}),key:a,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,a,t){switch(t.keyCode){case b:!function(e,a){var t=e.indexOf(a)+1;e[t]?e[t].focus():e[0].focus()}(e,a);break;case s:!function(e,a){var t=e.indexOf(a)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,a)}}(w,e.target,e)},onFocus:function(){return y(a)},onClick:function(){y(a)}},t)}))),a?Object(n.cloneElement)(l.filter((function(e){return e.props.value===h}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},l.map((function(e,a){return Object(n.cloneElement)(e,{key:a,hidden:e.props.value!==h})}))))}},118:function(e,a,t){"use strict";var n=t(3),r=t(0),i=t.n(r);a.a=function(e){var a=e.children,t=e.hidden,r=e.className;return i.a.createElement("div",Object(n.a)({role:"tabpanel"},{hidden:t,className:r}),a)}},86:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return o})),t.d(a,"metadata",(function(){return s})),t.d(a,"rightToc",(function(){return b})),t.d(a,"default",(function(){return d}));var n=t(3),r=t(7),i=(t(0),t(109)),c=t(117),l=t(118),o={id:"quick-start",title:"Quick Start"},s={unversionedId:"getting-started/quick-start",id:"getting-started/quick-start",isDocsHomePage:!1,title:"Quick Start",description:"In carefree-learn, it's easy to train and serialize a model for all tasks.",source:"@site/docs/getting-started/quick-start.md",slug:"/getting-started/quick-start",permalink:"/carefree-learn-doc/docs/getting-started/quick-start",version:"current",lastUpdatedAt:1633761865,sidebar:"docs",previous:{title:"Installation",permalink:"/carefree-learn-doc/docs/getting-started/installation"},next:{title:"Configurations",permalink:"/carefree-learn-doc/docs/getting-started/configurations"}},b=[{value:"Training",id:"training",children:[{value:"Machine Learning \ud83d\udcc8",id:"machine-learning-",children:[]},{value:"Computer Vision \ud83d\uddbc\ufe0f",id:"computer-vision-\ufe0f",children:[]}]},{value:"Serializing",id:"serializing",children:[{value:"Saving",id:"saving",children:[]},{value:"Loading",id:"loading",children:[]}]}],p={rightToc:b};function d(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn"),", it's easy to train and serialize a model ",Object(i.b)("strong",{parentName:"p"},"for all tasks"),"."),Object(i.b)("h2",{id:"training"},"Training"),Object(i.b)("h3",{id:"machine-learning-"},"Machine Learning \ud83d\udcc8"),Object(i.b)(c.a,{defaultValue:"numpy",values:[{label:"With NumPy",value:"numpy"},{label:"With File",value:"file"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"numpy",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\nfrom cfdata.tabular import TabularDataset\n\nx, y = TabularDataset.iris().xy\nm = cflearn.api.fit_ml(x, y, carefree=True)\n# Predict logits\ninference_data = cflearn.ml.MLInferenceData(x, y)\nm.predict(inference_data)[cflearn.PREDICTIONS_KEY]\n# Evaluate performance\ncflearn.ml.evaluate(inference_data, pipelines=m, metrics=["acc", "auc"])\n')),Object(i.b)("p",null,"This yields:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"================================================================================================================================\n|        metrics         |                       acc                        |                       auc                        |\n--------------------------------------------------------------------------------------------------------------------------------\n|                        |      mean      |      std       |     score      |      mean      |      std       |     score      |\n--------------------------------------------------------------------------------------------------------------------------------\n|          fcnn          |    0.980000    |    0.000000    |    0.980000    |    0.998933    |    0.000000    |    0.998933    |\n================================================================================================================================\n"))),Object(i.b)(l.a,{value:"file",mdxType:"TabItem"},Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," can also easily fit / predict / evaluate directly on files (",Object(i.b)("strong",{parentName:"p"},"file-in, file-out"),"). Suppose we have an ",Object(i.b)("inlineCode",{parentName:"p"},"xor.txt")," file with following contents:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"0,0,0\n0,1,1\n1,0,1\n1,1,0\n")),Object(i.b)("p",null,"Then ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," can be utilized with only few lines of code:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\ny_train = None\nx_train = x_valid = "xor.txt"\nargs = x_train, y_train, x_valid\ndata_config = {"read_config": dict(delim=",", has_column_names=False)}\nm = cflearn.api.fit_ml(*args, carefree=True, data_config=data_config)\n# `contains_labels` is set to True because we\'re evaluating on training set\ninference_data = cflearn.ml.MLInferenceData("xor.txt")\ncflearn.ml.evaluate(inference_data, contains_labels=True, pipelines=m, metrics=["acc", "auc"])\n')),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("ul",{parentName:"div"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"delim")," refers to '",Object(i.b)("strong",{parentName:"li"},"delimiter"),"', and ",Object(i.b)("inlineCode",{parentName:"li"},"has_column_names")," refers to whether the file has column names (or, header) or not."),Object(i.b)("li",{parentName:"ul"},"Please refer to ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/carefree0910/carefree-data/blob/dev/README.md"}),"carefree-data")," if you're interested in more details.")))),Object(i.b)("p",null,"This yields:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"================================================================================================================================\n|        metrics         |                       acc                        |                       auc                        |\n--------------------------------------------------------------------------------------------------------------------------------\n|                        |      mean      |      std       |     score      |      mean      |      std       |     score      |\n--------------------------------------------------------------------------------------------------------------------------------\n|          fcnn          |    1.000000    |    0.000000    |    1.000000    |    1.000000    |    0.000000    |    1.000000    |\n================================================================================================================================\n")),Object(i.b)("p",null,"When we fit from files, we can predict on either files or lists:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'key = cflearn.PREDICTIONS_KEY\ndata_base = cflearn.ml.MLInferenceData\nprint(m.predict(data_base([[0, 0]]))[key].argmax(1))   # [0]\nprint(m.predict(data_base([[0, 1]]))[key].argmax(1))   # [1]\nprint(m.predict(data_base("xor.txt"), contains_labels=True)[key].argmax(1))  # [0 1 1 0]\n')))),Object(i.b)("h3",{id:"computer-vision-\ufe0f"},"Computer Vision \ud83d\uddbc\ufe0f"),Object(i.b)(c.a,{defaultValue:"preset",values:[{label:"Preset (torchvision) Dataset",value:"preset"},{label:"Custom Image Folder Dataset",value:"custom"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"preset",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\ndata = cflearn.cv.MNISTData(transform="to_tensor")\nm = cflearn.api.resnet18_gray(10)\n# m.fit(data, cuda=0)  # If CUDA available\n# m.fit(data)          # If not\n'))),Object(i.b)(l.a,{value:"custom",mdxType:"TabItem"},Object(i.b)("p",null,"For custom image folder dataset, ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," provides a ",Object(i.b)("inlineCode",{parentName:"p"},"Preparation"),"-style API for you to prepare your data. In this demo, we'll show you how to use it for image classification tasks. Suppose we have the following file structure:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"|--- data\n   |--- labels.csv\n   |--- images\n      |-- 0.png\n      |-- 1.png\n      |-- 2.png\n      |-- 3.png\n")),Object(i.b)("p",null,"Where ",Object(i.b)("inlineCode",{parentName:"p"},"labels.csv")," file contains the labels of each image:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"0.png,positive\n1.png,negative\n2.png,positive\n3.png,negative\n")),Object(i.b)("p",null,"Then we should define a ",Object(i.b)("inlineCode",{parentName:"p"},"Preparation"),", which tells ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," how to interpret the data:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import os\nimport cflearn\n\nclass DemoPreparation(cflearn.DefaultPreparation):\n    def __init__(self):\n        self.labels = {}\n        with open("data/labels.csv", "r") as f:\n            for line in f:\n                k, v = line.strip().split(",")\n                self.labels[k] = v\n\n    def get_label(self, hierarchy):\n        """\n        `hierarchy` is a list of string, representing the file hierarchy.\n        For instance, the `hierarchy` of 0.png will be ["data", "images", "0.png"]\n        """\n        return self.labels[hierarchy[-1]]\n\n\nrs = cflearn.prepare_image_folder_data(\n    "data",\n    "data/gathered",  # This is where you want to put the prepared dataset\n    to_index=True,    # We should turn the original labels (\'positive\', \'negative\') to integer values\n    batch_size=1,\n    preparation=DemoPreparation(),\n    transform="to_tensor",\n)\n')),Object(i.b)("p",null,"It's worth mentioning that ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," will automatically achieve many common practices for you, such as:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Split out validation set properly."),Object(i.b)("li",{parentName:"ul"},"Save the mappings between indices and original labels to some ",Object(i.b)("inlineCode",{parentName:"li"},"json")," files.")),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"In addition, for classification tasks, ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," will ensure that:"),Object(i.b)("ul",{parentName:"div"},Object(i.b)("li",{parentName:"ul"},"The class distribution of validation dataset is the same as the one of training dataset."),Object(i.b)("li",{parentName:"ul"},"Validation dataset has at least one sample per class.")))),Object(i.b)("p",null,"The '",Object(i.b)("strong",{parentName:"p"},"prepared"),"' file structure will be as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"|--- data\n   |--- gathered\n      |--- train\n         |-- 0.png \n         |-- 3.png\n         |-- labels.json\n         ...\n      |--- valid\n         |-- 1.png \n         |-- 2.png\n         |-- labels.json\n         ...\n      |-- idx2labels.json\n      |-- labels2idx.json\n   ...\n")),Object(i.b)("p",null,"Where"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{"0": "negative", "1": "positive"}  // idx2labels.json\n{"negative": 0, "positive": 1}      // labels2idx.json\n\n{"/absolute/path/to/0.png": 1, "/absolute/path/to/3.png": 0}  // ./train/labels.json\n{"/absolute/path/to/2.png": 1, "/absolute/path/to/1.png": 0}  // ./valid/labels.json\n')),Object(i.b)("p",null,"After the data is prepared, we can define a model to fit it, which is fairly easy for ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"m = cflearn.api.resnet18(\n    2,              # We have two classes\n    fixed_steps=1,  # For demo purpose, we only train the model for one step\n)\nm.fit(rs.data)\n")))),Object(i.b)("h2",{id:"serializing"},"Serializing"),Object(i.b)("h3",{id:"saving"},"Saving"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," pipelines can be saved easily, into a zip file (for both ml & cv tasks) !"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'m.save("model")  # a `model.zip` file will be created\n')),Object(i.b)("p",null,"It's worth mentioning that ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," supports a two-stage style serializing:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"A ",Object(i.b)("inlineCode",{parentName:"li"},"_logs")," folder (with timestamps as its subfolders) will be created after training.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"--- _logs\n |-- 2021-08-08_16-00-24-175005\n  |-- checkpoints\n  |-- configs.json\n  |-- metrics.txt\n  ...\n |-- 2021-08-08_17-25-21-803661\n  |-- checkpoints\n  |-- configs.json\n  |-- metrics.txt\n  ...\n")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},"carefree-learn")," could therefore 'pack' the corresponding (timestamp) folder into a zip file.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'cflearn.api.pack("_logs/2021-08-08_17-25-21-803661")\n')),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"This ",Object(i.b)("inlineCode",{parentName:"p"},"pack")," API is a '",Object(i.b)("strong",{parentName:"p"},"unified"),"' API, which means you can use it to serialize either Machine Learning pipelines or Computer Vision pipelines!"))),Object(i.b)("h3",{id:"loading"},"Loading"),Object(i.b)("p",null,"Of course, loading ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," pipelines are easy as well!"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'m = cflearn.api.load("/path/to/your/zip/file")\n')),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("ul",{parentName:"div"},Object(i.b)("li",{parentName:"ul"},"This is also a '",Object(i.b)("strong",{parentName:"li"},"unified"),"' API."),Object(i.b)("li",{parentName:"ul"},"zip file exported from either ",Object(i.b)("inlineCode",{parentName:"li"},"save")," API or ",Object(i.b)("inlineCode",{parentName:"li"},"pack")," API can be loaded in this way."),Object(i.b)("li",{parentName:"ul"},"Please refer to the ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"../user-guides/production"}),"Production")," section for production usages.")))))}d.isMDXComponent=!0}}]);