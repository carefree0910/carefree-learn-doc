(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{106:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return O}));var n=a(0),i=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=i.a.createContext({}),p=function(e){var t=i.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},m=function(e){var t=p(e.components);return i.a.createElement(o.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),m=p(a),d=n,O=m["".concat(l,".").concat(d)]||m[d]||s[d]||r;return a?i.a.createElement(O,b(b({ref:t},o),{},{components:a})):i.a.createElement(O,b({ref:t},o))}));function O(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=d;var b={};for(var c in t)hasOwnProperty.call(t,c)&&(b[c]=t[c]);b.originalType=e,b.mdxType="string"==typeof e?e:n,l[1]=b;for(var o=2;o<r;o++)l[o]=a[o];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},90:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return b})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return p}));var n=a(3),i=a(7),r=(a(0),a(106)),l={id:"apis",title:"APIs"},b={unversionedId:"user-guides/apis",id:"user-guides/apis",isDocsHomePage:!1,title:"APIs",description:"carefree-learn provides many useful APIs for out-of-the-box usages.",source:"@site/docs/user-guides/apis.md",slug:"/user-guides/apis",permalink:"/carefree-learn-doc/docs/user-guides/apis",version:"current",lastUpdatedAt:1607710335,sidebar:"docs",previous:{title:"Configurations",permalink:"/carefree-learn-doc/docs/getting-started/configurations"},next:{title:"AutoML",permalink:"/carefree-learn-doc/docs/user-guides/auto-ml"}},c=[{value:"<code>cflearn.types</code>",id:"cflearntypes",children:[{value:"<code>pipelines_type</code>",id:"pipelines_type",children:[]}]},{value:"<code>cflearn.Pipeline</code>",id:"cflearnpipeline",children:[{value:"<code>fit</code>",id:"fit",children:[]},{value:"<code>predict</code>",id:"predict",children:[]},{value:"<code>predict_prob</code>",id:"predict_prob",children:[]},{value:"<code>to_pattern</code>",id:"to_pattern",children:[]}]},{value:"<code>cflearn.api.basic</code>",id:"cflearnapibasic",children:[{value:"<code>make</code>",id:"make",children:[]},{value:"<code>evaluate</code>",id:"evaluate",children:[]},{value:"<code>save</code>",id:"save",children:[]},{value:"<code>load</code>",id:"load",children:[]},{value:"<code>repeat_with</code>",id:"repeat_with",children:[]}]}],o={rightToc:c};function p(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," provides many useful APIs for out-of-the-box usages."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("ul",{parentName:"div"},Object(r.b)("li",{parentName:"ul"},"For configurations guide, please refer to the ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"../getting-started/configurations"}),"Configurations")," section."),Object(r.b)("li",{parentName:"ul"},"For development APIs, please refer to the ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"../developer-guides/customization"}),"Build Your Own Models")," section."),Object(r.b)("li",{parentName:"ul"},"For AutoML usages, please refer to the ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"auto-ml"}),"cflearn.Auto")," API."),Object(r.b)("li",{parentName:"ul"},"For production usages, please refer to the ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"production"}),"cflearn.Pack")," API."),Object(r.b)("li",{parentName:"ul"},"For distributed usages, please refer to the ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"distributed#repeat_with"}),Object(r.b)("inlineCode",{parentName:"a"},"repeat_with"))," API and the ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"distributed#experiment"}),Object(r.b)("inlineCode",{parentName:"a"},"Experiment"))," API."),Object(r.b)("li",{parentName:"ul"},"For benchmarking usages, please refer to the ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"distributed#benchmarking"}),"Benchmarking")," section.")))),Object(r.b)("h2",{id:"cflearntypes"},Object(r.b)("inlineCode",{parentName:"h2"},"cflearn.types")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Source code: ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/dev/cflearn/types.py"}),"types.py"),".")),Object(r.b)("p",null,"Define some types which are commonly used in ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn"),"."),Object(r.b)("h3",{id:"pipelines_type"},Object(r.b)("inlineCode",{parentName:"h3"},"pipelines_type")),Object(r.b)("p",null,"We'll use ",Object(r.b)("inlineCode",{parentName:"p"},"pipelines_type")," in most of the APIs of ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"pipelines_type = Union[\n    Pipeline,\n    List[Pipeline],\n    Dict[str, Pipeline],\n    Dict[str, List[Pipeline]],\n]\n")),Object(r.b)("h2",{id:"cflearnpipeline"},Object(r.b)("inlineCode",{parentName:"h2"},"cflearn.Pipeline")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Source code: ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/dev/cflearn/pipeline.py"}),"pipeline.py"),".")),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"../design-principles#pipeline"}),Object(r.b)("inlineCode",{parentName:"a"},"Pipeline"))," implement the high-level parts, other high-level APIs utilize its methods more or less."),Object(r.b)("h3",{id:"fit"},Object(r.b)("inlineCode",{parentName:"h3"},"fit")),Object(r.b)("p",null,"Method for training current ",Object(r.b)("inlineCode",{parentName:"p"},"Pipeline")," with some given data."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'def fit(\n    self,\n    x: data_type,\n    y: data_type = None,\n    x_cv: data_type = None,\n    y_cv: data_type = None,\n    *,\n    sample_weights: Optional[np.ndarray] = None,\n) -> "Pipeline":\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x")),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the training features."),Object(r.b)("li",{parentName:"ul"},"Could be either a ",Object(r.b)("inlineCode",{parentName:"li"},"ndarray")," or a ",Object(r.b)("inlineCode",{parentName:"li"},"file"),"."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"y"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the training labels."),Object(r.b)("li",{parentName:"ul"},"If ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x"))," is a ",Object(r.b)("inlineCode",{parentName:"li"},"file"),", then we should leave ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"y"))," unspecified."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x_cv"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the cross validation features (if provided)."),Object(r.b)("li",{parentName:"ul"},"If ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x"))," is a ",Object(r.b)("inlineCode",{parentName:"li"},"file"),", then ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x_cv"))," should also be a ",Object(r.b)("inlineCode",{parentName:"li"},"file")))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"y_cv"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the cross validation labels (if provided)."),Object(r.b)("li",{parentName:"ul"},"If ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x_cv"))," is a ",Object(r.b)("inlineCode",{parentName:"li"},"file"),", then we should leave ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"y_cv"))," unspecified."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"sample_weights"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the sample weights of the input data."),Object(r.b)("li",{parentName:"ul"},"If ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x"))," and ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x_cv"))," are both provided, then the length of ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"sample_weights"))," should be the sum of the length of ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x"))," and ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x_cv")),".")))),Object(r.b)("h3",{id:"predict"},Object(r.b)("inlineCode",{parentName:"h3"},"predict")),Object(r.b)("p",null,"Method for making predictions with current ",Object(r.b)("inlineCode",{parentName:"p"},"Pipeline")," on some given data."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"def predict(\n    self,\n    x: data_type,\n    *,\n    return_all: bool = False,\n    contains_labels: bool = False,\n    requires_recover: bool = True,\n    returns_probabilities: bool = False,\n    **kwargs: Any,\n) -> Union[np.ndarray, Dict[str, np.ndarray]]:\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x")),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the input features that we want to make predictions on."),Object(r.b)("li",{parentName:"ul"},"Could be either a ",Object(r.b)("inlineCode",{parentName:"li"},"ndarray")," or a ",Object(r.b)("inlineCode",{parentName:"li"},"file"),"."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"return_all"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify whether returns all the predictions."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"contains_labels"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify whether ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x"))," contains labels (if it is a file)."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"requires_recover"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"True"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify whether the model outputs need to be recovered."),Object(r.b)("li",{parentName:"ul"},"In most cases this should be left as-is."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"returns_probabilities"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify whether returns the probability predictions (if it is a classification task)."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"kwargs"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Other ",Object(r.b)("inlineCode",{parentName:"li"},"kwargs")," that will be passed into ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/carefree0910/carefree-learn/blob/79c9b7fd67fdd8fd874d1c5e85e64448b72424b9/cflearn/models/base.py#L371"}),Object(r.b)("inlineCode",{parentName:"a"},"Model.forward")),".")))),Object(r.b)("h3",{id:"predict_prob"},Object(r.b)("inlineCode",{parentName:"h3"},"predict_prob")),Object(r.b)("p",null,"Method for making probability predictions with current ",Object(r.b)("inlineCode",{parentName:"p"},"Pipeline")," on some given data."),Object(r.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This method should not be called if it is a regression task."))),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"def predict_prob(\n    self,\n    x: data_type,\n    *,\n    return_all: bool = False,\n    contains_labels: bool = False,\n    **kwargs: Any,\n) -> Union[np.ndarray, Dict[str, np.ndarray]]:\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x")),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the input features that we want to make predictions on."),Object(r.b)("li",{parentName:"ul"},"Could be either a ",Object(r.b)("inlineCode",{parentName:"li"},"ndarray")," or a ",Object(r.b)("inlineCode",{parentName:"li"},"file"),"."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"return_all"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify whether returns all the predictions."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"contains_labels"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"False"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify whether ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x"))," contains labels (if it is a file)."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"kwargs"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Other ",Object(r.b)("inlineCode",{parentName:"li"},"kwargs")," that will be passed into ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/carefree0910/carefree-learn/blob/79c9b7fd67fdd8fd874d1c5e85e64448b72424b9/cflearn/models/base.py#L371"}),Object(r.b)("inlineCode",{parentName:"a"},"Model.forward")),".")))),Object(r.b)("h3",{id:"to_pattern"},Object(r.b)("inlineCode",{parentName:"h3"},"to_pattern")),Object(r.b)("p",null,"Transform ",Object(r.b)("inlineCode",{parentName:"p"},"Pipeline")," to ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-toolkit/blob/1b406c9c142c5097ad3ed66d02a3cf9c2ae40507/cftool/ml/utils.py#L501"}),Object(r.b)("inlineCode",{parentName:"a"},"ModelPattern")),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"def to_pattern(\n    self,\n    *,\n    pre_process: Optional[Callable] = None,\n    **predict_kwargs: Any,\n) -> ModelPattern:\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"pre_process"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"If not ",Object(r.b)("inlineCode",{parentName:"li"},"None"),", we'll use it to pre-process the input data before we actually call ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#predict"}),Object(r.b)("inlineCode",{parentName:"a"},"predict")),"."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"predict_kwargs"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"kwargs")," that will be passed into ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#predict"}),Object(r.b)("inlineCode",{parentName:"a"},"predict")),".")))),Object(r.b)("h2",{id:"cflearnapibasic"},Object(r.b)("inlineCode",{parentName:"h2"},"cflearn.api.basic")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Source code: ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/dev/cflearn/api/basic.py"}),"basic.py"))),Object(r.b)("h3",{id:"make"},Object(r.b)("inlineCode",{parentName:"h3"},"make")),Object(r.b)("p",null,"General method for training neural networks with ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn"),"."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Please refer to ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"../getting-started/configurations#make"}),Object(r.b)("inlineCode",{parentName:"a"},"make"))," section for more details."))),Object(r.b)("h3",{id:"evaluate"},Object(r.b)("inlineCode",{parentName:"h3"},"evaluate")),Object(r.b)("p",null,"Used for evaluating models from ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," or from other sources."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"def evaluate(\n    x: data_type,\n    y: data_type = None,\n    *,\n    contains_labels: bool = True,\n    pipelines: Optional[pipelines_type] = None,\n    predict_config: Optional[Dict[str, Any]] = None,\n    metrics: Optional[Union[str, List[str]]] = None,\n    metric_configs: Optional[Union[Dict[str, Any], List[Dict[str, Any]]]] = None,\n    other_patterns: Optional[Dict[str, patterns_type]] = None,\n    comparer_verbose_level: Optional[int] = 1,\n) -> Comparer\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x")),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the input features that we want to evaluate on."),Object(r.b)("li",{parentName:"ul"},"Could be either a ",Object(r.b)("inlineCode",{parentName:"li"},"ndarray")," or a ",Object(r.b)("inlineCode",{parentName:"li"},"file"),", it depends on what kinds of data did you train your model with."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"y"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the input labels that we want to evaluate on."),Object(r.b)("li",{parentName:"ul"},"If ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x"))," is a ",Object(r.b)("inlineCode",{parentName:"li"},"file"),", then we should leave ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"y"))," unspecified."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"contains_labels"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"True"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify whether ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x"))," contains labels (if it is a file)."),Object(r.b)("li",{parentName:"ul"},"This should always be ",Object(r.b)("inlineCode",{parentName:"li"},"True")," because we need target labels for evaluating."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"pipelines"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the ",Object(r.b)("inlineCode",{parentName:"li"},"cflearn")," models we want to evaluate with."),Object(r.b)("li",{parentName:"ul"},"This can be used together with ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#repeat_with"}),Object(r.b)("inlineCode",{parentName:"a"},"cflearn.repeat_with")),", as shown in the ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"distributed#benchmarking"}),Object(r.b)("inlineCode",{parentName:"a"},"Benchmarking"))," section."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"predict_config"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Configs that will be passed into ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#predict"}),Object(r.b)("inlineCode",{parentName:"a"},"Pipeline.predict")),"."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"metrics"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Metrics that we'll use for evaluating."),Object(r.b)("li",{parentName:"ul"},"If not provided, then ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"pipelines"))," must be provided. In this case, we'll use metrics of the first ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"../design-principles#pipeline"}),Object(r.b)("inlineCode",{parentName:"a"},"Pipeline"))," presented in ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"pipelines"))," as our ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"metrics")),"."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"metric_configs"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Metric configs that we'll use for corresponding metrics."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"other_patterns"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Other models we want to evaluate with."),Object(r.b)("li",{parentName:"ul"},"A common use case is to compare ",Object(r.b)("inlineCode",{parentName:"li"},"cflearn")," models with ",Object(r.b)("inlineCode",{parentName:"li"},"sklearn")," models (",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#examples"}),Object(r.b)("inlineCode",{parentName:"a"},"examples")),")."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"comparer_verbose_level"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"1"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"verbose_level")," used in ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/carefree0910/carefree-toolkit/blob/1b406c9c142c5097ad3ed66d02a3cf9c2ae40507/cftool/ml/utils.py#L871"}),Object(r.b)("inlineCode",{parentName:"a"},"Comparer.compare")),".")))),Object(r.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"When utilizing ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"other_patterns")),", we need to make sure that the given ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-toolkit/blob/1b406c9c142c5097ad3ed66d02a3cf9c2ae40507/cftool/ml/utils.py#L501"}),"ModelPattern")," has ",Object(r.b)("inlineCode",{parentName:"p"},"predict_method")," that outputs 2d arrays, as illustrated ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-toolkit/blob/1b406c9c142c5097ad3ed66d02a3cf9c2ae40507/cftool/ml/utils.py#L521-L522"}),"here"),"."))),Object(r.b)("h4",{id:"examples"},"Examples"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\nimport numpy as np\nfrom cftool.ml import ModelPattern\nfrom sklearn.svm import LinearSVR\n\nx = np.random.random([1000, 10])\ny = np.random.random([1000, 1])\nm = cflearn.make("linear").fit(x, y)\nskm = LinearSVR().fit(x, y.ravel())\nsk_pattern = ModelPattern(predict_method=lambda x: skm.predict(x).reshape([-1, 1]))\ncflearn.evaluate(x, y, pipelines=m, other_patterns={"sklearn": sk_pattern})\n')),Object(r.b)("p",null,"Which yields"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"================================================================================================================================\n|        metrics         |                       mae                        |                       mse                        |\n--------------------------------------------------------------------------------------------------------------------------------\n|                        |      mean      |      std       |     score      |      mean      |      std       |     score      |\n--------------------------------------------------------------------------------------------------------------------------------\n|         linear         |    0.319494    | -- 0.000000 -- |    -0.31949    |    0.151017    | -- 0.000000 -- |    -0.15101    |\n--------------------------------------------------------------------------------------------------------------------------------\n|        sklearn         | -- 0.246084 -- | -- 0.000000 -- | -- -0.24608 -- | -- 0.083311 -- | -- 0.000000 -- | -- -0.08331 -- |\n================================================================================================================================\n")),Object(r.b)("h3",{id:"save"},Object(r.b)("inlineCode",{parentName:"h3"},"save")),Object(r.b)("p",null,"General method for saving neural networks trained with ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'def save(\n    pipelines: pipelines_type,\n    identifier: str = "cflearn",\n    saving_folder: Optional[str] = None,\n    *,\n    retain_data: bool = True,\n) -> Dict[str, List[Pipeline]]:\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"pipelines")),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Models trained in ",Object(r.b)("inlineCode",{parentName:"li"},"carefree-learn"),"."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"identifier"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},'"cflearn"'),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the identifier of the saved model."),Object(r.b)("li",{parentName:"ul"},"In most cases this should be left as-is."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"saving_folder"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the saving folder of the models."),Object(r.b)("li",{parentName:"ul"},"If not provided, the models will be saved in the current working directory."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"retain_data"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"True"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Whether retain the data information. In most cases this should not be set manually because ",Object(r.b)("inlineCode",{parentName:"li"},"carefree-learn")," has provided ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"production"}),Object(r.b)("inlineCode",{parentName:"a"},"cflearn.Pack"))," API for production.")))),Object(r.b)("h4",{id:"examples-1"},"Examples"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import cflearn\nimport numpy as np\n\nx = np.random.random([1000, 10])\ny = np.random.random([1000, 1])\nm = cflearn.make().fit(x, y)\ncflearn.save(m)  # this will generate a `cflearn^_^fcnn^_^0000.zip` in the current working directory\n")),Object(r.b)("h3",{id:"load"},Object(r.b)("inlineCode",{parentName:"h3"},"load")),Object(r.b)("p",null,"General method for loading neural networks trained with ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'def load(\n    identifier: str = "cflearn",\n    saving_folder: Optional[str] = None,\n) -> Dict[str, List[Pipeline]]:\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"identifier"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},'"cflearn"'),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the identifier of the loaded model."),Object(r.b)("li",{parentName:"ul"},"In most cases this should be left as-is."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"saving_folder"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the loading folder of the models."),Object(r.b)("li",{parentName:"ul"},"If not provided, the models will be loaded from the current working directory.")))),Object(r.b)("h4",{id:"examples-2"},"Examples"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import cflearn\nimport numpy as np\n\nx = np.random.random([1000, 10])\ny = np.random.random([1000, 1])\nm = cflearn.make().fit(x, y)\ncflearn.save(m)\nms = cflearn.load()\nprint(ms)  # {'fcnn': [FCNN()]}\nassert np.allclose(m.predict(x), ms[\"fcnn\"][0].predict(x))\n")),Object(r.b)("h3",{id:"repeat_with"},Object(r.b)("inlineCode",{parentName:"h3"},"repeat_with")),Object(r.b)("p",null,"General method for training multiple neural networks on fixed datasets with ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'def repeat_with(\n    x: data_type,\n    y: data_type = None,\n    x_cv: data_type = None,\n    y_cv: data_type = None,\n    *,\n    models: Union[str, List[str]] = "fcnn",\n    model_configs: Optional[Dict[str, Dict[str, Any]]] = None,\n    identifiers: Optional[Union[str, List[str]]] = None,\n    predict_config: Optional[Dict[str, Any]] = None,\n    sequential: Optional[bool] = None,\n    num_jobs: int = 1,\n    num_repeat: int = 5,\n    temp_folder: str = "__tmp__",\n    return_patterns: bool = True,\n    use_tqdm: bool = True,\n    **kwargs: Any,\n) -> RepeatResult:\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x")),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the training features."),Object(r.b)("li",{parentName:"ul"},"Could be either a ",Object(r.b)("inlineCode",{parentName:"li"},"ndarray")," or a ",Object(r.b)("inlineCode",{parentName:"li"},"file"),"."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"y"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the training labels."),Object(r.b)("li",{parentName:"ul"},"If ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x"))," is a ",Object(r.b)("inlineCode",{parentName:"li"},"file"),", then we should leave ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"y"))," unspecified."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x_cv"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the cross validation features (if provided)."),Object(r.b)("li",{parentName:"ul"},"If ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x"))," is a ",Object(r.b)("inlineCode",{parentName:"li"},"file"),", then ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x_cv"))," should also be a ",Object(r.b)("inlineCode",{parentName:"li"},"file")))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"y_cv"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the cross validation labels (if provided)."),Object(r.b)("li",{parentName:"ul"},"If ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"x_cv"))," is a ",Object(r.b)("inlineCode",{parentName:"li"},"file"),", then we should leave ",Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"y_cv"))," unspecified."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"models"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},'"fcnn"'),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify the model(s) we want to train."),Object(r.b)("li",{parentName:"ul"},"It could either be an ",Object(r.b)("inlineCode",{parentName:"li"},"str")," or be a list of ",Object(r.b)("inlineCode",{parentName:"li"},"str"),", which is useful for ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"distributed#benchmarking"}),Object(r.b)("inlineCode",{parentName:"a"},"Benchmarking")),"."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"model_configs"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Configurations for each model."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"identifiers"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"identifiers"))," that will be used in ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#save"}),Object(r.b)("inlineCode",{parentName:"a"},"cflearn.save"))," for each model."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"predict_config"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Configs that will be passed into ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#predict"}),Object(r.b)("inlineCode",{parentName:"a"},"Pipeline.predict")),"."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"sequential"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"None"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify whether force not to use distributed training."),Object(r.b)("li",{parentName:"ul"},"If not provided, it will be determined by ",Object(r.b)("inlineCode",{parentName:"li"},"num_jobs")," (",Object(r.b)("inlineCode",{parentName:"li"},"sequential = num_jobs <= 1"),")."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"num_jobs"))," ","[default = 1]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Number of processes run in parallel."),Object(r.b)("li",{parentName:"ul"},"If set to value greater than ",Object(r.b)("inlineCode",{parentName:"li"},"1"),", we'll use distributed training."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"num_repeat"))," ","[default = 5]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Number of models we train for each specified model."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"temp_folder"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},'"__tmp__"'),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Temporary folder in which we used to store intermediate results generated by sequential / distributed training."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"return_patterns"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"True"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify whether generate ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/carefree0910/carefree-toolkit/blob/1b406c9c142c5097ad3ed66d02a3cf9c2ae40507/cftool/ml/utils.py#L501"}),Object(r.b)("inlineCode",{parentName:"a"},"ModelPattern")),"s of corresponding ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"../design-principles#pipeline"}),Object(r.b)("inlineCode",{parentName:"a"},"Pipeline")),"s."),Object(r.b)("li",{parentName:"ul"},"If ",Object(r.b)("inlineCode",{parentName:"li"},"True"),", we'll utilize ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#to_pattern"}),Object(r.b)("inlineCode",{parentName:"a"},"to_pattern"))," to generate the patterns."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"use_tqdm"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"True"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Whether utilize the ",Object(r.b)("inlineCode",{parentName:"li"},"tqdm")," progress bar or not."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"kwargs"))," ","[default = ",Object(r.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Specify other ",Object(r.b)("inlineCode",{parentName:"li"},"kwargs")," that will be passed into ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"../getting-started/configurations#make"}),Object(r.b)("inlineCode",{parentName:"a"},"make")),".")))),Object(r.b)("h4",{id:"examples-3"},"Examples"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import cflearn\nimport numpy as np\n\nx = np.random.random([1000, 10])\ny = np.random.random([1000, 1])\nresult = cflearn.repeat_with(x, y)\nprint(result.pipelines)  # {'fcnn': [FCNN(), FCNN(), FCNN(), FCNN(), FCNN()]}\n")))}p.isMDXComponent=!0}}]);