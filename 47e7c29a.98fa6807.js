(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{107:function(e,n,a){"use strict";a.d(n,"a",(function(){return p})),a.d(n,"b",(function(){return u}));var t=a(0),i=a.n(t);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function c(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?c(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=i.a.createContext({}),b=function(e){var n=i.a.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},p=function(e){var n=b(e.components);return i.a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},d=i.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=b(a),d=t,u=p["".concat(c,".").concat(d)]||p[d]||m[d]||r;return a?i.a.createElement(u,o(o({ref:n},l),{},{components:a})):i.a.createElement(u,o({ref:n},l))}));function u(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=a.length,c=new Array(r);c[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:t,c[1]=o;for(var l=2;l<r;l++)c[l]=a[l];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},108:function(e,n,a){"use strict";function t(e){var n,a,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(a=t(e[n]))&&(i&&(i+=" "),i+=a);else for(n in e)e[n]&&(i&&(i+=" "),i+=n);return i}n.a=function(){for(var e,n,a=0,i="";a<arguments.length;)(e=arguments[a++])&&(n=t(e))&&(i&&(i+=" "),i+=n);return i}},111:function(e,n,a){"use strict";var t=a(0),i=a(112);n.a=function(){var e=Object(t.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},112:function(e,n,a){"use strict";var t=a(0),i=Object(t.createContext)(void 0);n.a=i},114:function(e,n,a){"use strict";var t=a(0),i=a.n(t),r=a(111),c=a(108),o=a(52),s=a.n(o),l=37,b=39;n.a=function(e){var n=e.lazy,a=e.block,o=e.children,p=e.defaultValue,m=e.values,d=e.groupId,u=e.className,O=Object(r.a)(),j=O.tabGroupChoices,f=O.setTabGroupChoices,h=Object(t.useState)(p),g=h[0],N=h[1];if(null!=d){var v=j[d];null!=v&&v!==g&&m.some((function(e){return e.value===v}))&&N(v)}var w=function(e){N(e),null!=d&&f(d,e)},y=[];return i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":a},u)},m.map((function(e){var n=e.value,a=e.label;return i.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===n,className:Object(c.a)("tabs__item",s.a.tabItem,{"tabs__item--active":g===n}),key:n,ref:function(e){return y.push(e)},onKeyDown:function(e){!function(e,n,a){switch(a.keyCode){case b:!function(e,n){var a=e.indexOf(n)+1;e[a]?e[a].focus():e[0].focus()}(e,n);break;case l:!function(e,n){var a=e.indexOf(n)-1;e[a]?e[a].focus():e[e.length-1].focus()}(e,n)}}(y,e.target,e)},onFocus:function(){return w(n)},onClick:function(){w(n)}},a)}))),n?Object(t.cloneElement)(o.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):i.a.createElement("div",{className:"margin-vert--md"},o.map((function(e,n){return Object(t.cloneElement)(e,{key:n,hidden:e.props.value!==g})}))))}},115:function(e,n,a){"use strict";var t=a(3),i=a(0),r=a.n(i);n.a=function(e){var n=e.children,a=e.hidden,i=e.className;return r.a.createElement("div",Object(t.a)({role:"tabpanel"},{hidden:a,className:i}),n)}},155:function(e,n,a){"use strict";a.r(n),n.default=a.p+"assets/images/cross-layer-4bb796af04e7e339bf417ec9fc608822.png"},79:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return s})),a.d(n,"metadata",(function(){return l})),a.d(n,"rightToc",(function(){return b})),a.d(n,"default",(function(){return m}));var t=a(3),i=a(7),r=(a(0),a(107)),c=a(114),o=a(115),s={id:"customization",title:"Build Your Own Models",sidebar_label:"Customization"},l={unversionedId:"developer-guides/customization",id:"developer-guides/customization",isDocsHomePage:!1,title:"Build Your Own Models",description:"In this page we will go through some basic concepts we need to know to build our own models in carefree-learn. Customizing carefree-learn could be very easy if you only want to construct existing modules to form a new model structure, and should also be fairly straight forward even if you want to implement your own modules.",source:"@site/docs/developer-guides/customization.md",slug:"/developer-guides/customization",permalink:"/carefree-learn-doc/docs/developer-guides/customization",version:"current",lastUpdatedAt:1606017026,sidebar_label:"Customization",sidebar:"docs",previous:{title:"Examples",permalink:"/carefree-learn-doc/docs/user-guides/examples"},next:{title:"Contributing",permalink:"/carefree-learn-doc/docs/developer-guides/contributing"}},b=[{value:"<code>Configs</code>",id:"configs",children:[{value:"<code>HeadConfigs</code>",id:"headconfigs",children:[]}]},{value:"Constructing Existing Modules",id:"constructing-existing-modules",children:[{value:"<code>ModelBase.register</code>",id:"modelbaseregister",children:[]},{value:"<code>ModelBase.register_pipe</code>",id:"modelbaseregister_pipe",children:[]}]},{value:"Customizing New Modules",id:"customizing-new-modules",children:[{value:"Customize <code>extractor</code>",id:"customize-extractor",children:[]},{value:"Customize <code>head</code>",id:"customize-head",children:[]},{value:"Conclusions",id:"conclusions",children:[]}]}],p={rightToc:b};function m(e){var n=e.components,s=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(t.a)({},p,s,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"In this page we will go through some basic concepts we need to know to build our own models in ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn"),". Customizing ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," could be very easy if you only want to construct existing modules to form a new model structure, and should also be fairly straight forward even if you want to implement your own modules."),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"There's a step-by-step example ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"../user-guides/examples#operations"}),"here")," which will walk you through the most important concepts with sufficient codes and experiments."))),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"In order to better understand the following contents, it is recommended to first understand the basic concepts mentioned in the ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"../design-principles#model"}),"Design Principles"),"."))),Object(r.b)("h2",{id:"configs"},Object(r.b)("inlineCode",{parentName:"h2"},"Configs")),Object(r.b)("p",null,"Before we dive into the details of customization, we should first understand how ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," manages its ",Object(r.b)("inlineCode",{parentName:"p"},"Configs"),". It is actually not more than an ordinary Python ",Object(r.b)("inlineCode",{parentName:"p"},"dict"),", except it can be ",Object(r.b)("em",{parentName:"p"},"registered")," in a certain ",Object(r.b)("em",{parentName:"p"},"hierarchy")," format. Basically, a ",Object(r.b)("inlineCode",{parentName:"p"},"Configs")," need to define a ",Object(r.b)("inlineCode",{parentName:"p"},"scope")," and a ",Object(r.b)("inlineCode",{parentName:"p"},"name")," for users to access it, where"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"A ",Object(r.b)("inlineCode",{parentName:"li"},"scope")," represents a ",Object(r.b)("inlineCode",{parentName:"li"},"module"),". "),Object(r.b)("li",{parentName:"ul"},"A ",Object(r.b)("inlineCode",{parentName:"li"},"name")," represents the different ",Object(r.b)("inlineCode",{parentName:"li"},"version")," of the corresponding configuration.")),Object(r.b)("p",null,"For example, if we want to configure a ",Object(r.b)("inlineCode",{parentName:"p"},"module")," named ",Object(r.b)("inlineCode",{parentName:"p"},"Foo")," with different ",Object(r.b)("inlineCode",{parentName:"p"},"dummy_value"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),"class Foo:\n    def __init__(self, dummy_value: float):\n        self.dummy = dummy_value\n    \n    def print(self) -> None:\n        print(self.dummy)\n")),Object(r.b)("p",null,"Then we can leverage ",Object(r.b)("inlineCode",{parentName:"p"},"cflearn.register_config")," to register different configurations:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\n@cflearn.register_config("foo", "one")\nclass FooOneConfig(cflearn.Configs):\n    def get_default(self):\n        return {"dummy_value": 1.0}\n\n@cflearn.register_config("foo", "two")\nclass FooTwoConfig(cflearn.Configs):\n    def get_default(self):\n        return {"dummy_value": 2.0}\n')),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Notice that we've implemented ",Object(r.b)("inlineCode",{parentName:"p"},"get_default")," for each class, which is the only necessary method we need to inherit from ",Object(r.b)("inlineCode",{parentName:"p"},"Configs"),"."))),Object(r.b)("p",null,"After registration, we can access them through their names, which is very convenient in many use cases (e.g. hyper parameter optimization):"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'for name in ["one", "two"]:\n    cfg = cflearn.Configs.get("foo", name)\n    config = cfg.pop()\n    Foo(**config).print()\n\n# 1.0\n# 2.0\n')),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Notice that we used ",Object(r.b)("inlineCode",{parentName:"p"},"Configs.pop")," to generate a Python ",Object(r.b)("inlineCode",{parentName:"p"},"dict")," for further usages."))),Object(r.b)("p",null,"What's going on under the hood is that ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," maintains a global ",Object(r.b)("inlineCode",{parentName:"p"},"configs_dict")," with following hierarchy:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'{\n    "scope_0": {\n        "name_00": config_class_00,\n        "name_01": config_class_01,\n    },\n    "scope_1": {\n        "name_10": config_class_10,\n        "name_11": config_class_11,\n    },\n    ...,\n    "scope_k": {\n        "name_k0": config_class_k0,\n        "name_k1": config_class_k1,\n    },\n}\n')),Object(r.b)("p",null,"So after the registration mentioned above, this global ",Object(r.b)("inlineCode",{parentName:"p"},"configs_dict")," will be updated to:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'{\n    ...,\n    "foo": {\n        "one": FooOneConfig,\n        "two": FooTwoConfig,\n    }\n}\n')),Object(r.b)("h3",{id:"headconfigs"},Object(r.b)("inlineCode",{parentName:"h3"},"HeadConfigs")),Object(r.b)("p",null,"A ",Object(r.b)("inlineCode",{parentName:"p"},"HeadConfigs")," inherits from ",Object(r.b)("inlineCode",{parentName:"p"},"Configs")," and holds more information. The reason why we implement an extra sub-class of ",Object(r.b)("inlineCode",{parentName:"p"},"Configs")," is that we usually need more information in ",Object(r.b)("inlineCode",{parentName:"p"},"head")," than in ",Object(r.b)("inlineCode",{parentName:"p"},"transform")," and ",Object(r.b)("inlineCode",{parentName:"p"},"extractor"),". For instance, we need to know the data dimensions to inference the default ",Object(r.b)("inlineCode",{parentName:"p"},"output_dim"),"."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"We need to call ",Object(r.b)("inlineCode",{parentName:"p"},"cflearn.register_head_config")," if we want to register a new ",Object(r.b)("inlineCode",{parentName:"p"},"HeadConfigs"),"."))),Object(r.b)("h2",{id:"constructing-existing-modules"},"Constructing Existing Modules"),Object(r.b)("p",null,"With the help of ",Object(r.b)("inlineCode",{parentName:"p"},"Configs"),", constructing existing modules is pretty easy because we can access different configurations by specifying their ",Object(r.b)("inlineCode",{parentName:"p"},"scope")," and ",Object(r.b)("inlineCode",{parentName:"p"},"name"),". In fact, as mentioned in ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"../design-principles#examples"}),Object(r.b)("inlineCode",{parentName:"a"},"Design Principles")),", ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," itself is actually implementing its models by such similar process:"),Object(r.b)(c.a,{groupId:"models",defaultValue:"linear",values:[{label:"Linear",value:"linear"},{label:"FCNN",value:"fcnn"},{label:"Wide & Deep",value:"wnd"},{label:"RNN",value:"rnn"},{label:"Transformer",value:"transformer"}],mdxType:"Tabs"},Object(r.b)(o.a,{value:"linear",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'@ModelBase.register("linear")\n@ModelBase.register_pipe("linear")\nclass LinearModel(ModelBase):\n    pass\n'))),Object(r.b)(o.a,{value:"fcnn",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'@ModelBase.register("fcnn")\n@ModelBase.register_pipe("fcnn")\nclass FCNN(ModelBase):\n    pass\n'))),Object(r.b)(o.a,{value:"wnd",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'@ModelBase.register("wnd")\n@ModelBase.register_pipe("fcnn", transform="embedding")\n@ModelBase.register_pipe("linear", transform="one_hot_only")\nclass WideAndDeep(ModelBase):\n    pass\n'))),Object(r.b)(o.a,{value:"rnn",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'@ModelBase.register("rnn")\n@ModelBase.register_pipe("rnn", head="fcnn")\nclass RNN(ModelBase):\n    pass\n'))),Object(r.b)(o.a,{value:"transformer",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'@ModelBase.register("transformer")\n@ModelBase.register_pipe("transformer", head="fcnn")\nclass Transformer(ModelBase):\n    pass\n')))),Object(r.b)("h3",{id:"modelbaseregister"},Object(r.b)("inlineCode",{parentName:"h3"},"ModelBase.register")),Object(r.b)("p",null,"In ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," we implemented an alias for ",Object(r.b)("inlineCode",{parentName:"p"},"ModelBase.register"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),"def register_model(name: str) -> Callable[[Type], Type]:\n    return ModelBase.register(name)\n")),Object(r.b)("p",null,"It can be used to register a new model and access it through its name, which is very convenient in many use cases (e.g. hyper parameter optimization)."),Object(r.b)("h3",{id:"modelbaseregister_pipe"},Object(r.b)("inlineCode",{parentName:"h3"},"ModelBase.register_pipe")),Object(r.b)("p",null,"In ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," we implemented an alias for ",Object(r.b)("inlineCode",{parentName:"p"},"ModelBase.register_pipe"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'def register_pipe(\n    key: str,\n    *,\n    transform: str = "default",\n    extractor: Optional[str] = None,\n    head: Optional[str] = None,\n    extractor_config: str = "default",\n    head_config: str = "default",\n    extractor_meta_scope: Optional[str] = None,\n    head_meta_scope: Optional[str] = None,\n) -> Callable[[Type], Type]:\n    return ModelBase.register_pipe(\n        key,\n        transform=transform,\n        extractor=extractor,\n        head=head,\n        extractor_config=extractor_config,\n        head_config=head_config,\n        extractor_meta_scope=extractor_meta_scope,\n        head_meta_scope=head_meta_scope,\n    )\n')),Object(r.b)("p",null,"In this definition, the ",Object(r.b)("inlineCode",{parentName:"p"},"extractor")," and ",Object(r.b)("inlineCode",{parentName:"p"},"head")," arguments represent the corresponding ",Object(r.b)("inlineCode",{parentName:"p"},"scope"),", while ",Object(r.b)("inlineCode",{parentName:"p"},"transform"),", ",Object(r.b)("inlineCode",{parentName:"p"},"extractor_config")," and ",Object(r.b)("inlineCode",{parentName:"p"},"head_config")," represent the corresponding ",Object(r.b)("inlineCode",{parentName:"p"},"name"),". In other words, this definition actually means:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'transform_cfg = cflearn.Configs.get("transform", transform)\nextractor_cfg = cflearn.Configs.get(extractor, extractor_config)\nhead_cfg = cflearn.HeadConfigs.get(head, head_config)\n')),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("ul",{parentName:"div"},Object(r.b)("li",{parentName:"ul"},"There is only one ",Object(r.b)("inlineCode",{parentName:"li"},"scope")," for ",Object(r.b)("inlineCode",{parentName:"li"},"transform")," because the number of choices of ",Object(r.b)("inlineCode",{parentName:"li"},"transform")," is limited (see ",Object(r.b)("a",Object(t.a)({parentName:"li"},{href:"../design-principles#transform"}),"transform")," for more details)."),Object(r.b)("li",{parentName:"ul"},"We are using ",Object(r.b)("inlineCode",{parentName:"li"},"cflearn.HeadConfigs")," to fetch configurations for ",Object(r.b)("inlineCode",{parentName:"li"},"head"),", as mentioned in ",Object(r.b)("a",Object(t.a)({parentName:"li"},{href:"#headconfigs"}),"HeadConfigs")," section.")))),Object(r.b)("p",null,"Besides these, there still remains a ",Object(r.b)("inlineCode",{parentName:"p"},"key")," argument in ",Object(r.b)("inlineCode",{parentName:"p"},"register_pipe")," and this is where many default logics hide under the hood:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'if head is None:\n    head = key\nelif extractor is None:\n    extractor = key\nif extractor is None:\n    extractor = "identity"\n')),Object(r.b)("p",null,"These logics simplify the definitions of some common structures, so in ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," we only care about the ",Object(r.b)("inlineCode",{parentName:"p"},"key")," argument in most cases."),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"For the ",Object(r.b)("inlineCode",{parentName:"p"},"key")," itself, we only need to guarantee that different ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"../design-principles#pipe"}),"pipe")," corresponds to different ",Object(r.b)("inlineCode",{parentName:"p"},"key"),"."))),Object(r.b)("p",null,"At the last part of this section, we will demonstrate how could we build a new model with following properties:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Use one hot features to train a ",Object(r.b)("inlineCode",{parentName:"li"},"DNDF")," ",Object(r.b)("inlineCode",{parentName:"li"},"head"),"."),Object(r.b)("li",{parentName:"ul"},"Use one hot features and numerical features to train a ",Object(r.b)("inlineCode",{parentName:"li"},"linear")," ",Object(r.b)("inlineCode",{parentName:"li"},"head"),"."),Object(r.b)("li",{parentName:"ul"},"Use numerical features to train an ",Object(r.b)("inlineCode",{parentName:"li"},"fcnn")," ",Object(r.b)("inlineCode",{parentName:"li"},"head"),"."),Object(r.b)("li",{parentName:"ul"},"Use embedding features to train an ",Object(r.b)("inlineCode",{parentName:"li"},"fcnn")," ",Object(r.b)("inlineCode",{parentName:"li"},"head"),".")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\n@cflearn.register_model("brand_new_model")\n@cflearn.register_pipe("dndf", transform="one_hot_only")\n@cflearn.register_pipe("linear", transform="one_hot")\n@cflearn.register_pipe("fcnn", transform="numerical")\n@cflearn.register_pipe("fcnn2", transform="embedding_only", extractor="identity", head="fcnn")\nclass BrandNewModel(cflearn.ModelBase):\n    pass\n')),Object(r.b)("p",null,"We can actually play with it:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'import numpy as np\n\nnumerical = np.random.random([10000, 5])\ncategorical = np.random.randint(0, 10, [10000, 5])\nx = np.hstack([numerical, categorical])\ny = np.random.random([10000, 1])\nm = cflearn.make("brand_new_model").fit(x, y)\nprint(m.model)\n')),Object(r.b)("details",null,Object(r.b)("summary",null,Object(r.b)("b",null,"Which yields")),Object(r.b)("p",null,Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-text"}),"BrandNewModel(\n  (pipes): Pipes(\n    (fcnn2): embedding_only_identity_default -> fcnn_default\n    (fcnn): numerical_identity_default -> fcnn_default\n    (linear): one_hot_identity_default -> linear_default\n    (dndf): one_hot_only_identity_default -> dndf_default\n  )\n  (loss): L1Loss()\n  (encoder): Encoder(\n    (embeddings): ModuleList(\n      (0): Embedding(\n        (core): Lambda(embedding: 50 -> 4)\n      )\n    )\n    (one_hot_encoders): ModuleList(\n      (0): OneHot(\n        (core): Lambda(one_hot_10)\n      )\n      (1): OneHot(\n        (core): Lambda(one_hot_10)\n      )\n      (2): OneHot(\n        (core): Lambda(one_hot_10)\n      )\n      (3): OneHot(\n        (core): Lambda(one_hot_10)\n      )\n      (4): OneHot(\n        (core): Lambda(one_hot_10)\n      )\n    )\n    (embedding_dropout): Dropout(keep=0.8)\n  )\n  (transforms): ModuleDict(\n    (embedding_only): Transform(\n      (use_one_hot): False\n      (use_embedding): True\n      (only_categorical): True\n    )\n    (numerical): Transform(\n      (use_one_hot): False\n      (use_embedding): False\n      (only_categorical): False\n    )\n    (one_hot): Transform(\n      (use_one_hot): True\n      (use_embedding): False\n      (only_categorical): False\n    )\n    (one_hot_only): Transform(\n      (use_one_hot): True\n      (use_embedding): False\n      (only_categorical): True\n    )\n  )\n  (extractors): ModuleDict(\n    (embedding_only_identity_default): Identity()\n    (numerical_identity_default): Identity()\n    (one_hot_identity_default): Identity()\n    (one_hot_only_identity_default): Identity()\n  )\n  (heads): ModuleDict(\n    (fcnn2): FCNNHead(\n      (mlp): MLP(\n        (mappings): ModuleList(\n          (0): Mapping(\n            (linear): Linear(\n              (linear): Linear(in_features=20, out_features=64, bias=False)\n            )\n            (bn): BN(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): ReLU(inplace=True)\n            (dropout): Dropout(keep=0.5)\n          )\n          (1): Mapping(\n            (linear): Linear(\n              (linear): Linear(in_features=64, out_features=64, bias=False)\n            )\n            (bn): BN(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): ReLU(inplace=True)\n            (dropout): Dropout(keep=0.5)\n          )\n          (2): Linear(\n            (linear): Linear(in_features=64, out_features=1, bias=True)\n          )\n        )\n      )\n    )\n    (fcnn): FCNNHead(\n      (mlp): MLP(\n        (mappings): ModuleList(\n          (0): Mapping(\n            (linear): Linear(\n              (linear): Linear(in_features=5, out_features=64, bias=False)\n            )\n            (bn): BN(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): ReLU(inplace=True)\n            (dropout): Dropout(keep=0.5)\n          )\n          (1): Mapping(\n            (linear): Linear(\n              (linear): Linear(in_features=64, out_features=64, bias=False)\n            )\n            (bn): BN(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): ReLU(inplace=True)\n            (dropout): Dropout(keep=0.5)\n          )\n          (2): Linear(\n            (linear): Linear(in_features=64, out_features=1, bias=True)\n          )\n        )\n      )\n    )\n    (linear): LinearHead(\n      (linear): Linear(\n        (linear): Linear(in_features=55, out_features=1, bias=True)\n      )\n    )\n    (dndf): DNDFHead(\n      (dndf): DNDF(\n        (tree_proj): Linear(\n          (linear): Linear(in_features=50, out_features=310, bias=True)\n          (pruner): Pruner(method='auto_prune')\n        )\n      )\n    )\n  )\n)\n")))),Object(r.b)("h2",{id:"customizing-new-modules"},"Customizing New Modules"),Object(r.b)("p",null,"In this section, we'll introduce how to customize your own ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"../design-principles#extractor"}),Object(r.b)("inlineCode",{parentName:"a"},"extractor"))," and ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"../design-principles#head"}),Object(r.b)("inlineCode",{parentName:"a"},"head")),"."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Currently ",Object(r.b)("inlineCode",{parentName:"p"},"transform")," is not customizable because ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," sticks to ",Object(r.b)("inlineCode",{parentName:"p"},"one_hot")," and ",Object(r.b)("inlineCode",{parentName:"p"},"embedding"),". Please refer to ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"../design-principles#transform"}),"Design Principles")," for more details."))),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Again, we recommend ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"../user-guides/examples#operations"}),"this")," step-by-step example which will walk you through the most important concepts with sufficient codes and experiments."))),Object(r.b)("h3",{id:"customize-extractor"},"Customize ",Object(r.b)("inlineCode",{parentName:"h3"},"extractor")),Object(r.b)("p",null,"Recap that an ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"../design-principles#extractor"}),Object(r.b)("inlineCode",{parentName:"a"},"extractor"))," is responsible for extracting the (transformed) input data into latent features. For tabular datasets, it will simply be ",Object(r.b)("inlineCode",{parentName:"p"},"identity")," in most cases because we can hardly have any prior knowledge."),Object(r.b)("p",null,"We can, however, inject prior knowledge into ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," if we happen to have one. For example, if we have two features, namely ",Object(r.b)("em",{parentName:"p"},"working hours")," (",Object(r.b)("span",Object(t.a)({parentName:"p"},{className:"math math-inline"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"katex"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"katex-mathml"}),Object(r.b)("math",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"t")),Object(r.b)("annotation",Object(t.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"t")))),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"strut",style:{height:"0.61508em",verticalAlign:"0em"}})),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"mord mathnormal"}),"t"))))),") and ",Object(r.b)("em",{parentName:"p"},"wage")," (",Object(r.b)("span",Object(t.a)({parentName:"p"},{className:"math math-inline"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"katex"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"katex-mathml"}),Object(r.b)("math",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"x")),Object(r.b)("annotation",Object(t.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"x")))),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"mord mathnormal"}),"x"))))),"), and the target is to calculate the ",Object(r.b)("em",{parentName:"p"},"actual income")," (",Object(r.b)("span",Object(t.a)({parentName:"p"},{className:"math math-inline"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"katex"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"katex-mathml"}),Object(r.b)("math",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"y")),Object(r.b)("annotation",Object(t.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"y")))),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}})),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"mord mathnormal",style:{marginRight:"0.03588em"}}),"y"))))),"):"),Object(r.b)("div",{className:"math math-display"},Object(r.b)("span",Object(t.a)({parentName:"div"},{className:"katex-display"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"katex"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"katex-mathml"}),Object(r.b)("math",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"}),Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"y"),Object(r.b)("mo",{parentName:"mrow"},"="),Object(r.b)("mi",{parentName:"mrow"},"t"),Object(r.b)("mo",{parentName:"mrow"},"\xd7"),Object(r.b)("mi",{parentName:"mrow"},"x")),Object(r.b)("annotation",Object(t.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"y=t\\times x")))),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}})),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"mord mathnormal",style:{marginRight:"0.03588em"}}),"y"),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"mrel"}),"="),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"strut",style:{height:"0.69841em",verticalAlign:"-0.08333em"}})),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"mord mathnormal"}),"t"),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"mbin"}),"\xd7"),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"mord mathnormal"}),"x")))))),Object(r.b)("p",null,"Although this task seems easy to humans, it is actually quite difficult for Neural Networks because Neural Networks lack information of multiplication across features. We can run a small experiment to quickly demonstrate this:"),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"The example showing below is a simplified version of ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"../user-guides/examples#operations"}),"Operations"),"."))),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\nimport numpy as np\n\nx = np.random.random([10000, 2]) * 2.0\ny = np.prod(x, axis=1, keepdims=True)\n\n# `reg` represents a regression task\n# `use_simplify_data` indicates that `carefree-learn` will do nothing to the input data\nkwargs = {"task_type": "reg", "use_simplify_data": True}\nfcnn = cflearn.make(**kwargs).fit(x, y)\ncflearn.evaluate(x, y, pipelines=fcnn)\n')),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"We've set ",Object(r.b)("inlineCode",{parentName:"p"},"use_simplify_data")," to ",Object(r.b)("inlineCode",{parentName:"p"},"True"),". That's because we want to hold the datasets' property, so we should not apply any pre-processing strategies to the original dataset."))),Object(r.b)("p",null,"Which yields"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-text"}),"================================================================================================================================\n|        metrics         |                       mae                        |                       mse                        |\n--------------------------------------------------------------------------------------------------------------------------------\n|                        |      mean      |      std       |     score      |      mean      |      std       |     score      |\n--------------------------------------------------------------------------------------------------------------------------------\n|          fcnn          |    0.062123    |    0.000000    |    -0.06212    |    0.006766    |    0.000000    |    -0.00676    |\n================================================================================================================================\n")),Object(r.b)("p",null,"We can see that ",Object(r.b)("inlineCode",{parentName:"p"},"fcnn")," failed to approach to the ground truth. In order to improve this, we can implement an ",Object(r.b)("inlineCode",{parentName:"p"},"extractor")," to generate a new feature representing cross-feature multiplication:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'import torch\n\n# The name `cross_multiplication` is actually the `scope` of this `extractor`\n@cflearn.register_extractor("cross_multiplication")\nclass CrossMultiplication(cflearn.ExtractorBase):\n    # This property represents the dimension of this `extractor`\'s output\n    @property\n    def out_dim(self) -> int:\n        return 1\n\n    # This is where your algorithms should be implemented\n    # net.shape : [ batch_size, in_dim ]\n    def forward(self, net: torch.Tensor) -> torch.Tensor:\n        prod = net[..., 0] * net[..., 1]\n        return prod.view([-1, 1])\n')),Object(r.b)("p",null,"After defining the ",Object(r.b)("inlineCode",{parentName:"p"},"extractor"),", we need to (at least) define the ",Object(r.b)("inlineCode",{parentName:"p"},"default")," config under its ",Object(r.b)("inlineCode",{parentName:"p"},"scope"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'from typing import Any\nfrom typing import Dict\n\n@cflearn.register_config("cross_multiplication", "default")\nclass CrossMultiplicationExtractorConfig(cflearn.Configs):\n    def get_default(self) -> Dict[str, Any]:\n        return {}\n')),Object(r.b)("p",null,"Since ",Object(r.b)("inlineCode",{parentName:"p"},"CrossMultiplication")," doesn't really need any configurations, simply returning an empty Python ",Object(r.b)("inlineCode",{parentName:"p"},"dict")," will be enough."),Object(r.b)("p",null,"With these two steps, we have already implemented a ready-to-use ",Object(r.b)("inlineCode",{parentName:"p"},"extractor")," which holds our prior knowledge, so the next step is to utilize it:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'@cflearn.register_model("multiplication")\n@cflearn.register_pipe("linear", extractor="cross_multiplication")\nclass MultiplicationNetwork(cflearn.ModelBase):\n    pass\n')),Object(r.b)("p",null,"And that's it! ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," will do most of the boiler plates for you, so specify the ",Object(r.b)("inlineCode",{parentName:"p"},"extractor")," and ",Object(r.b)("inlineCode",{parentName:"p"},"head")," will be enough."),Object(r.b)("p",null,"Let's run a small experiment to demonstrate the validaty of our new model:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'mul = cflearn.make("multiplication", **kwargs).fit(x, y)\ncflearn.evaluate(x, y, pipelines=[fcnn, mul])\n')),Object(r.b)("p",null,"Which yields"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-text"}),"================================================================================================================================\n|        metrics         |                       mae                        |                       mse                        |\n--------------------------------------------------------------------------------------------------------------------------------\n|                        |      mean      |      std       |     score      |      mean      |      std       |     score      |\n--------------------------------------------------------------------------------------------------------------------------------\n|          fcnn          |    0.065125    | -- 0.000000 -- |    -0.06512    |    0.007785    | -- 0.000000 -- |    -0.00778    |\n--------------------------------------------------------------------------------------------------------------------------------\n|     multiplication     | -- 0.000078 -- | -- 0.000000 -- | -- -0.00007 -- | -- 0.000000 -- | -- 0.000000 -- | -- -0.00000 -- |\n================================================================================================================================\n")),Object(r.b)("p",null,"As we expected, the ",Object(r.b)("inlineCode",{parentName:"p"},"multiplication")," model approaches to the ground truth\ud83e\udd73"),Object(r.b)("h3",{id:"customize-head"},"Customize ",Object(r.b)("inlineCode",{parentName:"h3"},"head")),Object(r.b)("p",null,"Although the result is satisfying, in most real-life cases it is hard to obtain such strong prior knowledges. Recap that ",Object(r.b)("inlineCode",{parentName:"p"},"fcnn")," fails because it lacks cross-feature information, so a model with cross-feature information should be able to solve this ",Object(r.b)("em",{parentName:"p"},"total income")," task, and that's where Deep-and-Cross",Object(r.b)("sup",Object(t.a)({parentName:"p"},{id:"fnref-1"}),Object(r.b)("a",Object(t.a)({parentName:"sup"},{href:"#fn-1",className:"footnote-ref"}),"1"))," network comes to rescue:"),Object(r.b)("p",null,Object(r.b)("img",{alt:"Cross Layer",src:a(155).default})),Object(r.b)("p",null,"Since ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," has already implemented ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/03edf2bd8cc32b7fe2ce30be6e4196adf7ab0bde/cflearn/modules/blocks.py#L508"}),Object(r.b)("inlineCode",{parentName:"a"},"CrossBlock")),", we can utilize it to build our ",Object(r.b)("inlineCode",{parentName:"p"},"CrossHead")," easily:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'from typing import Optional\nfrom cflearn.modules.blocks import Linear\nfrom cflearn.modules.blocks import CrossBlock\nfrom cflearn.misc.toolkit import Activations\n\n# The name `cross` is actually the `scope` of this `head`\n@cflearn.register_head("cross")\nclass CrossHead(cflearn.HeadBase):\n    def __init__(self, in_dim: int, out_dim: int, activation: Optional[str]):\n        super().__init__(in_dim, out_dim)\n        self.cross = CrossBlock(in_dim)\n        if activation is None:\n            self.activation = None\n        else:\n            self.activation = Activations.make(activation)\n        self.linear = Linear(in_dim, out_dim)\n    \n    def forward(self, net: torch.Tensor) -> torch.Tensor:\n        net = self.cross(net, net)\n        if self.activation is not None:\n            net = self.activation(net)\n        return self.linear(net)\n')),Object(r.b)("p",null,"After defining the ",Object(r.b)("inlineCode",{parentName:"p"},"head"),", we need to (at least) define the ",Object(r.b)("inlineCode",{parentName:"p"},"default")," config under its ",Object(r.b)("inlineCode",{parentName:"p"},"scope"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'# Recall that in the `HeadConfigs` section, we\'ve explained why we need to define `HeadConfigs` subclass\n@cflearn.register_head_config("cross", "default")\nclass CrossHeadConfig(cflearn.HeadConfigs):\n    def get_default(self) -> Dict[str, Any]:\n        # We need to define `activation` because `CrossHead` requires it\n        # However we don\'t need to define `in_dim` and `out_dim`, because `carefree-learn` will handle them for us!\n        return {"activation": None}\n')),Object(r.b)("p",null,"With these two steps, we have already implemented a ready-to-use ",Object(r.b)("inlineCode",{parentName:"p"},"head")," which can perform cross-feature operations, so the next step is to utilize it:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'@cflearn.register_model("cross")\n@cflearn.register_pipe("cross")\nclass CrossNetwork(cflearn.ModelBase):\n    pass\n')),Object(r.b)("p",null,"Again, that's it! Let's run a small experiment to demonstrate the validaty of our new model:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),'cross = cflearn.make("cross", **kwargs).fit(x, y)\ncflearn.evaluate(x, y, pipelines=[fcnn, mul, cross])\n')),Object(r.b)("p",null,"Which yields"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-text"}),"================================================================================================================================\n|        metrics         |                       mae                        |                       mse                        |\n--------------------------------------------------------------------------------------------------------------------------------\n|                        |      mean      |      std       |     score      |      mean      |      std       |     score      |\n--------------------------------------------------------------------------------------------------------------------------------\n|         cross          |    0.049729    | -- 0.000000 -- |    -0.04972    |    0.004354    | -- 0.000000 -- |    -0.00435    |\n--------------------------------------------------------------------------------------------------------------------------------\n|          fcnn          |    0.065881    | -- 0.000000 -- |    -0.06588    |    0.008105    | -- 0.000000 -- |    -0.00810    |\n--------------------------------------------------------------------------------------------------------------------------------\n|     multiplication     | -- 0.000004 -- | -- 0.000000 -- | -- -0.00000 -- | -- 0.000000 -- | -- 0.000000 -- | -- -0.00000 -- |\n================================================================================================================================\n")),Object(r.b)("p",null,"Although the new ",Object(r.b)("inlineCode",{parentName:"p"},"cross")," model is not as good as the ",Object(r.b)("inlineCode",{parentName:"p"},"multiplication")," model (which is actually 'cheating' because it can see the ground truth labels directly), it outperforms ",Object(r.b)("inlineCode",{parentName:"p"},"fcnn")," significantly\ud83e\udd73"),Object(r.b)("h3",{id:"conclusions"},"Conclusions"),Object(r.b)("p",null,"The above two sections showed us how to customize our own ",Object(r.b)("inlineCode",{parentName:"p"},"extractor")," and ",Object(r.b)("inlineCode",{parentName:"p"},"head"),", which should be sufficient to implement most of the models targeting tabular datasets. ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," actually supports more customizations (e.g. metrics, initializations, etc), but they are more of some tricks than the main part of an algorithm. We hope that this guide can help you leverage ",Object(r.b)("inlineCode",{parentName:"p"},"carefree-learn")," in your own tasks!"),Object(r.b)("div",{className:"footnotes"},Object(r.b)("hr",{parentName:"div"}),Object(r.b)("ol",{parentName:"div"},Object(r.b)("li",Object(t.a)({parentName:"ol"},{id:"fn-1"}),"Wang, Ruoxi, et al. \u201cDeep & cross network for ad click predictions.\u201d Proceedings of the ADKDD\u201917. 2017. 1-7. ",Object(r.b)("a",Object(t.a)({parentName:"li"},{href:"#fnref-1",className:"footnote-backref"}),"\u21a9")))))}m.isMDXComponent=!0}}]);