(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{105:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return f}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),u=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=u(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,i=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),b=u(n),m=a,f=b["".concat(i,".").concat(m)]||b[m]||p[m]||c;return n?r.a.createElement(f,l(l({ref:t},s),{},{components:n})):r.a.createElement(f,l({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,i=new Array(c);i[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<c;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},106:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}},111:function(e,t,n){"use strict";var a=n(0),r=n(112);t.a=function(){const e=Object(a.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},112:function(e,t,n){"use strict";var a=n(0);const r=Object(a.createContext)(void 0);t.a=r},117:function(e,t,n){"use strict";var a=n(0),r=n.n(a),c=n(111),i=n(106),l=n(52),o=n.n(l);const s=37,u=39;t.a=function(e){const{lazy:t,block:n,children:l,defaultValue:b,values:p,groupId:m,className:f}=e,{tabGroupChoices:d,setTabGroupChoices:O}=Object(c.a)(),[j,g]=Object(a.useState)(b);if(null!=m){const e=d[m];null!=e&&e!==j&&p.some((t=>t.value===e))&&g(e)}const y=e=>{g(e),null!=m&&O(m,e)},h=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":n},f)},p.map((({value:e,label:t})=>r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===e,className:Object(i.a)("tabs__item",o.a.tabItem,{"tabs__item--active":j===e}),key:e,ref:e=>h.push(e),onKeyDown:e=>{((e,t,n)=>{switch(n.keyCode){case u:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case s:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(h,e.target,e)},onFocus:()=>y(e),onClick:()=>{y(e)}},t)))),t?Object(a.cloneElement)(l.filter((e=>e.props.value===j))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},l.map(((e,t)=>Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==j})))))}},118:function(e,t,n){"use strict";var a=n(3),r=n(0),c=n.n(r);t.a=function({children:e,hidden:t,className:n}){return c.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:t,className:n}),e)}},79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),c=(n(0),n(105)),i=n(117),l=n(118),o={id:"quick-start",title:"Quick Start"},s={unversionedId:"getting-started/quick-start",id:"getting-started/quick-start",isDocsHomePage:!1,title:"Quick Start",description:"In carefree-learn, it's both easy to train and serialize a model:",source:"@site/docs\\getting-started\\quick-start.md",slug:"/getting-started/quick-start",permalink:"/carefree-learn-doc/docs/getting-started/quick-start",version:"current",lastUpdatedAt:1605833812,sidebar:"docs",previous:{title:"Installation",permalink:"/carefree-learn-doc/docs/getting-started/installation"},next:{title:"Configurations",permalink:"/carefree-learn-doc/docs/getting-started/configurations"}},u=[{value:"Training",id:"training",children:[]},{value:"Serializing",id:"serializing",children:[]}],b={rightToc:u};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"In ",Object(c.b)("inlineCode",{parentName:"p"},"carefree-learn"),", it's both easy to train and serialize a model:"),Object(c.b)("h2",{id:"training"},"Training"),Object(c.b)(i.a,{defaultValue:"numpy",values:[{label:"With NumPy",value:"numpy"},{label:"With File",value:"file"}],mdxType:"Tabs"},Object(c.b)(l.a,{value:"numpy",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"import cflearn\nfrom cfdata.tabular import TabularDataset\n\nx, y = TabularDataset.iris().xy\nm = cflearn.make().fit(x, y)\n# Make label predictions\nm.predict(x)\n# Make probability predictions\nm.predict_prob(x)\n# Estimate performance\ncflearn.estimate(x, y, pipelines=m)\n")),Object(c.b)("p",null,"Then you will see something like this:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"================================================================================================================================\n|        metrics         |                       acc                        |                       auc                        |\n--------------------------------------------------------------------------------------------------------------------------------\n|                        |      mean      |      std       |     score      |      mean      |      std       |     score      |\n--------------------------------------------------------------------------------------------------------------------------------\n|          fcnn          |    0.946667    |    0.000000    |    0.946667    |    0.993200    |    0.000000    |    0.993200    |\n================================================================================================================================\n"))),Object(c.b)(l.a,{value:"file",mdxType:"TabItem"},Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"carefree-learn")," can also easily fit / predict / estimate directly on files (",Object(c.b)("strong",{parentName:"p"},"file-in, file-out"),"). Suppose we have an ",Object(c.b)("inlineCode",{parentName:"p"},"xor.txt")," file with following contents:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"0,0,0\n0,1,1\n1,0,1\n1,1,0\n")),Object(c.b)("p",null,"Then ",Object(c.b)("inlineCode",{parentName:"p"},"carefree-learn")," can be utilized with only few lines of code:"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},Object(c.b)("inlineCode",{parentName:"p"},"delim")," refers to 'delimiter', and ",Object(c.b)("inlineCode",{parentName:"p"},"has_column_names")," refers to whether the file has column names (or, header) or not."),Object(c.b)("p",{parentName:"blockquote"},"Please refer to ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-data/blob/dev/README.md"}),"carefree-data")," if you're interested in more details.")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\nm = cflearn.make(delim=",", has_column_names=False).fit("xor.txt", x_cv="xor.txt")\n# `contains_labels` is set to True because we\'re evaluating on training set\ncflearn.estimate("xor.txt", pipelines=m, contains_labels=True)\n')),Object(c.b)("p",null,"After which you will see something like this:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"================================================================================================================================\n|        metrics         |                       acc                        |                       auc                        |\n--------------------------------------------------------------------------------------------------------------------------------\n|                        |      mean      |      std       |     score      |      mean      |      std       |     score      |\n--------------------------------------------------------------------------------------------------------------------------------\n|          fcnn          |    1.000000    |    0.000000    |    1.000000    |    1.000000    |    0.000000    |    1.000000    |\n================================================================================================================================\n")),Object(c.b)("p",null,"When we fit from files, we can predict on either files or lists:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'print(m.predict([[0, 0]]))   # [[0]]\nprint(m.predict([[0, 1]]))   # [[1]]\nprint(m.predict("xor.txt", contains_labels=True))  # [ [0] [1] [1] [0] ]\n')))),Object(c.b)("h2",{id:"serializing"},"Serializing"),Object(c.b)("p",null,"It is also worth mentioning that ",Object(c.b)("inlineCode",{parentName:"p"},"carefree-learn")," models can be saved easily, into a zip file!"),Object(c.b)("p",null,"For example, a ",Object(c.b)("inlineCode",{parentName:"p"},"cflearn^_^fcnn.zip")," file will be created with one line of code:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"cflearn.save(m)\n")),Object(c.b)("p",null,"Of course, loading ",Object(c.b)("inlineCode",{parentName:"p"},"carefree-learn")," models are easy too!"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"m = cflearn.load()\nprint(m)  # {'fcnn': FCNN()}\n")))}p.isMDXComponent=!0}}]);