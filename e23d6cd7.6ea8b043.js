(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{91:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return p}));var a=n(3),i=n(7),l=(n(0),n(97)),r={id:"general",title:"General"},o={unversionedId:"user-guides/general",id:"user-guides/general",isDocsHomePage:!1,title:"General",description:"+ For configurations guide, please refer to the Configurations section.",source:"@site/docs/user-guides/general.md",slug:"/user-guides/general",permalink:"/carefree-learn-doc/docs/user-guides/general",version:"current",lastUpdatedAt:1634636573,sidebar:"docs",previous:{title:"Operations",permalink:"/carefree-learn-doc/docs/examples/Operations"},next:{title:"Computer Vision \ud83d\uddbc\ufe0f",permalink:"/carefree-learn-doc/docs/user-guides/computer-vision"}},b=[{value:"Introduction",id:"introduction",children:[{value:"<code>fit</code>",id:"fit",children:[]},{value:"<code>predict</code>",id:"predict",children:[]},{value:"<code>save</code>",id:"save",children:[]},{value:"<code>load</code>",id:"load",children:[]},{value:"<code>to_onnx</code>",id:"to_onnx",children:[]}]}],c={rightToc:b};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(l.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("ul",{parentName:"div"},Object(l.b)("li",{parentName:"ul"},"For configurations guide, please refer to the ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"../getting-started/configurations"}),"Configurations")," section."),Object(l.b)("li",{parentName:"ul"},"For development guide, please refer to the ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"../developer-guides/general-customization"}),"Developer Guides")," section.")))),Object(l.b)("h2",{id:"introduction"},"Introduction"),Object(l.b)("p",null,"In this section, we will introduce how to utilize ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," to solve deep learning tasks in general."),Object(l.b)("p",null,"Recall that ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"../design-principles#pipeline"}),Object(l.b)("inlineCode",{parentName:"a"},"Pipeline"))," serves as the (internal) user interface in ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn"),", so one of the main effort of utilizing ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," will be how to construct a suitable ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"../design-principles#pipeline"}),Object(l.b)("inlineCode",{parentName:"a"},"Pipeline")),"."),Object(l.b)("div",{className:"admonition admonition-info alert alert--info"},Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("ul",{parentName:"div"},Object(l.b)("li",{parentName:"ul"},"Please refer to the ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"../getting-started/configurations"}),"Configurations")," section for more details on how to construct a ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"../design-principles#pipeline"}),"Pipeline"),"."),Object(l.b)("li",{parentName:"ul"},"Please refer to the ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"../getting-started/configurations#supported-models"}),"Supported Models")," section to see currently supported models.")))),Object(l.b)("p",null,"After a ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"../design-principles#pipeline"}),Object(l.b)("inlineCode",{parentName:"a"},"Pipeline"))," is constructed, another effort will be how to define our dataset. Although different tasks require different data format, ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," introduced ",Object(l.b)("inlineCode",{parentName:"p"},"DLDataModule")," to unify the APIs, which means we can always utilize ",Object(l.b)("inlineCode",{parentName:"p"},"carefree-learn")," in this way more or less:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"import cflearn\n\nm = cflearn.api.xxx(...)  # construct `Pipeline`, based on your model\ndata = ...                # construct `DLDataModule`, based on your dataset\nm.fit(data)               # train your model on your dataset!\n")),Object(l.b)("div",{className:"admonition admonition-info alert alert--info"},Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(l.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("ul",{parentName:"div"},Object(l.b)("li",{parentName:"ul"},"Please refer to ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"machine-learning#mldata"}),"MLData")," section to see how to construct ",Object(l.b)("inlineCode",{parentName:"li"},"DLDataModule")," for ML tasks."),Object(l.b)("li",{parentName:"ul"},"Please refer to ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"computer-vision#imagefolderdata"}),"ImageFolderData")," section to see how to construct ",Object(l.b)("inlineCode",{parentName:"li"},"DLDataModule")," for CV tasks.")))),Object(l.b)("p",null,"As shown above, ",Object(l.b)("inlineCode",{parentName:"p"},"Pipeline")," implements ",Object(l.b)("inlineCode",{parentName:"p"},"fit")," method to train models on datasets, which is similar to ",Object(l.b)("inlineCode",{parentName:"p"},"scikit-learn"),". Details of the high level APIs will be described in the following sections."),Object(l.b)("h3",{id:"fit"},Object(l.b)("inlineCode",{parentName:"h3"},"fit")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"def fit(\n    self,\n    data: DLDataModule,\n    *,\n    sample_weights: sample_weights_type = None,\n    cuda: Optional[Union[int, str]] = None,\n) -> DLPipeline:\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"data")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"DLDataModule")," constructed by our dataset."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"sample_weights"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"This is an experimental feature and is not fully supported."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"cuda")),"  ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify which ",Object(l.b)("inlineCode",{parentName:"li"},"cuda")," device we would like to train our models on."),Object(l.b)("li",{parentName:"ul"},"If not provided, no ",Object(l.b)("inlineCode",{parentName:"li"},"cuda")," will be used and ",Object(l.b)("inlineCode",{parentName:"li"},"cpu")," will be used.")))),Object(l.b)("h4",{id:"example"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"m.fit(data)\n")),Object(l.b)("h3",{id:"predict"},Object(l.b)("inlineCode",{parentName:"h3"},"predict")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"def predict(\n    self,\n    data: DLDataModule,\n    *,\n    batch_size: int = 128,\n    make_loader_kwargs: Optional[Dict[str, Any]] = None,\n    **predict_kwargs: Any,\n) -> np_dict_type:\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"data")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"DLDataModule")," constructed by our (new) dataset."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"batch_size"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"128"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the size of each batch we would like to use."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"make_loader_kwargs"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify some extra configurations we would like to use when constructing the ",Object(l.b)("inlineCode",{parentName:"li"},"DataLoader"),"."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"predict_kwargs"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify some extra parameters we would like to use when running the forward pass.")))),Object(l.b)("h4",{id:"example-1"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"# `predictions` will be a dictionary of np.ndarray\npredictions = m.predict(data)\n")),Object(l.b)("h3",{id:"save"},Object(l.b)("inlineCode",{parentName:"h3"},"save")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"def save(\n    self,\n    export_folder: str,\n    *,\n    compress: bool = True,\n    remove_original: bool = True,\n) -> DLPipeline:\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"export_folder")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the export folder."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"compress"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"True"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether should we compress the exported stuffs to a ",Object(l.b)("inlineCode",{parentName:"li"},".zip")," file or not."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"remove_original"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"True"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether should we remove the original folder after compressing or not.")))),Object(l.b)("h4",{id:"example-2"},"Example"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'# a `model.zip` file will be generated in the current working directory\nm.save("model")\n')),Object(l.b)("h3",{id:"load"},Object(l.b)("inlineCode",{parentName:"h3"},"load")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"@staticmethod\ndef load(\n    export_folder: str,\n    *,\n    cuda: Optional[Union[int, str]] = None,\n    compress: bool = True,\n    states_callback: states_callback_type = None,\n    pre_callback: Optional[Callable[[Dict[str, Any]], None]] = None,\n    post_callback: Optional[Callable[[DLPipeline, Dict[str, Any]], None]] = None,\n) -> DLPipeline:\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"export_folder")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the export folder."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"cuda"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify which ",Object(l.b)("inlineCode",{parentName:"li"},"cuda")," device we would like to load the models on."),Object(l.b)("li",{parentName:"ul"},"If not provided, we will load the models to ",Object(l.b)("inlineCode",{parentName:"li"},"cpu")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"compress"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"True"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether the saved stuffs are compressed or not."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"states_callback"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the callback we would like to apply to the saved parameters."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"pre_callback"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the callback we would like to apply to the saved configurations."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"post_callback"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the callback we would like to apply after the ",Object(l.b)("inlineCode",{parentName:"li"},"Pipeline")," is loaded.")))),Object(l.b)("h3",{id:"to_onnx"},Object(l.b)("inlineCode",{parentName:"h3"},"to_onnx")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'def to_onnx(\n    self,\n    export_folder: str,\n    dynamic_axes: Optional[Union[List[int], Dict[int, str]]] = None,\n    *,\n    onnx_file: str = "model.onnx",\n    opset: int = 11,\n    simplify: bool = True,\n    onnx_only: bool = False,\n    forward_fn: Optional[Callable[[Dict[str, Any]], Dict[str, Any]]] = None,\n    output_names: Optional[List[str]] = None,\n    input_sample: Optional[tensor_dict_type] = None,\n    num_samples: Optional[int] = None,\n    compress: Optional[bool] = None,\n    remove_original: bool = True,\n    verbose: bool = True,\n    **kwargs: Any,\n) -> DLPipeline:\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"export_folder")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the export folder."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"dynamic_axes"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the dynamic axes."),Object(l.b)("li",{parentName:"ul"},"Notice that the first axis, which usually represents the batch size, should not be included here."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"onnx_file"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},'"model.onnx"'),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the name of the saved onnx file."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"opset"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"11"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the target opset version."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"simplify"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"True"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether should we simplify the exported onnx file using ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/daquexian/onnx-simplifier"}),"onnx-simplifier"),"."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"onnx_only"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"False"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether should we save all the information or not."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"forward_fn"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If provided, we will replace the original forward pass with it when exporting to onnx."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"output_names"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the names of the outputs."),Object(l.b)("li",{parentName:"ul"},"If not provided, ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," will infer the correct ones automatically."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"input_sample"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify the input sample for the forward pass."),Object(l.b)("li",{parentName:"ul"},"If not provided, ",Object(l.b)("inlineCode",{parentName:"li"},"carefree-learn")," will utilize the training ",Object(l.b)("inlineCode",{parentName:"li"},"DataLoader")," to generate it.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"However sometimes the training ",Object(l.b)("inlineCode",{parentName:"li"},"DataLoader")," may not exist, in which case we should provide the ",Object(l.b)("inlineCode",{parentName:"li"},"input_sample")," manually."))))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"num_samples"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"None"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether should we use dynamic batch size or not."),Object(l.b)("li",{parentName:"ul"},"If not provided, the exported onnx file will have dynamic batch size."),Object(l.b)("li",{parentName:"ul"},"If provided, the exported onnx file will have fixed batch size (equals to ",Object(l.b)("inlineCode",{parentName:"li"},"num_samples"),").",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"In most cases, ",Object(l.b)("inlineCode",{parentName:"li"},"num_samples")," will be either ",Object(l.b)("inlineCode",{parentName:"li"},"None")," or ",Object(l.b)("inlineCode",{parentName:"li"},"1"),"."))))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"compress"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"True"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether should we compress the exported stuffs to a ",Object(l.b)("inlineCode",{parentName:"li"},".zip")," file or not."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"remove_original"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"True"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify whether should we remove the original folder after compressing or not."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"verbose"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"True"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify if we want to log some messages to the console."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"strong"},"kwargs"))," ","[default = ",Object(l.b)("inlineCode",{parentName:"li"},"{}"),"]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Specify other keyword arguments we want to use in ",Object(l.b)("inlineCode",{parentName:"li"},"torch.onnx.export"),".")))))}p.isMDXComponent=!0},97:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),s=p(n),d=a,u=s["".concat(r,".").concat(d)]||s[d]||m[d]||l;return n?i.a.createElement(u,o(o({ref:t},c),{},{components:n})):i.a.createElement(u,o({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=d;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var c=2;c<l;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);