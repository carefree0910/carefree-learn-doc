(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{109:function(e,a,t){"use strict";t.d(a,"a",(function(){return b})),t.d(a,"b",(function(){return u}));var n=t(0),r=t.n(n);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),p=function(e){var a=r.a.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):c(c({},a),e)),t},b=function(e){var a=p(e.components);return r.a.createElement(l.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},m=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(t),m=n,u=b["".concat(o,".").concat(m)]||b[m]||d[m]||i;return t?r.a.createElement(u,c(c({ref:a},l),{},{components:t})):r.a.createElement(u,c({ref:a},l))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=m;var c={};for(var s in a)hasOwnProperty.call(a,s)&&(c[s]=a[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return o})),t.d(a,"metadata",(function(){return c})),t.d(a,"rightToc",(function(){return s})),t.d(a,"default",(function(){return p}));var n=t(3),r=t(7),i=(t(0),t(109)),o={id:"auto-ml",title:"AutoML"},c={unversionedId:"user-guides/auto-ml",id:"user-guides/auto-ml",isDocsHomePage:!1,title:"AutoML",description:"carefree-learn provides cflearn.Auto API for out-of-the-box usages.",source:"@site/docs/user-guides/auto-ml.md",slug:"/user-guides/auto-ml",permalink:"/carefree-learn-doc/docs/user-guides/auto-ml",version:"current",lastUpdatedAt:1608635724,sidebar:"docs",previous:{title:"APIs",permalink:"/carefree-learn-doc/docs/user-guides/apis"},next:{title:"Distributed",permalink:"/carefree-learn-doc/docs/user-guides/distributed"}},s=[{value:"Explained",id:"explained",children:[]},{value:"Configurations",id:"configurations",children:[{value:"Define Model Space",id:"define-model-space",children:[]},{value:"Define Search Spaces",id:"define-search-spaces",children:[]},{value:"Define Extra Configurations",id:"define-extra-configurations",children:[]}]},{value:"Production",id:"production",children:[]}],l={rightToc:s};function p(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," provides ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto")," API for out-of-the-box usages."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\nfrom cfdata.tabular import *\n\n# prepare iris dataset\niris = TabularDataset.iris()\niris = TabularData.from_dataset(iris)\n# split 10% of the data as validation data\nsplit = iris.split(0.1)\ntrain, valid = split.remained, split.split\nx_tr, y_tr = train.processed.xy\nx_cv, y_cv = valid.processed.xy\ndata = x_tr, y_tr, x_cv, y_cv\n\n\nif __name__ == \'__main__\':\n    # standard usage\n    fcnn = cflearn.make().fit(*data)\n\n    # \'overfit\' validation set\n    # * `clf` indicates this is a classification task\n    # * for regression tasks, use `reg` instead\n    auto = cflearn.Auto("clf").fit(*data, num_jobs=2)\n\n    # evaluate manually\n    predictions = auto.predict(x_cv)\n    print("accuracy:", (y_cv == predictions).mean())\n\n    # evaluate with `cflearn`\n    cflearn.evaluate(\n        x_cv,\n        y_cv,\n        pipelines=fcnn,\n        other_patterns={"auto": auto.pattern},\n    )\n')),Object(i.b)("p",null,"Which yields"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"================================================================================================================================\n|        metrics         |                       acc                        |                       auc                        |\n--------------------------------------------------------------------------------------------------------------------------------\n|                        |      mean      |      std       |     score      |      mean      |      std       |     score      |\n--------------------------------------------------------------------------------------------------------------------------------\n|          auto          | -- 1.000000 -- | -- 0.000000 -- | -- 1.000000 -- | -- 1.000000 -- | -- 0.000000 -- | -- 1.000000 -- |\n--------------------------------------------------------------------------------------------------------------------------------\n|          fcnn          |    0.933333    | -- 0.000000 -- |    0.933333    |    0.993333    | -- 0.000000 -- |    0.993333    |\n================================================================================================================================\n")),Object(i.b)("h2",{id:"explained"},"Explained"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto.fit")," will run through the following steps:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"define the model space automatically (or manually; see ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#define-model-space"}),"Define Model Space")," for more details)."),Object(i.b)("li",{parentName:"ol"},"fetch pre-defined hyper-parameters search space of each model from ",Object(i.b)("inlineCode",{parentName:"li"},"OptunaPresetParams")," (and inject manual configurations, if provided; see ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#define-extra-configurations"}),"Define Extra Configurations")," for more details)."),Object(i.b)("li",{parentName:"ol"},"leverage ",Object(i.b)("inlineCode",{parentName:"li"},"optuna")," with ",Object(i.b)("inlineCode",{parentName:"li"},"cflearn.optuna_tune")," to perform hyper-parameters optimization."),Object(i.b)("li",{parentName:"ol"},"use searched hyper-parameters to train each model multiple times (separately)."),Object(i.b)("li",{parentName:"ol"},"ensemble all trained models (with ",Object(i.b)("inlineCode",{parentName:"li"},"cflearn.Ensemble.stacking"),")."),Object(i.b)("li",{parentName:"ol"},"record all these results to corresponding attributes.")),Object(i.b)("p",null,"So after ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto.fit"),", we can perform visualizations provided by ",Object(i.b)("inlineCode",{parentName:"p"},"optuna")," easily:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'export_folder = "iris_vis"\nauto.plot_param_importances("fcnn", export_folder=export_folder)\nauto.plot_intermediate_values("fcnn", export_folder=export_folder)\n')),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"It is also worth mentioning that we can pass file datasets into ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto")," as well. See ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/3fb03dbfc3e2b494f2ab03b9d8f07683fe30e7ef/tests/usages/test_basic.py#L221"}),"test_auto_file")," for more details."))),Object(i.b)("h2",{id:"configurations"},"Configurations"),Object(i.b)("p",null,"Although ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto")," could achieve acceptable performances, we can manually adjust its behaviour for even better ones as well."),Object(i.b)("h3",{id:"define-model-space"},"Define Model Space"),Object(i.b)("p",null,"Model space could be defined by specifying the ",Object(i.b)("inlineCode",{parentName:"p"},"models")," in ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'auto = cflearn.Auto(..., models="fcnn")\n')),Object(i.b)("p",null,"or"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'auto = cflearn.Auto(..., models=["linear", "fcnn"])\n')),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"By default, ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto")," will use a large model space and hope for the best:"),Object(i.b)("pre",{parentName:"div"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'if models == "auto":\n    models = ["linear", "fcnn", "tree_dnn"]\n    parsed_task_type = parse_task_type(task_type)\n    # time series tasks\n    if parsed_task_type.is_ts:\n        models += ["rnn", "transformer"]\n    # classification tasks\n    elif parsed_task_type.is_clf:\n        models += ["nnb", "ndt"]\n    # regression tasks\n    else:\n        models.append("ddr")\n')),Object(i.b)("p",{parentName:"div"},"We recommend to use ",Object(i.b)("inlineCode",{parentName:"p"},'models="fcnn"')," before actually dive into this bunch of models \ud83e\udd23"))),Object(i.b)("h3",{id:"define-search-spaces"},"Define Search Spaces"),Object(i.b)("p",null,"Search spaces could be defined by specifying the ",Object(i.b)("inlineCode",{parentName:"p"},"params")," in ",Object(i.b)("inlineCode",{parentName:"p"},"fit"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"auto.fit(..., params={...})\n")),Object(i.b)("p",null,"However customizing ",Object(i.b)("inlineCode",{parentName:"p"},"params")," requires some more steps, and we'll illustrate how to do so in the following sub-sections."),Object(i.b)("h4",{id:"optunaparam"},Object(i.b)("inlineCode",{parentName:"h4"},"OptunaParam")),Object(i.b)("p",null,"As shown in the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../getting-started/configurations#make"}),Object(i.b)("inlineCode",{parentName:"a"},"make"))," API, we can specify configurations through ",Object(i.b)("inlineCode",{parentName:"p"},"kwargs"),". Customizing ",Object(i.b)("inlineCode",{parentName:"p"},"params")," is actually no more than customizing this ",Object(i.b)("inlineCode",{parentName:"p"},"kwargs"),", except it should turn the target hyperparameter from a specific value to an ",Object(i.b)("inlineCode",{parentName:"p"},"OptunaParam"),"."),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"If you are more interested in codes than a step by step tutorial, you can jump to the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#in-a-nut-shell"}),"In a Nut Shell")," section directly."))),Object(i.b)("p",null,"For example, if we want to use ",Object(i.b)("inlineCode",{parentName:"p"},"sgd")," instead of the default ",Object(i.b)("inlineCode",{parentName:"p"},"adamw"),", we can simply"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\nimport numpy as np\n\nx = np.random.random([1000, 10])\ny = np.random.random([1000, 1])\nm = cflearn.make(optimizer="sgd").fit(x, y)\nprint(m.trainer.optimizers["all"])  # SGD(...)\n')),Object(i.b)("p",null,"but we are not sure which one is better, and here's AutoML that comes to help. Since we should choose from either ",Object(i.b)("inlineCode",{parentName:"p"},"sgd")," or ",Object(i.b)("inlineCode",{parentName:"p"},"adamw"),", the search space is pretty simple:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'optimizer_param = cflearn.OptunaParam(\n    "opt",             # this should be the unique identifier of this search space\n    ["sgd", "adamw"],  # here are the parameters of this search space\n    "categorical",     # this is the type of this search space\n)\nparams = {\n    # since different model may require different search space\n    # we should specify which model does this search space belong to\n    # * the "optimizer" argument here should correspond to the one in `make`\n    "linear": {"optimizer": optimizer_param},\n}\n')),Object(i.b)("p",null,"After which we can perform AutoML on this search space:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# notice that we\'ve constraint the model space to `linear`\n# because we\'ve only defined the search space for `linear`\nauto = cflearn.Auto("reg", models="linear").fit(x, y, params=params)\n')),Object(i.b)("p",null,"Which yields"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"[I 2020-12-22 18:16:44,946] A new study created in memory with name: linear_optuna\n[I 2020-12-22 18:16:49,200] Trial 0 finished with value: -1.174601199105382 and parameters: {'opt': 'adamw'}. Best is trial 0 with value: -1.174601199105382.\n[I 2020-12-22 18:16:55,643] Trial 1 finished with value: -1.1822145022451878 and parameters: {'opt': 'sgd'}. Best is trial 0 with value: -1.174601199105382.\n[I 2020-12-22 18:17:02,122] Trial 2 finished with value: -1.2407564036548138 and parameters: {'opt': 'sgd'}. Best is trial 0 with value: -1.174601199105382.\n[I 2020-12-22 18:17:05,218] Trial 3 finished with value: -1.2113975938409567 and parameters: {'opt': 'adamw'}. Best is trial 0 with value: -1.174601199105382.\n......\n")),Object(i.b)("p",null,"As shown above, ",Object(i.b)("inlineCode",{parentName:"p"},"optuna")," will try to search the best hyperparameters with the defined search space for us. Since our search space only contains two possible choices (",Object(i.b)("inlineCode",{parentName:"p"},"{'opt': 'sgd'}")," and ",Object(i.b)("inlineCode",{parentName:"p"},"{'opt': 'adamw'}"),"), ",Object(i.b)("inlineCode",{parentName:"p"},"optuna")," will jump between these two choices over and over again."),Object(i.b)("p",null,"After the searching we can obtain the searched optimizer via ",Object(i.b)("inlineCode",{parentName:"p"},"best_params"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'print(auto.best_params["optimizer"])\n')),Object(i.b)("h4",{id:"in-a-nut-shell"},"In a Nut Shell"),Object(i.b)("p",null,"To recap, if we want to search for a certain hyperparameter, instead of specifying a concrete value, we need to define its search space via ",Object(i.b)("inlineCode",{parentName:"p"},"OptunaParam"),". For example:"),Object(i.b)("h5",{id:"the-optimizer-search-space"},"the ",Object(i.b)("inlineCode",{parentName:"h5"},"optimizer")," search space"),Object(i.b)("p",null,"We need to turn"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'params = {"optimizer": "sgd"}\ncflearn.make(config=params).fit(x, y)\n')),Object(i.b)("p",null,"into"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# you can change "opt" into any other (unique) identifier\noptimizer_param = cflearn.OptunaParam("opt", ["sgd", "adamw"], "categorical")\n# xxx here is your model\nparams = {"xxx": {"optimizer": optimizer_param}}\n')),Object(i.b)("h4",{id:"default-search-space"},"Default Search Space"),Object(i.b)("p",null,"The default search space of ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," have already provided examples on how to define search space for some critical hyperparameters (e.g. optimizer, learning rate, etc.). To be concrete, ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," will use ",Object(i.b)("inlineCode",{parentName:"p"},"OptunaPresetParams")," to manage a set of default search spaces:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"class Auto:\n    def __init__(self, ...):\n        ...\n        self.preset_params = OptunaPresetParams(...)\n    \n    def fit(self, ...):\n        if params is not None:\n            model_params = params[model]\n        else:\n            model_params = self.preset_params.get(model)\n")),Object(i.b)("p",null,"And the definition of ",Object(i.b)("inlineCode",{parentName:"p"},"OptunaPresetParams")," is:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"class OptunaPresetParams:\n    def __init__(\n        self,\n        *,\n        tune_lr: bool = True,\n        tune_optimizer: bool = True,\n        tune_scheduler: bool = True,\n        ...,\n        **kwargs: Any,\n    ) -> None:\n        self.base_params: optuna_params_type = {}\n        if tune_lr:\n            # update base_params with learning rate search space\n            ...\n        if tune_optimizer:\n            # update base_params with optimizer search space\n            ...\n        ...\n\n    def get(self, model: str) -> optuna_params_type:\n        # Will execute self._{model}_preset() (e.g. self._fcnn_preset()) here\n        ...\n    \n    def _linear_preset(self):\n        # Will return the default search space for `linear` model\n        # * since `linear` model is very simple, we can return the base_params directly\n        return shallow_copy_dict(self.base_params)\n\n    def _fcnn_preset(self):\n        # Will return the default search space for `fcnn` model\n        ...\n")),Object(i.b)("h3",{id:"define-extra-configurations"},"Define Extra Configurations"),Object(i.b)("p",null,"If we want to change some default behaviours of ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto"),", we can specify the ",Object(i.b)("inlineCode",{parentName:"p"},"extra_configs")," in ",Object(i.b)("inlineCode",{parentName:"p"},"fit"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"auto.fit(..., extra_config={...})\n")),Object(i.b)("p",null,"And the usage of ",Object(i.b)("inlineCode",{parentName:"p"},"extra_config")," should be equivalent to the usage of ",Object(i.b)("inlineCode",{parentName:"p"},"config")," in ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../getting-started/configurations#make"}),Object(i.b)("inlineCode",{parentName:"a"},"make"))," API."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},Object(i.b)("inlineCode",{parentName:"p"},"extra_config")," is not able to overwrite the hyperparameters generated by the search space, so in fact the options we can play with it are limited \ud83e\udd23"))),Object(i.b)("h2",{id:"production"},"Production"),Object(i.b)("p",null,"What's facinating is that we can pack the models trained by ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.Auto")," into a zip file for production:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'auto.pack("pack")\n')),Object(i.b)("p",null,"Please refer to ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"production#automl-in-production"}),"AutoML in Production")," for more details."))}p.isMDXComponent=!0}}]);