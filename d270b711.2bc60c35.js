(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{108:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return f}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),u=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=u(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),s=u(t),b=r,f=s["".concat(c,".").concat(b)]||s[b]||d[b]||o;return t?a.a.createElement(f,i(i({ref:n},l),{},{components:t})):a.a.createElement(f,i({ref:n},l))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,c=new Array(o);c[0]=b;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var l=2;l<o;l++)c[l]=t[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},157:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/pack-41dffc5a04b9a5b2aa919f124e2b5d8f.png"},99:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return u}));var r=t(3),a=t(7),o=(t(0),t(108)),c={id:"production",title:"Production"},i={unversionedId:"user-guides/production",id:"user-guides/production",isDocsHomePage:!1,title:"Production",description:"carefree-learn supports onnx export, but we need much more than one single model (predictor) in production environment:",source:"@site/docs/user-guides/production.md",slug:"/user-guides/production",permalink:"/carefree-learn-doc/docs/user-guides/production",version:"current",lastUpdatedAt:1606054728,sidebar:"docs",previous:{title:"Distributed",permalink:"/carefree-learn-doc/docs/user-guides/distributed"},next:{title:"Examples",permalink:"/carefree-learn-doc/docs/user-guides/examples"}},p=[],l={rightToc:p};function u(e){var n=e.components,c=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,c,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"carefree-learn")," supports ",Object(o.b)("inlineCode",{parentName:"p"},"onnx")," export, but we need much more than one single model (",Object(o.b)("inlineCode",{parentName:"p"},"predictor"),") in production environment:"),Object(o.b)("p",null,Object(o.b)("img",{alt:"Pack",src:t(157).default})),Object(o.b)("p",null,"Fortunately, ",Object(o.b)("inlineCode",{parentName:"p"},"carefree-learn")," also supports exporting every part of this pipeline into a zip file with one line of code. Let's first train a simple model on ",Object(o.b)("inlineCode",{parentName:"p"},"iris")," dataset:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"import cflearn\nfrom cfdata.tabular import TabularDataset\n\nx, y = TabularDataset.iris().xy\nm = cflearn.make().fit(x, y)\n")),Object(o.b)("p",null,"After which we can pack everything up with ",Object(o.b)("inlineCode",{parentName:"p"},"cflearn.Pack")," API:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'cflearn.Pack.pack(m, "pack")\n')),Object(o.b)("p",null,"This will generate a ",Object(o.b)("inlineCode",{parentName:"p"},"pack.zip")," in the working directory with following file structure:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text"}),"|--- preprocessor\n   |-- ...\n|--- binary_config.json\n|--- m.onnx\n|--- output_names.json\n|--- output_probabilities.txt\n")),Object(o.b)("p",null,"We can make inference with ",Object(o.b)("inlineCode",{parentName:"p"},"pack.zip")," on our production environments / machines easily:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\npredictor = cflearn.Pack.get_predictor("pack")\npredictions = predictor.predict(x)\n')))}u.isMDXComponent=!0}}]);