(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{108:function(e,a,t){"use strict";t.d(a,"a",(function(){return p})),t.d(a,"b",(function(){return u}));var n=t(0),r=t.n(n);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function c(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?c(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),b=function(e){var a=r.a.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=b(e.components);return r.a.createElement(l.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},d=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=b(t),d=n,u=p["".concat(c,".").concat(d)]||p[d]||m[d]||i;return t?r.a.createElement(u,o(o({ref:a},l),{},{components:t})):r.a.createElement(u,o({ref:a},l))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,c=new Array(i);c[0]=d;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,c[1]=o;for(var l=2;l<i;l++)c[l]=t[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},109:function(e,a,t){"use strict";function n(e){var a,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(a=0;a<e.length;a++)e[a]&&(t=n(e[a]))&&(r&&(r+=" "),r+=t);else for(a in e)e[a]&&(r&&(r+=" "),r+=a);return r}a.a=function(){for(var e,a,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(a=n(e))&&(r&&(r+=" "),r+=a);return r}},113:function(e,a,t){"use strict";var n=t(0),r=t(114);a.a=function(){var e=Object(n.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},114:function(e,a,t){"use strict";var n=t(0),r=Object(n.createContext)(void 0);a.a=r},116:function(e,a,t){"use strict";var n=t(0),r=t.n(n),i=t(113),c=t(109),o=t(52),s=t.n(o),l=37,b=39;a.a=function(e){var a=e.lazy,t=e.block,o=e.children,p=e.defaultValue,m=e.values,d=e.groupId,u=e.className,O=Object(i.a)(),j=O.tabGroupChoices,h=O.setTabGroupChoices,f=Object(n.useState)(p),g=f[0],N=f[1];if(null!=d){var w=j[d];null!=w&&w!==g&&m.some((function(e){return e.value===w}))&&N(w)}var v=function(e){N(e),null!=d&&h(d,e)},_=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":t},u)},m.map((function(e){var a=e.value,t=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===a,className:Object(c.a)("tabs__item",s.a.tabItem,{"tabs__item--active":g===a}),key:a,ref:function(e){return _.push(e)},onKeyDown:function(e){!function(e,a,t){switch(t.keyCode){case b:!function(e,a){var t=e.indexOf(a)+1;e[t]?e[t].focus():e[0].focus()}(e,a);break;case l:!function(e,a){var t=e.indexOf(a)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,a)}}(_,e.target,e)},onFocus:function(){return v(a)},onClick:function(){v(a)}},t)}))),a?Object(n.cloneElement)(o.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},o.map((function(e,a){return Object(n.cloneElement)(e,{key:a,hidden:e.props.value!==g})}))))}},117:function(e,a,t){"use strict";var n=t(3),r=t(0),i=t.n(r);a.a=function(e){var a=e.children,t=e.hidden,r=e.className;return i.a.createElement("div",Object(n.a)({role:"tabpanel"},{hidden:t,className:r}),a)}},182:function(e,a,t){"use strict";t.r(a),a.default=t.p+"assets/files/brand_new_model-3e26fcec397cbd61a610648e271a27e7.png"},183:function(e,a,t){"use strict";t.r(a),a.default=t.p+"assets/images/brand_new_model-3e26fcec397cbd61a610648e271a27e7.png"},184:function(e,a,t){"use strict";t.r(a),a.default=t.p+"assets/images/cross-layer-4bb796af04e7e339bf417ec9fc608822.png"},82:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return s})),t.d(a,"metadata",(function(){return l})),t.d(a,"rightToc",(function(){return b})),t.d(a,"default",(function(){return m}));var n=t(3),r=t(7),i=(t(0),t(108)),c=t(116),o=t(117),s={id:"customization",title:"Build Your Own Models",sidebar_label:"Customization"},l={unversionedId:"developer-guides/customization",id:"developer-guides/customization",isDocsHomePage:!1,title:"Build Your Own Models",description:"In this page we will go through some basic concepts we need to know to build our own models in carefree-learn. Customizing carefree-learn could be very easy if you only want to construct existing modules to form a new model structure, and should also be fairly straight forward even if you want to implement your own modules.",source:"@site/docs/developer-guides/customization.md",slug:"/developer-guides/customization",permalink:"/carefree-learn-doc/docs/developer-guides/customization",version:"current",lastUpdatedAt:1607791236,sidebar_label:"Customization",sidebar:"docs",previous:{title:"Production",permalink:"/carefree-learn-doc/docs/user-guides/production"},next:{title:"Contributing",permalink:"/carefree-learn-doc/docs/developer-guides/contributing"}},b=[{value:"<code>Configs</code>",id:"configs",children:[{value:"<code>HeadConfigs</code>",id:"headconfigs",children:[]},{value:"Meta Configs",id:"meta-configs",children:[]},{value:"Example",id:"example",children:[]}]},{value:"Constructing Existing Modules",id:"constructing-existing-modules",children:[{value:"<code>register_model</code>",id:"register_model",children:[]},{value:"<code>register_pipe</code>",id:"register_pipe",children:[]},{value:"Example",id:"example-1",children:[]}]},{value:"Customizing New Modules",id:"customizing-new-modules",children:[{value:"Customize <code>extractor</code>",id:"customize-extractor",children:[]},{value:"Customize <code>head</code>",id:"customize-head",children:[]},{value:"Conclusions",id:"conclusions",children:[]}]},{value:"Customizing New Aggregators",id:"customizing-new-aggregators",children:[]},{value:"Customizing New Losses",id:"customizing-new-losses",children:[{value:"Introduction",id:"introduction",children:[]},{value:"Example",id:"example-2",children:[]}]}],p={rightToc:b};function m(e){var a=e.components,s=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,s,{components:a,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In this page we will go through some basic concepts we need to know to build our own models in ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn"),". Customizing ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," could be very easy if you only want to construct existing modules to form a new model structure, and should also be fairly straight forward even if you want to implement your own modules."),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"There's a step-by-step example ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../examples/operations"}),"here")," which will walk you through the most important concepts with sufficient codes and experiments."))),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"In order to better understand the following contents, it is recommended to first understand the basic concepts mentioned in the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../design-principles#model"}),"Design Principles"),"."))),Object(i.b)("h2",{id:"configs"},Object(i.b)("inlineCode",{parentName:"h2"},"Configs")),Object(i.b)("p",null,"Before we dive into the details of customization, we should first understand how ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," manages its ",Object(i.b)("inlineCode",{parentName:"p"},"Configs"),". It is actually not more than an ordinary Python ",Object(i.b)("inlineCode",{parentName:"p"},"dict"),", except it can be ",Object(i.b)("em",{parentName:"p"},"registered")," in a certain ",Object(i.b)("em",{parentName:"p"},"hierarchy")," format. Basically, a ",Object(i.b)("inlineCode",{parentName:"p"},"Configs")," needs to define a ",Object(i.b)("inlineCode",{parentName:"p"},"scope")," and a ",Object(i.b)("inlineCode",{parentName:"p"},"name")," for users to access it, where"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("inlineCode",{parentName:"li"},"scope")," represents a module / block / class. "),Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("inlineCode",{parentName:"li"},"name")," represents the different ",Object(i.b)("inlineCode",{parentName:"li"},"version")," of the configurations of the corresponding ",Object(i.b)("inlineCode",{parentName:"li"},"scope"),".")),Object(i.b)("p",null,"For example, if we want to configure a ",Object(i.b)("inlineCode",{parentName:"p"},"module")," named ",Object(i.b)("inlineCode",{parentName:"p"},"Foo")," with different ",Object(i.b)("inlineCode",{parentName:"p"},"dummy_value"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"class Foo:\n    def __init__(self, dummy_value: float):\n        self.dummy = dummy_value\n    \n    def print(self) -> None:\n        print(self.dummy)\n")),Object(i.b)("p",null,"Then we can leverage ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.register_config")," to register different configurations:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\ncflearn.register_config("foo", "one", config={"dummy_value": 1.0})\ncflearn.register_config("foo", "two", config={"dummy_value": 2.0})\n')),Object(i.b)("p",null,"After registration, we can access them through their names, which is very convenient in many use cases (e.g. hyper parameter optimization):"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'for name in ["one", "two"]:\n    cfg = cflearn.Configs.get("foo", name)\n    config = cfg.pop()\n    Foo(**config).print()\n\n# 1.0\n# 2.0\n')),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Notice that we used ",Object(i.b)("inlineCode",{parentName:"p"},"Configs.pop")," to generate a Python ",Object(i.b)("inlineCode",{parentName:"p"},"dict")," for further usages."))),Object(i.b)("p",null,"What's going on under the hood is that ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," maintains a global ",Object(i.b)("inlineCode",{parentName:"p"},"configs_dict")," with following hierarchy:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'{\n    "scope_0": {\n        "name_00": config_class_00,\n        "name_01": config_class_01,\n    },\n    "scope_1": {\n        "name_10": config_class_10,\n        "name_11": config_class_11,\n    },\n    ...,\n    "scope_k": {\n        "name_k0": config_class_k0,\n        "name_k1": config_class_k1,\n    },\n}\n')),Object(i.b)("p",null,"So after the registration mentioned above, this global ",Object(i.b)("inlineCode",{parentName:"p"},"configs_dict")," will be updated to:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'{\n    ...,\n    "foo": {\n        "one": FooOneConfig,\n        "two": FooTwoConfig,\n    }\n}\n')),Object(i.b)("h3",{id:"headconfigs"},Object(i.b)("inlineCode",{parentName:"h3"},"HeadConfigs")),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"HeadConfigs")," inherits from ",Object(i.b)("inlineCode",{parentName:"p"},"Configs")," and holds more information. The reason why we implement an extra sub-class of ",Object(i.b)("inlineCode",{parentName:"p"},"Configs")," is that we usually need more information in ",Object(i.b)("inlineCode",{parentName:"p"},"head")," than in ",Object(i.b)("inlineCode",{parentName:"p"},"transform")," and ",Object(i.b)("inlineCode",{parentName:"p"},"extractor"),". For instance, we need to know the data dimensions to inference the default ",Object(i.b)("inlineCode",{parentName:"p"},"output_dim"),"."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"We need to call ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.register_head_config")," if we want to register a new ",Object(i.b)("inlineCode",{parentName:"p"},"HeadConfigs"),"."))),Object(i.b)("h3",{id:"meta-configs"},"Meta Configs"),Object(i.b)("p",null,"In some corner cases, we might need to"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Depend one config to another."),Object(i.b)("li",{parentName:"ul"},"Construct multiple configs simultaneously.")),Object(i.b)("p",null,"where ",Object(i.b)("inlineCode",{parentName:"p"},"Meta Configs")," will come to rescue. In ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn"),", we leveraged ",Object(i.b)("inlineCode",{parentName:"p"},"Meta Configs")," to implement the ",Object(i.b)("inlineCode",{parentName:"p"},"Neural Naive Bayes")," model as shown ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/78d4b2f9f657139dabc5260decf6f73be30d5dd7/cflearn/models/nnb.py#L19-L29"}),"here"),"."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Similar to ",Object(i.b)("inlineCode",{parentName:"p"},"metaclass")," in Python, ",Object(i.b)("inlineCode",{parentName:"p"},"Meta Configs")," here is some kind of ",Object(i.b)("em",{parentName:"p"},"black magic")," and prones to be buggy. It is not recommended to be used unless we have to."))),Object(i.b)("p",null,"Constructing ",Object(i.b)("inlineCode",{parentName:"p"},"Meta Configs")," itself has no differences with constructing normal configs, and the magic part comes to where you utilize it. For example, if we need to spend lots of time to train a model before we generate two configs that need different properties of this model:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'model = train()  # this will cost lots of time\nconfig1 = {"foo": model.foo}\nconfig2 = {"bar": model.bar}\n')),Object(i.b)("p",null,"We surely don't want to train the model over and over again when we are construting the configs, and that's exactly where ",Object(i.b)("inlineCode",{parentName:"p"},"Meta Configs")," can help us. Instead of:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'@cflearn.register_config("config1")\nclass Config1(cflearn.Configs):\n    def get_default(self):\n        model = train()\n        return {"foo": model.foo}\n\n@cflearn.register_config("config2")\nclass Config2(cflearn.Configs):\n    def get_default(self):\n        model = train()\n        return {"bar": model.bar}\n')),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Meta Configs")," constructs configs as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'@cflearn.register_config("meta_config")\nclass MetaConfig(cflearn.Configs):\n    def get_default(self):\n        model = train()\n        return {\n            "config1": {"foo": model.foo},\n            "config2": {"bar": model.bar},\n        }\n')),Object(i.b)("p",null,"In this way, we can prevent from calling ",Object(i.b)("inlineCode",{parentName:"p"},"train()")," twice."),Object(i.b)("h3",{id:"example"},"Example"),Object(i.b)("p",null,"In this section, we'll show you how to utilize ",Object(i.b)("inlineCode",{parentName:"p"},"Meta Configs")," with a runnable example. This example does not have any practical value, but can well illustrate the concepts mentioned above."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("ul",{parentName:"div"},Object(i.b)("li",{parentName:"ul"},"For examples on how to customize ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#headconfigs"}),"HeadConfigs"),", please refer to the ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#customize-head"}),"Customize ",Object(i.b)("inlineCode",{parentName:"a"},"head"))," section."),Object(i.b)("li",{parentName:"ul"},"For details of ",Object(i.b)("inlineCode",{parentName:"li"},"register_extractor")," and ",Object(i.b)("inlineCode",{parentName:"li"},"register_model"),", please refer to ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#customize-extractor"}),"Customize ",Object(i.b)("inlineCode",{parentName:"a"},"extractor"))," and ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#register_model"}),Object(i.b)("inlineCode",{parentName:"a"},"register_model"))," respectively.")))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\nimport numpy as np\nfrom sklearn.svm import SVR\nfrom cflearn.modules.extractors import Identity\n\nx = np.random.random([10 ** 4, 3])\ny = np.random.random([10 ** 4, 1])\n\n@cflearn.register_config("svr_meta", "default")\nclass SVRMetaConfig(cflearn.Configs):\n    def get_default(self):\n        svr = SVR().fit(x, y.ravel())\n        return {\n            "support": {"data": ("support", svr.support_)},\n            "intercept": {"data": ("intercept", svr.intercept_)},\n        }\n\n\n@cflearn.register_extractor("support")\nclass Support(Identity):\n    def __init__(self, in_flat_dim, dimensions, **kwargs):\n        # kwargs == svr_meta["support"]\n        super().__init__(in_flat_dim, dimensions, **kwargs)\n        # so kwargs["data"] == ("support", svr.support_)\n        print(kwargs["data"])\n\n\n@cflearn.register_extractor("intercept")\nclass Intercept(Identity):\n    def __init__(self, in_flat_dim, dimensions, **kwargs):\n        # kwargs == svr_meta["intercept"]\n        super().__init__(in_flat_dim, dimensions, **kwargs)\n        # so kwargs["data"] == ("intercept", svr.intercept_)\n        print(kwargs["data"])\n\n\ncflearn.register_model(\n    "test_svr",\n    pipes=[\n        cflearn.PipeInfo("support", extractor_meta_scope="svr_meta", head="linear"),\n        cflearn.PipeInfo("intercept", extractor_meta_scope="svr_meta", head="linear"),\n    ]\n)\n\ncflearn.make("test_svr").fit(x, y)\n')),Object(i.b)("p",null,"Which yields"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"('support', array([   0,    1,    2, ..., 9996, 9997, 9998]))\n('intercept', array([0.45095548]))\n")),Object(i.b)("h2",{id:"constructing-existing-modules"},"Constructing Existing Modules"),Object(i.b)("p",null,"With the help of ",Object(i.b)("inlineCode",{parentName:"p"},"Configs"),", constructing existing modules is pretty easy because we can access different configurations by specifying their ",Object(i.b)("inlineCode",{parentName:"p"},"scope")," and ",Object(i.b)("inlineCode",{parentName:"p"},"name"),". In fact, as mentioned in ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../design-principles#examples"}),Object(i.b)("inlineCode",{parentName:"a"},"Design Principles")),", ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," itself is actually implementing its models by such similar process:"),Object(i.b)(c.a,{groupId:"models",defaultValue:"linear",values:[{label:"Linear",value:"linear"},{label:"FCNN",value:"fcnn"},{label:"Wide & Deep",value:"wnd"},{label:"RNN",value:"rnn"},{label:"Transformer",value:"transformer"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"linear",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'@ModelBase.register("linear")\n@ModelBase.register_pipe("linear")\nclass LinearModel(ModelBase):\n    pass\n'))),Object(i.b)(o.a,{value:"fcnn",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'@ModelBase.register("fcnn")\n@ModelBase.register_pipe("fcnn")\nclass FCNN(ModelBase):\n    pass\n'))),Object(i.b)(o.a,{value:"wnd",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'@ModelBase.register("wnd")\n@ModelBase.register_pipe("fcnn", transform="embedding")\n@ModelBase.register_pipe("linear", transform="one_hot_only")\nclass WideAndDeep(ModelBase):\n    pass\n'))),Object(i.b)(o.a,{value:"rnn",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'@ModelBase.register("rnn")\n@ModelBase.register_pipe("rnn", head="fcnn")\nclass RNN(ModelBase):\n    pass\n'))),Object(i.b)(o.a,{value:"transformer",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'@ModelBase.register("transformer")\n@ModelBase.register_pipe("transformer", head="fcnn")\nclass Transformer(ModelBase):\n    pass\n')))),Object(i.b)("h3",{id:"register_model"},Object(i.b)("inlineCode",{parentName:"h3"},"register_model")),Object(i.b)("p",null,"In ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," we implemented an alias for ",Object(i.b)("inlineCode",{parentName:"p"},"ModelBase.register"),", which is often utilized together with ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#register_pipe"}),Object(i.b)("inlineCode",{parentName:"a"},"register_pipe")),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"def register_model(\n    name: str,\n    *,\n    pipes: Optional[List[PipeInfo]] = None,\n) -> Optional[Callable[[Type], Type]]:\n    if pipes is None:\n        return ModelBase.register(name)\n\n    @ModelBase.register(name)\n    class _(ModelBase):\n        pass\n\n    for pipe in pipes:\n        _ = register_pipe(\n            pipe.key,\n            transform=pipe.transform,\n            extractor=pipe.extractor,\n            head=pipe.head,\n            extractor_config=pipe.extractor_config,\n            head_config=pipe.head_config,\n            extractor_meta_scope=pipe.extractor_meta_scope,\n            head_meta_scope=pipe.head_meta_scope,\n        )(_)\n\n    return None\n")),Object(i.b)("p",null,"It can be used to register a new model and access it through its name, which is very convenient in many use cases (e.g. hyper parameter optimization)."),Object(i.b)("p",null,"It's worth mentioning that this API could be utilized either in the OOP form:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\n@cflearn.register_model("my_own_linear")\n@cflearn.register_pipe("linear")\nclass MyOwnLinear(cflearn.ModelBase):\n    pass\n')),Object(i.b)("p",null,"or in the functional form:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\ncflearn.register_model("my_own_linear", pipes=[cflearn.PipeInfo("linear")])\n')),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"In most cases the functional form is enough and easier to use, but the OOP form provides more flexibilities and can satisfy special needs."))),Object(i.b)("h3",{id:"register_pipe"},Object(i.b)("inlineCode",{parentName:"h3"},"register_pipe")),Object(i.b)("p",null,"In ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," we implemented an alias for ",Object(i.b)("inlineCode",{parentName:"p"},"ModelBase.register_pipe"),", which is often utilized together with ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#register_model"}),Object(i.b)("inlineCode",{parentName:"a"},"register_model")),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'def register_pipe(\n    key: str,\n    *,\n    transform: str = "default",\n    extractor: Optional[str] = None,\n    head: Optional[str] = None,\n    extractor_config: str = "default",\n    head_config: str = "default",\n    extractor_meta_scope: Optional[str] = None,\n    head_meta_scope: Optional[str] = None,\n) -> Callable[[Type], Type]:\n    return ModelBase.register_pipe(\n        key,\n        transform=transform,\n        extractor=extractor,\n        head=head,\n        extractor_config=extractor_config,\n        head_config=head_config,\n        extractor_meta_scope=extractor_meta_scope,\n        head_meta_scope=head_meta_scope,\n    )\n')),Object(i.b)("p",null,"In this definition, the ",Object(i.b)("inlineCode",{parentName:"p"},"extractor")," and ",Object(i.b)("inlineCode",{parentName:"p"},"head")," arguments represent the corresponding ",Object(i.b)("inlineCode",{parentName:"p"},"scope"),", while ",Object(i.b)("inlineCode",{parentName:"p"},"transform"),", ",Object(i.b)("inlineCode",{parentName:"p"},"extractor_config")," and ",Object(i.b)("inlineCode",{parentName:"p"},"head_config")," represent the corresponding ",Object(i.b)("inlineCode",{parentName:"p"},"name"),". In other words, this definition actually means:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'transform_cfg = cflearn.Configs.get("transform", transform)\nextractor_cfg = cflearn.Configs.get(extractor, extractor_config)\nhead_cfg = cflearn.HeadConfigs.get(head, head_config)\n')),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"There is only one ",Object(i.b)("inlineCode",{parentName:"p"},"scope")," for ",Object(i.b)("inlineCode",{parentName:"p"},"transform")," because the number of choices of ",Object(i.b)("inlineCode",{parentName:"p"},"transform")," is limited (see ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../design-principles#transform"}),"transform")," for more details)."))),Object(i.b)("p",null,"You may have noticed that there exists an ",Object(i.b)("inlineCode",{parentName:"p"},"extractor_meta_scope")," kwarg and a ",Object(i.b)("inlineCode",{parentName:"p"},"head_meta_scope")," kwarg, and they are where the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#meta-configs"}),Object(i.b)("inlineCode",{parentName:"a"},"Meta Configs"))," mechanism takes place."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Please refer to this ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#example"}),"Example")," for more details."))),Object(i.b)("p",null,"Besides these, there still remains a ",Object(i.b)("inlineCode",{parentName:"p"},"key")," argument in ",Object(i.b)("inlineCode",{parentName:"p"},"register_pipe"),", and this is where many default logics hide under the hood:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'if head is None:\n    head = key\nelif extractor is None:\n    extractor = key\nif extractor is None:\n    extractor = "identity"\n')),Object(i.b)("p",null,"These logics simplify the definitions of some common structures, so in ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," we only need to care about the ",Object(i.b)("inlineCode",{parentName:"p"},"key")," argument in most cases."),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"For the ",Object(i.b)("inlineCode",{parentName:"p"},"key")," itself, the only constraint is that different ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../design-principles#pipe"}),"pipe")," should correspond to different ",Object(i.b)("inlineCode",{parentName:"p"},"key"),"."))),Object(i.b)("h3",{id:"example-1"},"Example"),Object(i.b)("p",null,"In this section, we will demonstrate how could we build a new model with following properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Use one hot features to train a ",Object(i.b)("inlineCode",{parentName:"li"},"DNDF")," ",Object(i.b)("inlineCode",{parentName:"li"},"head"),"."),Object(i.b)("li",{parentName:"ul"},"Use one hot features and numerical features to train a ",Object(i.b)("inlineCode",{parentName:"li"},"linear")," ",Object(i.b)("inlineCode",{parentName:"li"},"head"),"."),Object(i.b)("li",{parentName:"ul"},"Use numerical features to train a ",Object(i.b)("inlineCode",{parentName:"li"},"linear")," ",Object(i.b)("inlineCode",{parentName:"li"},"head"),"."),Object(i.b)("li",{parentName:"ul"},"Use numerical features to train an ",Object(i.b)("inlineCode",{parentName:"li"},"fcnn")," ",Object(i.b)("inlineCode",{parentName:"li"},"head"),"."),Object(i.b)("li",{parentName:"ul"},"Use embedding features to train an ",Object(i.b)("inlineCode",{parentName:"li"},"fcnn")," ",Object(i.b)("inlineCode",{parentName:"li"},"head"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\ncflearn.register_model(\n    "brand_new_model",\n    pipes=[\n        cflearn.PipeInfo("dndf", transform="one_hot_only"),\n        cflearn.PipeInfo("linear", transform="one_hot"),\n        cflearn.PipeInfo("linear2", transform="numerical", extractor="identity", head="linear"),\n        cflearn.PipeInfo("fcnn", transform="numerical"),\n        cflearn.PipeInfo("fcnn2", transform="embedding_only", extractor="identity", head="fcnn"),\n    ]\n)\n')),Object(i.b)("p",null,"We can actually visualize it with ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../getting-started/quick-start#visualizing"}),Object(i.b)("inlineCode",{parentName:"a"},"draw"))," API (click to zoom in):"),Object(i.b)("p",null,Object(i.b)("a",{target:"_blank",href:t(182).default}," ",Object(i.b)("img",{alt:"Brand New Model",src:t(183).default})," ")),Object(i.b)("p",null,"And can also play with it:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import numpy as np\n\nnumerical = np.random.random([10000, 5])\ncategorical = np.random.randint(0, 10, [10000, 5])\nx = np.hstack([numerical, categorical])\ny = np.random.random([10000, 1])\nm = cflearn.make("brand_new_model").fit(x, y)\nprint(m.model)\n')),Object(i.b)("details",null,Object(i.b)("summary",null,Object(i.b)("b",null,"Which yields")),Object(i.b)("p",null,Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"_(\n  (pipes): Pipes(\n    (dndf): one_hot_only_identity_default -> dndf_default\n    (linear): one_hot_identity_default -> linear_default\n    (linear2): numerical_identity_default -> linear_default\n    (fcnn): numerical_identity_default -> fcnn_default\n    (fcnn2): embedding_only_identity_default -> fcnn_default\n  )\n  (loss): MAELoss()\n  (encoder): Encoder(\n    (embeddings): ModuleList(\n      (0): Embedding(\n        (core): Lambda(embedding: 50 -> 4)\n      )\n    )\n    (one_hot_encoders): ModuleList(\n      (0): OneHot(\n        (core): Lambda(one_hot_10)\n      )\n      (1): OneHot(\n        (core): Lambda(one_hot_10)\n      )\n      (2): OneHot(\n        (core): Lambda(one_hot_10)\n      )\n      (3): OneHot(\n        (core): Lambda(one_hot_10)\n      )\n      (4): OneHot(\n        (core): Lambda(one_hot_10)\n      )\n    )\n    (embedding_dropout): Dropout(keep=0.8)\n  )\n  (transforms): ModuleDict(\n    (one_hot_only): Transform(\n      (use_one_hot): True\n      (use_embedding): False\n      (only_categorical): True\n    )\n    (one_hot): Transform(\n      (use_one_hot): True\n      (use_embedding): False\n      (only_categorical): False\n    )\n    (numerical): Transform(\n      (use_one_hot): False\n      (use_embedding): False\n      (only_categorical): False\n    )\n    (embedding_only): Transform(\n      (use_one_hot): False\n      (use_embedding): True\n      (only_categorical): True\n    )\n  )\n  (extractors): ModuleDict(\n    (one_hot_only_identity_default): Identity()\n    (one_hot_identity_default): Identity()\n    (numerical_identity_default): Identity()\n    (embedding_only_identity_default): Identity()\n  )\n  (heads): ModuleDict(\n    (dndf): DNDFHead(\n      (dndf): DNDF(\n        (tree_proj): Linear(\n          (linear): Linear(in_features=50, out_features=310, bias=True)\n          (pruner): Pruner(method='auto_prune')\n        )\n      )\n    )\n    (linear): LinearHead(\n      (linear): Linear(\n        (linear): Linear(in_features=55, out_features=1, bias=True)\n      )\n    )\n    (linear2): LinearHead(\n      (linear): Linear(\n        (linear): Linear(in_features=5, out_features=1, bias=True)\n      )\n    )\n    (fcnn): FCNNHead(\n      (mlp): MLP(\n        (mappings): ModuleList(\n          (0): Mapping(\n            (linear): Linear(\n              (linear): Linear(in_features=5, out_features=64, bias=False)\n            )\n            (bn): BN(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): ReLU(inplace=True)\n            (dropout): Dropout(keep=0.5)\n          )\n          (1): Mapping(\n            (linear): Linear(\n              (linear): Linear(in_features=64, out_features=64, bias=False)\n            )\n            (bn): BN(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): ReLU(inplace=True)\n            (dropout): Dropout(keep=0.5)\n          )\n          (2): Linear(\n            (linear): Linear(in_features=64, out_features=1, bias=True)\n          )\n        )\n      )\n    )\n    (fcnn2): FCNNHead(\n      (mlp): MLP(\n        (mappings): ModuleList(\n          (0): Mapping(\n            (linear): Linear(\n              (linear): Linear(in_features=20, out_features=64, bias=False)\n            )\n            (bn): BN(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): ReLU(inplace=True)\n            (dropout): Dropout(keep=0.5)\n          )\n          (1): Mapping(\n            (linear): Linear(\n              (linear): Linear(in_features=64, out_features=64, bias=False)\n            )\n            (bn): BN(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): ReLU(inplace=True)\n            (dropout): Dropout(keep=0.5)\n          )\n          (2): Linear(\n            (linear): Linear(in_features=64, out_features=1, bias=True)\n          )\n        )\n      )\n    )\n  )\n)\n")))),Object(i.b)("h2",{id:"customizing-new-modules"},"Customizing New Modules"),Object(i.b)("p",null,"In this section, we'll introduce how to customize your own ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../design-principles#extractor"}),Object(i.b)("inlineCode",{parentName:"a"},"extractor"))," and ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../design-principles#head"}),Object(i.b)("inlineCode",{parentName:"a"},"head")),"."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Currently ",Object(i.b)("inlineCode",{parentName:"p"},"transform")," is not customizable because ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," sticks to ",Object(i.b)("inlineCode",{parentName:"p"},"one_hot")," and ",Object(i.b)("inlineCode",{parentName:"p"},"embedding"),". Please refer to ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../design-principles#transform"}),"Design Principles")," for more details."))),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Again, we recommend ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../examples/operations"}),"this")," step-by-step example which will walk you through the most important concepts with sufficient codes and experiments."))),Object(i.b)("h3",{id:"customize-extractor"},"Customize ",Object(i.b)("inlineCode",{parentName:"h3"},"extractor")),Object(i.b)("p",null,"Recap that an ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../design-principles#extractor"}),Object(i.b)("inlineCode",{parentName:"a"},"extractor"))," is responsible for extracting the (transformed) input data into latent features. For tabular datasets, it will simply be ",Object(i.b)("inlineCode",{parentName:"p"},"identity")," in most cases because we can hardly have any prior knowledge."),Object(i.b)("p",null,"We can, however, inject prior knowledge into ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," if we happen to have one. For example, if we have two features, namely ",Object(i.b)("em",{parentName:"p"},"working hours")," (",Object(i.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(i.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mi",{parentName:"mrow"},"t")),Object(i.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"t")))),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.61508em",verticalAlign:"0em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal"}),"t"))))),") and ",Object(i.b)("em",{parentName:"p"},"wage")," (",Object(i.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(i.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mi",{parentName:"mrow"},"x")),Object(i.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"x")))),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal"}),"x"))))),"), and the target is to calculate the ",Object(i.b)("em",{parentName:"p"},"actual income")," (",Object(i.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(i.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mi",{parentName:"mrow"},"y")),Object(i.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"y")))),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal",style:{marginRight:"0.03588em"}}),"y"))))),"):"),Object(i.b)("div",{className:"math math-display"},Object(i.b)("span",Object(n.a)({parentName:"div"},{className:"katex-display"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(i.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"}),Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mi",{parentName:"mrow"},"y"),Object(i.b)("mo",{parentName:"mrow"},"="),Object(i.b)("mi",{parentName:"mrow"},"t"),Object(i.b)("mo",{parentName:"mrow"},"\xd7"),Object(i.b)("mi",{parentName:"mrow"},"x")),Object(i.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"y=t\\times x")))),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal",style:{marginRight:"0.03588em"}}),"y"),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"="),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.69841em",verticalAlign:"-0.08333em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal"}),"t"),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\xd7"),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal"}),"x")))))),Object(i.b)("p",null,"Although this task seems easy to humans, it is actually quite difficult for Neural Networks because Neural Networks lack information of multiplication across features. We can run a small experiment to quickly demonstrate this:"),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"The example showing below is a simplified version of the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../examples/operations"}),"Operations")," example."))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\nimport numpy as np\n\nx = np.random.random([10000, 2]) * 2.0\ny = np.prod(x, axis=1, keepdims=True)\n\n# `reg` represents a regression task\n# `use_simplify_data` indicates that `carefree-learn` will do nothing to the input data\nkwargs = {"task_type": "reg", "use_simplify_data": True}\nfcnn = cflearn.make(**kwargs).fit(x, y)\ncflearn.evaluate(x, y, pipelines=fcnn)\n')),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"We've set ",Object(i.b)("inlineCode",{parentName:"p"},"use_simplify_data")," to ",Object(i.b)("inlineCode",{parentName:"p"},"True"),". That's because we want to hold the datasets' property, so we should not apply any pre-processing strategies to the original dataset."))),Object(i.b)("p",null,"Which yields"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"================================================================================================================================\n|        metrics         |                       mae                        |                       mse                        |\n--------------------------------------------------------------------------------------------------------------------------------\n|                        |      mean      |      std       |     score      |      mean      |      std       |     score      |\n--------------------------------------------------------------------------------------------------------------------------------\n|          fcnn          |    0.062123    |    0.000000    |    -0.06212    |    0.006766    |    0.000000    |    -0.00676    |\n================================================================================================================================\n")),Object(i.b)("p",null,"We can see that ",Object(i.b)("inlineCode",{parentName:"p"},"fcnn")," failed to approach to the ground truth. In order to improve this, we can implement an ",Object(i.b)("inlineCode",{parentName:"p"},"extractor")," to generate a new feature representing cross-feature multiplication (with the help of ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.register_extractor"),"):"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import torch\n\n# The name `cross_multiplication` is actually the `scope` of this `extractor`\n@cflearn.register_extractor("cross_multiplication")\nclass CrossMultiplication(cflearn.ExtractorBase):\n    # This property represents the dimension of this `extractor`\'s output\n    @property\n    def out_dim(self) -> int:\n        return 1\n\n    # This is where your algorithms should be implemented\n    # net.shape : [ batch_size, in_dim ]\n    def forward(self, net: torch.Tensor) -> torch.Tensor:\n        prod = net[..., 0] * net[..., 1]\n        return prod.view([-1, 1])\n')),Object(i.b)("p",null,"After defining the ",Object(i.b)("inlineCode",{parentName:"p"},"extractor"),", we need to (at least) define the ",Object(i.b)("inlineCode",{parentName:"p"},"default")," config under its ",Object(i.b)("inlineCode",{parentName:"p"},"scope"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'cflearn.register_config("cross_multiplication", "default", config={})\n')),Object(i.b)("p",null,"Since ",Object(i.b)("inlineCode",{parentName:"p"},"CrossMultiplication")," doesn't really need any configurations, simply returning an empty Python ",Object(i.b)("inlineCode",{parentName:"p"},"dict")," will be enough."),Object(i.b)("p",null,"With these two steps, we have already implemented a ready-to-use ",Object(i.b)("inlineCode",{parentName:"p"},"extractor")," which holds our prior knowledge, so the next step is to utilize it:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'cflearn.register_model(\n    "multiplication",\n    pipes=[cflearn.PipeInfo("linear", extractor="cross_multiplication")]\n)\n')),Object(i.b)("p",null,"And that's it! Because ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," will do most of the boiler plates for you."),Object(i.b)("p",null,"Let's run a small experiment to demonstrate the validaty of our new model:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'mul = cflearn.make("multiplication", **kwargs).fit(x, y)\ncflearn.evaluate(x, y, pipelines=[fcnn, mul])\n')),Object(i.b)("p",null,"Which yields"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"================================================================================================================================\n|        metrics         |                       mae                        |                       mse                        |\n--------------------------------------------------------------------------------------------------------------------------------\n|                        |      mean      |      std       |     score      |      mean      |      std       |     score      |\n--------------------------------------------------------------------------------------------------------------------------------\n|          fcnn          |    0.065125    | -- 0.000000 -- |    -0.06512    |    0.007785    | -- 0.000000 -- |    -0.00778    |\n--------------------------------------------------------------------------------------------------------------------------------\n|     multiplication     | -- 0.000078 -- | -- 0.000000 -- | -- -0.00007 -- | -- 0.000000 -- | -- 0.000000 -- | -- -0.00000 -- |\n================================================================================================================================\n")),Object(i.b)("p",null,"As we expected, the ",Object(i.b)("inlineCode",{parentName:"p"},"multiplication")," model approaches to the ground truth\ud83e\udd73"),Object(i.b)("h3",{id:"customize-head"},"Customize ",Object(i.b)("inlineCode",{parentName:"h3"},"head")),Object(i.b)("p",null,"Although the result is satisfying, in most real-life cases it is hard to obtain such strong prior knowledges. Recap that ",Object(i.b)("inlineCode",{parentName:"p"},"fcnn")," fails because it lacks cross-feature information, so a model with cross-feature information should be able to solve this ",Object(i.b)("em",{parentName:"p"},"total income")," task, and that's where Deep-and-Cross",Object(i.b)("sup",Object(n.a)({parentName:"p"},{id:"fnref-1"}),Object(i.b)("a",Object(n.a)({parentName:"sup"},{href:"#fn-1",className:"footnote-ref"}),"1"))," network comes to rescue:"),Object(i.b)("p",null,Object(i.b)("img",{alt:"Cross Layer",src:t(184).default})),Object(i.b)("p",null,"Since ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," has already implemented ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/carefree0910/carefree-learn/blob/03edf2bd8cc32b7fe2ce30be6e4196adf7ab0bde/cflearn/modules/blocks.py#L508"}),Object(i.b)("inlineCode",{parentName:"a"},"CrossBlock")),", we can utilize it to build our ",Object(i.b)("inlineCode",{parentName:"p"},"CrossHead")," easily (with the help of ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.register_head"),"):"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'from typing import Optional\nfrom cflearn.modules.blocks import Linear\nfrom cflearn.modules.blocks import CrossBlock\nfrom cflearn.misc.toolkit import Activations\n\n# The name `cross` is actually the `scope` of this `head`\n@cflearn.register_head("cross")\nclass CrossHead(cflearn.HeadBase):\n    def __init__(self, in_dim: int, out_dim: int, activation: Optional[str]):\n        super().__init__(in_dim, out_dim)\n        self.cross = CrossBlock(in_dim, residual=False, bias=False)\n        if activation is None:\n            self.activation = None\n        else:\n            self.activation = Activations.make(activation)\n        self.linear = Linear(in_dim, out_dim)\n    \n    def forward(self, net: torch.Tensor) -> torch.Tensor:\n        net = self.cross(net, net)\n        if self.activation is not None:\n            net = self.activation(net)\n        return self.linear(net)\n')),Object(i.b)("p",null,"After defining the ",Object(i.b)("inlineCode",{parentName:"p"},"head"),", we need to (at least) define the ",Object(i.b)("inlineCode",{parentName:"p"},"default")," config under its ",Object(i.b)("inlineCode",{parentName:"p"},"scope"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'# Notice that we need to call `register_head_config` for registering `HeadConfigs`, as mentioned in the `HeadConfigs` section\n# We need to define `activation` because `CrossHead` requires it\n# However we don\'t need to define `in_dim` and `out_dim`, because `carefree-learn` will handle them for us!\ncflearn.register_head_config("cross", "default", head_config={"activation": None})\n')),Object(i.b)("p",null,"With these two steps, we have already implemented a ready-to-use ",Object(i.b)("inlineCode",{parentName:"p"},"head")," which can perform cross-feature operations, so the next step is to utilize it:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'cflearn.register_model("cross", pipes=[cflearn.PipeInfo("cross")])\n')),Object(i.b)("p",null,"Again, that's it! Let's run a small experiment to demonstrate the validaty of our new model:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'cross = cflearn.make("cross", **kwargs).fit(x, y)\ncflearn.evaluate(x, y, pipelines=[fcnn, mul, cross])\n')),Object(i.b)("p",null,"Which yields"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"================================================================================================================================\n|        metrics         |                       mae                        |                       mse                        |\n--------------------------------------------------------------------------------------------------------------------------------\n|                        |      mean      |      std       |     score      |      mean      |      std       |     score      |\n--------------------------------------------------------------------------------------------------------------------------------\n|         cross          |    0.000178    | -- 0.000000 -- |    -0.00017    |    0.000000    | -- 0.000000 -- |    -0.00000    |\n--------------------------------------------------------------------------------------------------------------------------------\n|          fcnn          |    0.064953    | -- 0.000000 -- |    -0.06495    |    0.007111    | -- 0.000000 -- |    -0.00711    |\n--------------------------------------------------------------------------------------------------------------------------------\n|     multiplication     | -- 0.000025 -- | -- 0.000000 -- | -- -0.00002 -- | -- 0.000000 -- | -- 0.000000 -- | -- -0.00000 -- |\n================================================================================================================================\n")),Object(i.b)("p",null,"As we expected, the ",Object(i.b)("inlineCode",{parentName:"p"},"cross")," model approaches to the ground truth\ud83e\udd73"),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Notice that we've used ",Object(i.b)("inlineCode",{parentName:"p"},"residual=False")," in ",Object(i.b)("inlineCode",{parentName:"p"},"CrossBlock"),", which is the secret ingredient of why ",Object(i.b)("inlineCode",{parentName:"p"},"cross")," model can approach to the ground truth."))),Object(i.b)("h3",{id:"conclusions"},"Conclusions"),Object(i.b)("p",null,"The above two sections showed us how to customize our own ",Object(i.b)("inlineCode",{parentName:"p"},"extractor")," and ",Object(i.b)("inlineCode",{parentName:"p"},"head"),", which should be sufficient to implement most of the models targeting tabular datasets. ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," actually supports more customizations (e.g. metrics, initializations, etc), but they are more of some tricks than the main part of an algorithm. We hope that this guide can help you leverage ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," in your own tasks!"),Object(i.b)("h2",{id:"customizing-new-aggregators"},"Customizing New Aggregators"),Object(i.b)("p",null,"In this section, we'll introduce how to customize your own ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../design-principles#aggregator"}),Object(i.b)("inlineCode",{parentName:"a"},"Aggregator")),". Although we have already done many experiments across different datasets and finds out that a simple ",Object(i.b)("inlineCode",{parentName:"p"},"sum")," operation is quite enough for most cases, ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," yet supports registering new aggregator for special needs (with the help of ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.register_aggregator"),")."),Object(i.b)("p",null,"In fact, if you have read over the previous section, you may notice that we can solve the ",Object(i.b)("em",{parentName:"p"},"actual income")," task with a custom ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../design-principles#aggregator"}),Object(i.b)("inlineCode",{parentName:"a"},"Aggregator"))," - the ",Object(i.b)("inlineCode",{parentName:"p"},"Prod")," aggregator:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\n@cflearn.register_aggregator("prod")\nclass Prod(cflearn.AggregatorBase):\n    def reduce(self, outputs, **kwargs):\n        return {"predictions": outputs["linear"] * outputs["linear2"]}\n\ncflearn.register_model(\n    "prod",\n    pipes=[\n        cflearn.PipeInfo("linear"),\n        cflearn.PipeInfo("linear2", extractor="identity", head="linear")\n    ]\n)\n')),Object(i.b)("p",null,"Here, we've defined two ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../design-principles#pipe"}),Object(i.b)("inlineCode",{parentName:"a"},"pipe"))," with ",Object(i.b)("inlineCode",{parentName:"p"},"linear")," head, then we aggregate them with a ",Object(i.b)("inlineCode",{parentName:"p"},"multiply")," operation to get our final output. Since the ground truth (",Object(i.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(i.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mi",{parentName:"mrow"},"y"),Object(i.b)("mo",{parentName:"mrow"},"="),Object(i.b)("mi",{parentName:"mrow"},"t"),Object(i.b)("mo",{parentName:"mrow"},"\xd7"),Object(i.b)("mi",{parentName:"mrow"},"x")),Object(i.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"y=t\\times x")))),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal",style:{marginRight:"0.03588em"}}),"y"),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"="),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.69841em",verticalAlign:"-0.08333em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal"}),"t"),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\xd7"),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal"}),"x"))))),") is as well a ",Object(i.b)("inlineCode",{parentName:"p"},"multiply")," operation between features, this design should be able to achieve great performance. We can run the experiment mentioned in previous section to demonstrate it:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import numpy as np\n\nx = np.random.random([10000, 2]) * 2.0\ny = np.prod(x, axis=1, keepdims=True)\n\n# `reg` represents a regression task\n# `use_simplify_data` indicates that `carefree-learn` will do nothing to the input data\nkwargs = {"task_type": "reg", "use_simplify_data": True}\nprod = cflearn.make("prod", aggregator="prod", **kwargs).fit(x, y)\ncflearn.evaluate(x, y, pipelines=prod)\n')),Object(i.b)("p",null,"Which yields"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"================================================================================================================================\n|        metrics         |                       mae                        |                       mse                        |\n--------------------------------------------------------------------------------------------------------------------------------\n|                        |      mean      |      std       |     score      |      mean      |      std       |     score      |\n--------------------------------------------------------------------------------------------------------------------------------\n|          prod          |    0.000345    |    0.000000    |    -0.00034    |    0.000000    |    0.000000    |    -0.00000    |\n================================================================================================================================\n")),Object(i.b)("p",null,"As we expected, the ",Object(i.b)("inlineCode",{parentName:"p"},"prod")," model with ",Object(i.b)("inlineCode",{parentName:"p"},"prod")," aggregator approaches to the ground truth\ud83e\udd73"),Object(i.b)("h2",{id:"customizing-new-losses"},"Customizing New Losses"),Object(i.b)("p",null,"In this section, we'll introduce how to customize your own losses. Customizing new losses often means that you're facing a difficult task, and you're using your talent to solve it. So congratulations to you because you've reached here!"),Object(i.b)("h3",{id:"introduction"},"Introduction"),Object(i.b)("p",null,"In ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn"),", it is pretty straight forward to define new losses. For example, ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," itself defines ",Object(i.b)("inlineCode",{parentName:"p"},"MSELoss")," as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'@LossBase.register("mse")\nclass MSELoss(LossBase):\n    def _core(\n        self,\n        forward_results: tensor_dict_type,\n        target: torch.Tensor,\n        **kwargs: Any,\n    ) -> torch.Tensor:\n        return F.mse_loss(forward_results["predictions"], target, reduction="none")\n')),Object(i.b)("p",null,"There are a few things that we need to clarify:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The minimal requirement is to implement the abstract ",Object(i.b)("inlineCode",{parentName:"li"},"_core")," method, as shown above. We need to make sure that this method returns the ",Object(i.b)("em",{parentName:"li"},"raw")," losses (notice that we've used ",Object(i.b)("inlineCode",{parentName:"li"},'reduction="none"')," in ",Object(i.b)("inlineCode",{parentName:"li"},"F.mse_loss"),"), because ",Object(i.b)("inlineCode",{parentName:"li"},"carefree-learn")," requires the ",Object(i.b)("em",{parentName:"li"},"raw")," losses to further perform some post-processings."),Object(i.b)("li",{parentName:"ul"},"We have ",Object(i.b)("inlineCode",{parentName:"li"},"forward_results")," as input, which is a ",Object(i.b)("inlineCode",{parentName:"li"},"tensor_dict_type"),". This is exactly what a ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"../design-principles#model"}),Object(i.b)("inlineCode",{parentName:"a"},"Model"))," will return to you. In most cases, this is simply ",Object(i.b)("inlineCode",{parentName:"li"},'{"predictions": predictions}'),". But in some special cases (e.g. the ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/carefree0910/carefree-learn/blob/c80365049c0cb9e5baf43c1a1e7cabcdc04610ed/cflearn/models/ddr/model.py#L20"}),Object(i.b)("inlineCode",{parentName:"a"},"DDR"))," model), the hierarchy may be more complicated than one single ",Object(i.b)("inlineCode",{parentName:"li"},'"predictions"')," key. For example, in quantile models (",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/carefree0910/carefree-learn/blob/c80365049c0cb9e5baf43c1a1e7cabcdc04610ed/cflearn/models/fcnn.py#L18"}),Object(i.b)("inlineCode",{parentName:"a"},"QuantileFCNN")),", ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/carefree0910/carefree-learn/blob/c80365049c0cb9e5baf43c1a1e7cabcdc04610ed/cflearn/models/ddr/model.py#L20"}),Object(i.b)("inlineCode",{parentName:"a"},"DDR")),"), we require developers to include a ",Object(i.b)("inlineCode",{parentName:"li"},'"quantiles"')," key in ",Object(i.b)("inlineCode",{parentName:"li"},"forward_results"),", so we can implement the ",Object(i.b)("inlineCode",{parentName:"li"},"Quantile")," loss as follows:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'@LossBase.register("quantile")\nclass Quantile(LossBase):\n    def _init_config(self, config: Dict[str, Any]) -> None:\n        self.q = ...\n\n    def _core(\n        self,\n        forward_results: tensor_dict_type,\n        target: torch.Tensor,\n        **kwargs: Any,\n    ) -> torch.Tensor:\n        quantile_error = target - forward_results["quantiles"]\n        neg_errors = self.q * quantile_error\n        pos_errors = (self.q - 1) * quantile_error\n        quantile_losses = torch.max(neg_errors, pos_errors)\n        return quantile_losses.mean(1, keepdim=True)\n')),Object(i.b)("p",null,"So basically you only need to consider how to fetch one (or some) of the outputs from your model, compare it (or them) to the target, and finally get the (raw) losses."),Object(i.b)("h3",{id:"example-2"},"Example"),Object(i.b)("p",null,"In this section, we will provide an example to illustrate how to define a new loss function, which only cares about whether the outputs of the model is close to ",Object(i.b)("inlineCode",{parentName:"p"},"1"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\n@cflearn.register_loss("to_one")\nclass ToOneLoss(cflearn.LossBase):\n    def _core(self, forward_results, target, **kwargs):\n        return (forward_results["predictions"] - 1.0).abs()\n')),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"You might notice that ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," has provided ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.register_loss")," API as an alias of ",Object(i.b)("inlineCode",{parentName:"p"},"LossBase.register"),"."))),Object(i.b)("p",null,"We can try this loss with a simple experiment:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import numpy as np\nfrom cflearn.misc.toolkit import to_numpy\n\nx = np.random.random([1000, 4])\ny = np.random.random([1000, 1])\n# we need to use `loss` as metrics here\n# because `mae` and `mse` are no longer valid metrics under the `to_one` loss\nm = cflearn.make("linear", loss="to_one", metrics="loss").fit(x, y)\nlinear = m.model.heads["linear"].linear\nprint("w:", to_numpy(linear.weight.data))\nprint("b:", to_numpy(linear.bias.data))\n')),Object(i.b)("p",null,"Which yields"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"w: [[-3.6413432e-05  3.4193643e-05 -1.0862313e-04  1.1812412e-04]]\nb: [1.0000271]\n")),Object(i.b)("p",null,"This means that the ",Object(i.b)("inlineCode",{parentName:"p"},"to_one")," loss is actually working\ud83d\ude06"),Object(i.b)("div",{className:"footnotes"},Object(i.b)("hr",{parentName:"div"}),Object(i.b)("ol",{parentName:"div"},Object(i.b)("li",Object(n.a)({parentName:"ol"},{id:"fn-1"}),"Wang, Ruoxi, et al. \u201cDeep & cross network for ad click predictions.\u201d Proceedings of the ADKDD\u201917. 2017. 1-7. ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#fnref-1",className:"footnote-backref"}),"\u21a9")))))}m.isMDXComponent=!0}}]);