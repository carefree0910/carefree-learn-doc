(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{105:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return u}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),d=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},b=function(e){var n=d(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=d(t),m=a,u=b["".concat(o,".").concat(m)]||b[m]||p[m]||i;return t?r.a.createElement(u,c(c({ref:n},s),{},{components:t})):r.a.createElement(u,c({ref:n},s))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=t[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},106:function(e,n,t){"use strict";function a(e){var n,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(r&&(r+=" "),r+=t);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}n.a=function(){for(var e,n,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(r&&(r+=" "),r+=n);return r}},110:function(e,n,t){"use strict";var a=t(0),r=t(111);n.a=function(){var e=Object(a.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},111:function(e,n,t){"use strict";var a=t(0),r=Object(a.createContext)(void 0);n.a=r},113:function(e,n,t){"use strict";var a=t(0),r=t.n(a),i=t(110),o=t(106),c=t(52),l=t.n(c),s=37,d=39;n.a=function(e){var n=e.lazy,t=e.block,c=e.children,b=e.defaultValue,p=e.values,m=e.groupId,u=e.className,f=Object(i.a)(),O=f.tabGroupChoices,g=f.setTabGroupChoices,j=Object(a.useState)(b),h=j[0],N=j[1];if(null!=m){var _=O[m];null!=_&&_!==h&&p.some((function(e){return e.value===_}))&&N(_)}var v=function(e){N(e),null!=m&&g(m,e)},y=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":t},u)},p.map((function(e){var n=e.value,t=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":h===n,className:Object(o.a)("tabs__item",l.a.tabItem,{"tabs__item--active":h===n}),key:n,ref:function(e){return y.push(e)},onKeyDown:function(e){!function(e,n,t){switch(t.keyCode){case d:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case s:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(y,e.target,e)},onFocus:function(){return v(n)},onClick:function(){v(n)}},t)}))),n?Object(a.cloneElement)(c.filter((function(e){return e.props.value===h}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},c.map((function(e,n){return Object(a.cloneElement)(e,{key:n,hidden:e.props.value!==h})}))))}},114:function(e,n,t){"use strict";var a=t(3),r=t(0),i=t.n(r);n.a=function(e){var n=e.children,t=e.hidden,r=e.className;return i.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:t,className:r}),n)}},78:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return d})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(7),i=(t(0),t(105)),o=t(113),c=t(114),l={id:"customization",title:"Build Your Own Models",sidebar_label:"Customization"},s={unversionedId:"developer-guides/customization",id:"developer-guides/customization",isDocsHomePage:!1,title:"Build Your Own Models",description:"In this page we will go through some basic concepts we need to know to build our own models in carefree-learn. Customizing carefree-learn could be very easy if you only want to construct existing blocks to form a new model structure, and should also be fairly straight forward even if you want to implement your own blocks.",source:"@site/docs/developer-guides/customization.md",slug:"/developer-guides/customization",permalink:"/carefree-learn-doc/docs/developer-guides/customization",version:"current",lastUpdatedAt:1605970056,sidebar_label:"Customization",sidebar:"docs",previous:{title:"Examples",permalink:"/carefree-learn-doc/docs/user-guides/examples"},next:{title:"Release Notes",permalink:"/carefree-learn-doc/docs/about/release-notes"}},d=[{value:"<code>Configs</code>",id:"configs",children:[{value:"<code>HeadConfigs</code>",id:"headconfigs",children:[]}]},{value:"Constructing Existing Blocks",id:"constructing-existing-blocks",children:[{value:"<code>ModelBase.register</code>",id:"modelbaseregister",children:[]},{value:"<code>ModelBase.register_pipe</code>",id:"modelbaseregister_pipe",children:[]}]},{value:"Customizing New Modules",id:"customizing-new-modules",children:[]}],b={rightToc:d};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In this page we will go through some basic concepts we need to know to build our own models in ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn"),". Customizing ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," could be very easy if you only want to construct existing blocks to form a new model structure, and should also be fairly straight forward even if you want to implement your own blocks."),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"There's a step-by-step example ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../user-guides/examples#operations"}),"here")," which will walk you through the most important concepts with sufficient codes and experiments."))),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"In order to better understand the following contents, it is recommended to first understand the basic concepts mentioned in the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../design-principles#model"}),"Design Principles"),"."))),Object(i.b)("h2",{id:"configs"},Object(i.b)("inlineCode",{parentName:"h2"},"Configs")),Object(i.b)("p",null,"Before we dive into the details of customization, we should first understand how ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," manages its ",Object(i.b)("inlineCode",{parentName:"p"},"Configs"),". It is actually not more than an ordinary Python ",Object(i.b)("inlineCode",{parentName:"p"},"dict"),", except it can be ",Object(i.b)("em",{parentName:"p"},"registered")," in a certain ",Object(i.b)("em",{parentName:"p"},"hierarchy")," format. Basically, a ",Object(i.b)("inlineCode",{parentName:"p"},"Configs")," need to define a ",Object(i.b)("inlineCode",{parentName:"p"},"scope")," and a ",Object(i.b)("inlineCode",{parentName:"p"},"name")," for users to access it, where"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("inlineCode",{parentName:"li"},"scope")," represents a ",Object(i.b)("inlineCode",{parentName:"li"},"module"),". "),Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("inlineCode",{parentName:"li"},"name")," represents the different ",Object(i.b)("inlineCode",{parentName:"li"},"version")," of the corresponding configuration.")),Object(i.b)("p",null,"For example, if we want to configure a ",Object(i.b)("inlineCode",{parentName:"p"},"module")," named ",Object(i.b)("inlineCode",{parentName:"p"},"Foo")," with different ",Object(i.b)("inlineCode",{parentName:"p"},"dummy_value"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"class Foo:\n    def __init__(self, dummy_value: float):\n        self.dummy = dummy_value\n    \n    def print(self) -> None:\n        print(self.dummy)\n")),Object(i.b)("p",null,"Then we can leverage ",Object(i.b)("inlineCode",{parentName:"p"},"cflearn.register_config")," to register different configurations:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\n@cflearn.register_config("foo", "one")\nclass FooOneConfig(cflearn.Configs):\n    def get_default(self):\n        return {"dummy_value": 1.0}\n\n@cflearn.register_config("foo", "two")\nclass FooTwoConfig(cflearn.Configs):\n    def get_default(self):\n        return {"dummy_value": 2.0}\n')),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Notice that we've implemented ",Object(i.b)("inlineCode",{parentName:"p"},"get_default")," for each class, which is the only necessary method we need to inherit from ",Object(i.b)("inlineCode",{parentName:"p"},"Configs"),"."))),Object(i.b)("p",null,"After registration, we can access them through their names, which is very convenient in many use cases (e.g. hyper parameter optimization):"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'for name in ["one", "two"]:\n    cfg = cflearn.Configs.get("foo", name)\n    config = cfg.pop()\n    Foo(**config).print()\n\n# 1.0\n# 2.0\n')),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Notice that we used ",Object(i.b)("inlineCode",{parentName:"p"},"Configs.pop")," to generate a Python ",Object(i.b)("inlineCode",{parentName:"p"},"dict")," for further usages."))),Object(i.b)("p",null,"What's going on under the hood is that ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," maintains a global ",Object(i.b)("inlineCode",{parentName:"p"},"configs_dict")," with following hierarchy:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'{\n    "scope_0": {\n        "name_00": config_class_00,\n        "name_01": config_class_01,\n    },\n    "scope_1": {\n        "name_10": config_class_10,\n        "name_11": config_class_11,\n    },\n    ...,\n    "scope_k": {\n        "name_k0": config_class_k0,\n        "name_k1": config_class_k1,\n    },\n}\n')),Object(i.b)("p",null,"So after the registration mentioned above, this global ",Object(i.b)("inlineCode",{parentName:"p"},"configs_dict")," will be updated to:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'{\n    ...,\n    "foo": {\n        "one": FooOneConfig,\n        "two": FooTwoConfig,\n    }\n}\n')),Object(i.b)("h3",{id:"headconfigs"},Object(i.b)("inlineCode",{parentName:"h3"},"HeadConfigs")),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"HeadConfigs")," inherits from ",Object(i.b)("inlineCode",{parentName:"p"},"Configs")," and holds more information. The reason why we implement an extra sub-class of ",Object(i.b)("inlineCode",{parentName:"p"},"Configs")," is that we usually need more information in ",Object(i.b)("inlineCode",{parentName:"p"},"head")," than in ",Object(i.b)("inlineCode",{parentName:"p"},"transform")," and ",Object(i.b)("inlineCode",{parentName:"p"},"extractor"),". For instance, we need to know the data dimensions to inference the default ",Object(i.b)("inlineCode",{parentName:"p"},"output_dim"),"."),Object(i.b)("h2",{id:"constructing-existing-blocks"},"Constructing Existing Blocks"),Object(i.b)("p",null,"With the help of ",Object(i.b)("inlineCode",{parentName:"p"},"Configs"),", constructing existing blocks is pretty easy because we can access different configurations by specifying their ",Object(i.b)("inlineCode",{parentName:"p"},"scope")," and ",Object(i.b)("inlineCode",{parentName:"p"},"name"),". In fact, as mentioned in ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../design-principles#examples"}),Object(i.b)("inlineCode",{parentName:"a"},"Design Principles")),", ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," itself is actually implementing its models by such similar process:"),Object(i.b)(o.a,{groupId:"models",defaultValue:"linear",values:[{label:"Linear",value:"linear"},{label:"FCNN",value:"fcnn"},{label:"Wide & Deep",value:"wnd"},{label:"RNN",value:"rnn"},{label:"Transformer",value:"transformer"}],mdxType:"Tabs"},Object(i.b)(c.a,{value:"linear",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'@ModelBase.register("linear")\n@ModelBase.register_pipe("linear")\nclass LinearModel(ModelBase):\n    pass\n'))),Object(i.b)(c.a,{value:"fcnn",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'@ModelBase.register("fcnn")\n@ModelBase.register_pipe("fcnn")\nclass FCNN(ModelBase):\n    pass\n'))),Object(i.b)(c.a,{value:"wnd",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'@ModelBase.register("wnd")\n@ModelBase.register_pipe("fcnn", transform="embedding")\n@ModelBase.register_pipe("linear", transform="one_hot_only")\nclass WideAndDeep(ModelBase):\n    pass\n'))),Object(i.b)(c.a,{value:"rnn",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'@ModelBase.register("rnn")\n@ModelBase.register_pipe("rnn", head="fcnn")\nclass RNN(ModelBase):\n    pass\n'))),Object(i.b)(c.a,{value:"transformer",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'@ModelBase.register("transformer")\n@ModelBase.register_pipe("transformer", head="fcnn")\nclass Transformer(ModelBase):\n    pass\n')))),Object(i.b)("h3",{id:"modelbaseregister"},Object(i.b)("inlineCode",{parentName:"h3"},"ModelBase.register")),Object(i.b)("p",null,"In ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," we implemented an alias for ",Object(i.b)("inlineCode",{parentName:"p"},"ModelBase.register"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"def register_model(name: str) -> Callable[[Type], Type]:\n    return ModelBase.register(name)\n")),Object(i.b)("p",null,"It can be used to register a new model and access it through its name, which is very convenient in many use cases (e.g. hyper parameter optimization)."),Object(i.b)("h3",{id:"modelbaseregister_pipe"},Object(i.b)("inlineCode",{parentName:"h3"},"ModelBase.register_pipe")),Object(i.b)("p",null,"In ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," we implemented an alias for ",Object(i.b)("inlineCode",{parentName:"p"},"ModelBase.register_pipe"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'def register_pipe(\n    key: str,\n    *,\n    transform: str = "default",\n    extractor: Optional[str] = None,\n    head: Optional[str] = None,\n    extractor_config: str = "default",\n    head_config: str = "default",\n    extractor_meta_scope: Optional[str] = None,\n    head_meta_scope: Optional[str] = None,\n) -> Callable[[Type], Type]:\n    return ModelBase.register_pipe(\n        key,\n        transform=transform,\n        extractor=extractor,\n        head=head,\n        extractor_config=extractor_config,\n        head_config=head_config,\n        extractor_meta_scope=extractor_meta_scope,\n        head_meta_scope=head_meta_scope,\n    )\n')),Object(i.b)("p",null,"In this definition, the ",Object(i.b)("inlineCode",{parentName:"p"},"extractor")," and ",Object(i.b)("inlineCode",{parentName:"p"},"head")," arguments represent the corresponding ",Object(i.b)("inlineCode",{parentName:"p"},"scope"),", while ",Object(i.b)("inlineCode",{parentName:"p"},"transform"),", ",Object(i.b)("inlineCode",{parentName:"p"},"extractor_config")," and ",Object(i.b)("inlineCode",{parentName:"p"},"head_config")," represent the corresponding ",Object(i.b)("inlineCode",{parentName:"p"},"name"),". In other words, this definition actually means:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'transform_cfg = cflearn.Configs.get("transform", transform)\nextractor_cfg = cflearn.Configs.get(extractor, extractor_config)\nhead_cfg = cflearn.HeadConfigs.get(head, head_config)\n')),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("ul",{parentName:"div"},Object(i.b)("li",{parentName:"ul"},"There is only one ",Object(i.b)("inlineCode",{parentName:"li"},"scope")," for ",Object(i.b)("inlineCode",{parentName:"li"},"transform")," because the number of choices of ",Object(i.b)("inlineCode",{parentName:"li"},"transform")," is limited (see ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"../design-principles#transform"}),"transform")," for more details)."),Object(i.b)("li",{parentName:"ul"},"We are using ",Object(i.b)("inlineCode",{parentName:"li"},"cflearn.HeadConfigs")," to fetch configurations for ",Object(i.b)("inlineCode",{parentName:"li"},"head"),", as mentioned in ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#headconfigs"}),"HeadConfigs")," section.")))),Object(i.b)("p",null,"Besides these, there still remains a ",Object(i.b)("inlineCode",{parentName:"p"},"key")," argument in ",Object(i.b)("inlineCode",{parentName:"p"},"register_pipe")," and this is where many default logics hide under the hood:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'if head is None:\n    head = key\nelif extractor is None:\n    extractor = key\nif extractor is None:\n    extractor = "identity"\n')),Object(i.b)("p",null,"These logics simplify the definitions of some common structures, so in ",Object(i.b)("inlineCode",{parentName:"p"},"carefree-learn")," we only care about the ",Object(i.b)("inlineCode",{parentName:"p"},"key")," argument in most cases."),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"For the ",Object(i.b)("inlineCode",{parentName:"p"},"key")," itself, we only need to guarantee that different ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../design-principles#pipe"}),"pipe")," corresponds to different ",Object(i.b)("inlineCode",{parentName:"p"},"key"),"."))),Object(i.b)("p",null,"At the last part of this section, we will demonstrate how could we build a new model with following properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Use one hot features to train a ",Object(i.b)("inlineCode",{parentName:"li"},"DNDF")," ",Object(i.b)("inlineCode",{parentName:"li"},"head"),"."),Object(i.b)("li",{parentName:"ul"},"Use one hot features and numerical features to train a ",Object(i.b)("inlineCode",{parentName:"li"},"linear")," ",Object(i.b)("inlineCode",{parentName:"li"},"head"),"."),Object(i.b)("li",{parentName:"ul"},"Use numerical features to train an ",Object(i.b)("inlineCode",{parentName:"li"},"fcnn")," ",Object(i.b)("inlineCode",{parentName:"li"},"head"),"."),Object(i.b)("li",{parentName:"ul"},"Use embedding features to train an ",Object(i.b)("inlineCode",{parentName:"li"},"fcnn")," ",Object(i.b)("inlineCode",{parentName:"li"},"head"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import cflearn\n\n@cflearn.register_model("brand_new_model")\n@cflearn.register_pipe("dndf", transform="one_hot_only")\n@cflearn.register_pipe("linear", transform="one_hot")\n@cflearn.register_pipe("fcnn", transform="numerical")\n@cflearn.register_pipe("fcnn2", transform="embedding_only", extractor="identity", head="fcnn")\nclass BrandNewModel(cflearn.ModelBase):\n    pass\n')),Object(i.b)("p",null,"We can actually play with it:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'import numpy as np\n\nnumerical = np.random.random([10000, 5])\ncategorical = np.random.randint(0, 10, [10000, 5])\nx = np.hstack([numerical, categorical])\ny = np.random.random([10000, 1])\nm = cflearn.make("brand_new_model").fit(x, y)\nprint(m.model)\n')),Object(i.b)("details",null,Object(i.b)("summary",null,Object(i.b)("b",null,"Which yields")),Object(i.b)("p",null,Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"BrandNewModel(\n  (pipes): Pipes(\n    (fcnn2): embedding_only_identity_default -> fcnn_default\n    (fcnn): numerical_identity_default -> fcnn_default\n    (linear): one_hot_identity_default -> linear_default\n    (dndf): one_hot_only_identity_default -> dndf_default\n  )\n  (loss): L1Loss()\n  (encoder): Encoder(\n    (embeddings): ModuleList(\n      (0): Embedding(\n        (core): Lambda(embedding: 50 -> 4)\n      )\n    )\n    (one_hot_encoders): ModuleList(\n      (0): OneHot(\n        (core): Lambda(one_hot_10)\n      )\n      (1): OneHot(\n        (core): Lambda(one_hot_10)\n      )\n      (2): OneHot(\n        (core): Lambda(one_hot_10)\n      )\n      (3): OneHot(\n        (core): Lambda(one_hot_10)\n      )\n      (4): OneHot(\n        (core): Lambda(one_hot_10)\n      )\n    )\n    (embedding_dropout): Dropout(keep=0.8)\n  )\n  (transforms): ModuleDict(\n    (embedding_only): Transform(\n      (use_one_hot): False\n      (use_embedding): True\n      (only_categorical): True\n    )\n    (numerical): Transform(\n      (use_one_hot): False\n      (use_embedding): False\n      (only_categorical): False\n    )\n    (one_hot): Transform(\n      (use_one_hot): True\n      (use_embedding): False\n      (only_categorical): False\n    )\n    (one_hot_only): Transform(\n      (use_one_hot): True\n      (use_embedding): False\n      (only_categorical): True\n    )\n  )\n  (extractors): ModuleDict(\n    (embedding_only_identity_default): Identity()\n    (numerical_identity_default): Identity()\n    (one_hot_identity_default): Identity()\n    (one_hot_only_identity_default): Identity()\n  )\n  (heads): ModuleDict(\n    (fcnn2): FCNNHead(\n      (mlp): MLP(\n        (mappings): ModuleList(\n          (0): Mapping(\n            (linear): Linear(\n              (linear): Linear(in_features=20, out_features=64, bias=False)\n            )\n            (bn): BN(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): ReLU(inplace=True)\n            (dropout): Dropout(keep=0.5)\n          )\n          (1): Mapping(\n            (linear): Linear(\n              (linear): Linear(in_features=64, out_features=64, bias=False)\n            )\n            (bn): BN(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): ReLU(inplace=True)\n            (dropout): Dropout(keep=0.5)\n          )\n          (2): Linear(\n            (linear): Linear(in_features=64, out_features=1, bias=True)\n          )\n        )\n      )\n    )\n    (fcnn): FCNNHead(\n      (mlp): MLP(\n        (mappings): ModuleList(\n          (0): Mapping(\n            (linear): Linear(\n              (linear): Linear(in_features=5, out_features=64, bias=False)\n            )\n            (bn): BN(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): ReLU(inplace=True)\n            (dropout): Dropout(keep=0.5)\n          )\n          (1): Mapping(\n            (linear): Linear(\n              (linear): Linear(in_features=64, out_features=64, bias=False)\n            )\n            (bn): BN(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            (activation): ReLU(inplace=True)\n            (dropout): Dropout(keep=0.5)\n          )\n          (2): Linear(\n            (linear): Linear(in_features=64, out_features=1, bias=True)\n          )\n        )\n      )\n    )\n    (linear): LinearHead(\n      (linear): Linear(\n        (linear): Linear(in_features=55, out_features=1, bias=True)\n      )\n    )\n    (dndf): DNDFHead(\n      (dndf): DNDF(\n        (tree_proj): Linear(\n          (linear): Linear(in_features=50, out_features=310, bias=True)\n          (pruner): Pruner(method='auto_prune')\n        )\n      )\n    )\n  )\n)\n")))),Object(i.b)("h2",{id:"customizing-new-modules"},"Customizing New Modules"))}p.isMDXComponent=!0}}]);